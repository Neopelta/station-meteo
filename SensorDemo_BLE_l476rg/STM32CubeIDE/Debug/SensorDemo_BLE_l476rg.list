
SensorDemo_BLE_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800e000  0800e000  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e64c  0800e64c  000101ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e64c  0800e64c  0000f64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e654  0800e654  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e654  0800e654  0000f654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e658  0800e658  0000f658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e65c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  200001ec  0800e848  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000bc0  0800e848  00010bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_line   00025fee  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000008a  00000000  00000000  0003620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002645b  00000000  00000000  00036294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000049ab  00000000  00000000  0005c6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f70  00000000  00000000  000610a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe62a  00000000  00000000  00063010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000185b  00000000  00000000  0016163a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cb07  00000000  00000000  00162e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018f99c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009714  00000000  00000000  0018f9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dfe8 	.word	0x0800dfe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800dfe8 	.word	0x0800dfe8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f003 f8a2 	bl	8003fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f00b f81f 	bl	800bf08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f002 fa6d 	bl	80033a8 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000edc:	0800e65c 	.word	0x0800e65c
  ldr r2, =_sbss
 8000ee0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000ee4:	20000bc0 	.word	0x20000bc0

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <MX_BlueNRG_2_Init>:
static void Set_Random_Motion_Values(uint32_t cnt);
static void Reset_Motion_Values(void);

/* Initialisation de la stack BLE et des capteurs */
void MX_BlueNRG_2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  uint8_t ret;
  User_Init();
 8000ef2:	f000 f827 	bl	8000f44 <User_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f002 ff5e 	bl	8003db8 <BSP_PB_GetState>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_BlueNRG_2_Init+0x40>)
 8000f02:	701a      	strb	r2, [r3, #0]
  hci_init(APP_UserEvtRx, NULL);
 8000f04:	2100      	movs	r1, #0
 8000f06:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <MX_BlueNRG_2_Init+0x44>)
 8000f08:	f009 fee0 	bl	800accc <hci_init>
  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  ret = Sensor_DeviceInit();
 8000f0c:	f000 f828 	bl	8000f60 <Sensor_DeviceInit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <MX_BlueNRG_2_Init+0x38>
  {
    BSP_LED_On(LED2);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f002 feae 	bl	8003c7c <BSP_LED_On>
    PRINT_DBG("Sensor_DeviceInit() échoué (0x%02x)\r\n", ret);
    while (1);
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MX_BlueNRG_2_Init+0x34>
  }
  PRINT_DBG("BLE Stack et configuration du device initialisés\r\n");
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	08003605 	.word	0x08003605

08000f34 <MX_BlueNRG_2_Process>:

/* Boucle de traitement principal */
void MX_BlueNRG_2_Process(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  hci_user_evt_proc();
 8000f38:	f00a f842 	bl	800afc0 <hci_user_evt_proc>
  User_Process();
 8000f3c:	f000 f8aa 	bl	8001094 <User_Process>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <User_Init>:

/* Initialisation des composants utilisateur */
static void User_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f002 fee0 	bl	8003d10 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f002 fe81 	bl	8003c58 <BSP_LED_Init>
  BSP_COM_Init(COM1);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f002 ff58 	bl	8003e0c <BSP_COM_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Sensor_DeviceInit>:

/* Initialisation du device capteur et configuration BLE */
uint8_t Sensor_DeviceInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8000f66:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <Sensor_DeviceInit+0x128>)
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f70:	6018      	str	r0, [r3, #0]
 8000f72:	3304      	adds	r3, #4
 8000f74:	8019      	strh	r1, [r3, #0]
 8000f76:	3302      	adds	r3, #2
 8000f78:	0c0a      	lsrs	r2, r1, #16
 8000f7a:	701a      	strb	r2, [r3, #0]
  uint8_t hwVersion;
  uint16_t fwVersion;
  uint8_t bdaddr_len_out;
  uint8_t config_data_stored_static_random_address = 0x80;
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	75fb      	strb	r3, [r7, #23]

  /* Réinitialisation du dispositif */
  hci_reset();
 8000f80:	f009 fd22 	bl	800a9c8 <hci_reset>
  HAL_Delay(2000);
 8000f84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f88:	f003 f8ba 	bl	8004100 <HAL_Delay>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f8c:	1d3a      	adds	r2, r7, #4
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fbbc 	bl	8002710 <getBlueNRGVersion>
  PRINT_DBG("HWver %d, FWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8000f98:	1cf9      	adds	r1, r7, #3
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800108c <Sensor_DeviceInit+0x12c>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 f8fd 	bl	800919e <aci_hal_read_config_data>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	75bb      	strb	r3, [r7, #22]
                                 &bdaddr_len_out, bdaddr);
  if (ret)
    PRINT_DBG("Échec de lecture de l’adresse statique\r\n");

  if ((bdaddr[5] & 0xC0) != 0xC0)
 8000fa8:	4b38      	ldr	r3, [pc, #224]	@ (800108c <Sensor_DeviceInit+0x12c>)
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000fb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fb2:	d001      	beq.n	8000fb8 <Sensor_DeviceInit+0x58>
  {
    PRINT_DBG("Adresse statique mal formée\r\n");
    while (1);
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Sensor_DeviceInit+0x54>
  }

  ret = aci_hal_set_tx_power_level(1, 4);
 8000fb8:	2104      	movs	r1, #4
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f008 f973 	bl	80092a6 <aci_hal_set_tx_power_level>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8000fc4:	7dbb      	ldrb	r3, [r7, #22]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <Sensor_DeviceInit+0x6e>
  {
    PRINT_DBG("Erreur aci_hal_set_tx_power_level() 0x%04x\r\n", ret);
    return ret;
 8000fca:	7dbb      	ldrb	r3, [r7, #22]
 8000fcc:	e057      	b.n	800107e <Sensor_DeviceInit+0x11e>
  }
  PRINT_DBG("Tx power level configuré\r\n");

  ret = aci_gatt_init();
 8000fce:	f007 fdce 	bl	8008b6e <aci_gatt_init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8000fd6:	7dbb      	ldrb	r3, [r7, #22]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <Sensor_DeviceInit+0x80>
  {
    PRINT_DBG("aci_gatt_init() échoué: 0x%02x\r\n", ret);
    return ret;
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	e04e      	b.n	800107e <Sensor_DeviceInit+0x11e>
  }
  PRINT_DBG("aci_gatt_init() OK\r\n");

  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07,
 8000fe0:	f107 0214 	add.w	r2, r7, #20
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 0312 	add.w	r3, r7, #18
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f007 fc91 	bl	800891e <aci_gap_init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	75bb      	strb	r3, [r7, #22]
                     &service_handle, &dev_name_char_handle, &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 8001000:	7dbb      	ldrb	r3, [r7, #22]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <Sensor_DeviceInit+0xaa>
  {
    PRINT_DBG("aci_gap_init() échoué: 0x%02x\r\n", ret);
    return ret;
 8001006:	7dbb      	ldrb	r3, [r7, #22]
 8001008:	e039      	b.n	800107e <Sensor_DeviceInit+0x11e>
  }
  PRINT_DBG("aci_gap_init() OK\r\n");

  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name), device_name);
 800100a:	8ab8      	ldrh	r0, [r7, #20]
 800100c:	8a79      	ldrh	r1, [r7, #18]
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2307      	movs	r3, #7
 8001016:	2200      	movs	r2, #0
 8001018:	f007 ffb1 	bl	8008f7e <aci_gatt_update_char_value>
 800101c:	4603      	mov	r3, r0
 800101e:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001020:	7dbb      	ldrb	r3, [r7, #22]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <Sensor_DeviceInit+0xca>
  {
    PRINT_DBG("aci_gatt_update_char_value() échoué: 0x%02x\r\n", ret);
    return ret;
 8001026:	7dbb      	ldrb	r3, [r7, #22]
 8001028:	e029      	b.n	800107e <Sensor_DeviceInit+0x11e>
  }
  PRINT_DBG("Nom du device mis à jour\r\n");

  ret = aci_gap_set_authentication_requirement(BONDING, MITM_PROTECTION_REQUIRED, SC_IS_SUPPORTED,
 800102a:	2300      	movs	r3, #0
 800102c:	9304      	str	r3, [sp, #16]
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <Sensor_DeviceInit+0x130>)
 8001030:	9303      	str	r3, [sp, #12]
 8001032:	2300      	movs	r3, #0
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2310      	movs	r3, #16
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	2307      	movs	r3, #7
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	2201      	movs	r2, #1
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f007 fb9d 	bl	8008784 <aci_gap_set_authentication_requirement>
 800104a:	4603      	mov	r3, r0
 800104c:	75bb      	strb	r3, [r7, #22]
                                                 KEYPRESS_IS_NOT_SUPPORTED, 7, 16,
                                                 USE_FIXED_PIN_FOR_PAIRING, 123456, 0x00);
  if (ret != BLE_STATUS_SUCCESS)
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <Sensor_DeviceInit+0xf8>
  {
    PRINT_DBG("Erreur authentication requirement: 0x%02x\r\n", ret);
    return ret;
 8001054:	7dbb      	ldrb	r3, [r7, #22]
 8001056:	e012      	b.n	800107e <Sensor_DeviceInit+0x11e>
  }
  PRINT_DBG("Authentification configurée\r\n");

  PRINT_DBG("Stack BLE initialisée\r\n");

  ret = Add_HWServW2ST_Service();
 8001058:	f001 fbf6 	bl	8002848 <Add_HWServW2ST_Service>
 800105c:	4603      	mov	r3, r0
 800105e:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001060:	7dbb      	ldrb	r3, [r7, #22]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <Sensor_DeviceInit+0x10a>
  {
    PRINT_DBG("Erreur ajout service HW: 0x%02x\r\n", ret);
    while (1);
 8001066:	bf00      	nop
 8001068:	e7fd      	b.n	8001066 <Sensor_DeviceInit+0x106>
  }
  PRINT_DBG("Service HW ajouté\r\n");

  ret = Add_SWServW2ST_Service();
 800106a:	f001 fcc3 	bl	80029f4 <Add_SWServW2ST_Service>
 800106e:	4603      	mov	r3, r0
 8001070:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <Sensor_DeviceInit+0x11c>
  {
    PRINT_DBG("Erreur ajout service SW: 0x%02x\r\n", ret);
    while (1);
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <Sensor_DeviceInit+0x118>
  }
  PRINT_DBG("Service SW ajouté\r\n");

  return BLE_STATUS_SUCCESS;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	0800e000 	.word	0x0800e000
 800108c:	20000208 	.word	0x20000208
 8001090:	0001e240 	.word	0x0001e240

08001094 <User_Process>:

/* Traitement périodique des capteurs et mise à jour BLE */
void User_Process(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
  float data_t, data_p, data_h;
  static uint32_t counter = 0;

  if (set_connectable)
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <User_Process+0xd0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80010a4:	f002 fa3a 	bl	800351c <Set_DeviceConnectable>
    set_connectable = FALSE;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <User_Process+0xd0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
  }

  BSP_LED_Toggle(LED2);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f002 fe10 	bl	8003cd4 <BSP_LED_Toggle>

  if (connected)
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <User_Process+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d04f      	beq.n	800115c <User_Process+0xc8>
  {
    Read_Real_Environmental_Values(&data_p, &data_t, &data_h);
 80010bc:	1d3a      	adds	r2, r7, #4
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f8c8 	bl	800125c <Read_Real_Environmental_Values>
    Environmental_Update((int32_t)(data_p * 100), (int16_t)(data_t * 10), (int16_t)(data_h * 10));
 80010cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800116c <User_Process+0xd8>
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80010dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ec:	ee17 3a90 	vmov	r3, s15
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 2a90 	vmov	r2, s15
 8001106:	b212      	sxth	r2, r2
 8001108:	4619      	mov	r1, r3
 800110a:	ee16 0a90 	vmov	r0, s13
 800110e:	f001 fe31 	bl	8002d74 <Environmental_Update>

    Set_Random_Motion_Values(counter);
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <User_Process+0xdc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f9a2 	bl	8001460 <Set_Random_Motion_Values>
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800111c:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <User_Process+0xe0>)
 800111e:	4916      	ldr	r1, [pc, #88]	@ (8001178 <User_Process+0xe4>)
 8001120:	4816      	ldr	r0, [pc, #88]	@ (800117c <User_Process+0xe8>)
 8001122:	f001 fcf5 	bl	8002b10 <Acc_Update>
    Quat_Update(&q_axes);
 8001126:	4816      	ldr	r0, [pc, #88]	@ (8001180 <User_Process+0xec>)
 8001128:	f001 fd7c 	bl	8002c24 <Quat_Update>

    counter = (counter + 1) % 40;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <User_Process+0xdc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <User_Process+0xf0>)
 8001134:	fba3 2301 	umull	r2, r3, r3, r1
 8001138:	095a      	lsrs	r2, r3, #5
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	1aca      	subs	r2, r1, r3
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <User_Process+0xdc>)
 8001146:	601a      	str	r2, [r3, #0]
    if (counter == 0)
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <User_Process+0xdc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <User_Process+0xc0>
      Reset_Motion_Values();
 8001150:	f001 f9f4 	bl	800253c <Reset_Motion_Values>

    HAL_Delay(1000);
 8001154:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001158:	f002 ffd2 	bl	8004100 <HAL_Delay>
  }
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000001 	.word	0x20000001
 8001168:	200003a0 	.word	0x200003a0
 800116c:	42c80000 	.word	0x42c80000
 8001170:	20000210 	.word	0x20000210
 8001174:	200003bc 	.word	0x200003bc
 8001178:	200003b0 	.word	0x200003b0
 800117c:	200003a4 	.word	0x200003a4
 8001180:	200003c8 	.word	0x200003c8
 8001184:	cccccccd 	.word	0xcccccccd

08001188 <Sensor_Init>:

/* Initialisation des capteurs LPS22HH et HTS221 */
static void Sensor_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
    stmdev_ctx_t lps22_ctx;
    uint8_t whoamI, rst;

    lps22_ctx.write_reg = platform_write_lps22;
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <Sensor_Init+0xbc>)
 8001190:	61bb      	str	r3, [r7, #24]
    lps22_ctx.read_reg  = platform_read_lps22;
 8001192:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <Sensor_Init+0xc0>)
 8001194:	61fb      	str	r3, [r7, #28]
    lps22_ctx.mdelay    = platform_delay;
 8001196:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <Sensor_Init+0xc4>)
 8001198:	623b      	str	r3, [r7, #32]
    lps22_ctx.handle    = &SENSOR_BUS;
 800119a:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <Sensor_Init+0xc8>)
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24

    platform_delay(5);
 800119e:	2005      	movs	r0, #5
 80011a0:	f002 fb24 	bl	80037ec <platform_delay>
    lps22hh_device_id_get(&lps22_ctx, &whoamI);
 80011a4:	f107 0217 	add.w	r2, r7, #23
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f007 f995 	bl	80084de <lps22hh_device_id_get>
    if (whoamI != LPS22HH_ID)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2bb3      	cmp	r3, #179	@ 0xb3
 80011b8:	d001      	beq.n	80011be <Sensor_Init+0x36>
    {
        PRINT_DBG("LPS22HH non détecté\r\n");
        while(1);
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <Sensor_Init+0x32>
    }
    lps22hh_reset_set(&lps22_ctx, PROPERTY_ENABLE);
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 f99b 	bl	8008500 <lps22hh_reset_set>
    do {
         lps22hh_reset_get(&lps22_ctx, &rst);
 80011ca:	f107 0216 	add.w	r2, r7, #22
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f007 f9b9 	bl	800854c <lps22hh_reset_get>
    } while(rst);
 80011da:	7dbb      	ldrb	r3, [r7, #22]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f4      	bne.n	80011ca <Sensor_Init+0x42>
    lps22hh_block_data_update_set(&lps22_ctx, PROPERTY_ENABLE);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 f8ba 	bl	8008360 <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&lps22_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	2112      	movs	r1, #18
 80011f2:	4618      	mov	r0, r3
 80011f4:	f007 f8da 	bl	80083ac <lps22hh_data_rate_set>

    stmdev_ctx_t hts221_ctx;
    uint8_t hts_id;
    hts221_ctx.write_reg = platform_write_hts221;
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <Sensor_Init+0xcc>)
 80011fa:	607b      	str	r3, [r7, #4]
    hts221_ctx.read_reg  = platform_read_hts221;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <Sensor_Init+0xd0>)
 80011fe:	60bb      	str	r3, [r7, #8]
    hts221_ctx.mdelay    = platform_delay;
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <Sensor_Init+0xc4>)
 8001202:	60fb      	str	r3, [r7, #12]
    hts221_ctx.handle    = &SENSOR_BUS;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <Sensor_Init+0xc8>)
 8001206:	613b      	str	r3, [r7, #16]

    hts221_device_id_get(&hts221_ctx, &hts_id);
 8001208:	1cfa      	adds	r2, r7, #3
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f006 ff6f 	bl	80080f2 <hts221_device_id_get>
    if (hts_id != HTS221_ID)
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2bbc      	cmp	r3, #188	@ 0xbc
 8001218:	d001      	beq.n	800121e <Sensor_Init+0x96>
    {
        PRINT_DBG("HTS221 non détecté\r\n");
        while(1);
 800121a:	bf00      	nop
 800121c:	e7fd      	b.n	800121a <Sensor_Init+0x92>
    }
    hts221_block_data_update_set(&hts221_ctx, PROPERTY_ENABLE);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f006 ff1d 	bl	8008062 <hts221_block_data_update_set>
    hts221_data_rate_set(&hts221_ctx, HTS221_ODR_1Hz);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fef2 	bl	8008016 <hts221_data_rate_set>
    hts221_power_on_set(&hts221_ctx, PROPERTY_ENABLE);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2101      	movs	r1, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f006 ff6c 	bl	8008114 <hts221_power_on_set>
}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080036f5 	.word	0x080036f5
 8001248:	0800372f 	.word	0x0800372f
 800124c:	080037ed 	.word	0x080037ed
 8001250:	20000348 	.word	0x20000348
 8001254:	08003769 	.word	0x08003769
 8001258:	080037ab 	.word	0x080037ab

0800125c <Read_Real_Environmental_Values>:

/* Lecture des valeurs des capteurs environnementaux */
void Read_Real_Environmental_Values(float *pressure, float *temp, float *humidity)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    static uint8_t sensors_initialized = 0;
    if (!sensors_initialized)
 8001268:	4b74      	ldr	r3, [pc, #464]	@ (800143c <Read_Real_Environmental_Values+0x1e0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d104      	bne.n	800127a <Read_Real_Environmental_Values+0x1e>
    {
         Sensor_Init();
 8001270:	f7ff ff8a 	bl	8001188 <Sensor_Init>
         sensors_initialized = 1;
 8001274:	4b71      	ldr	r3, [pc, #452]	@ (800143c <Read_Real_Environmental_Values+0x1e0>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
    }

    stmdev_ctx_t lps22_ctx, hts221_ctx;
    lps22_ctx.write_reg = platform_write_lps22;
 800127a:	4b71      	ldr	r3, [pc, #452]	@ (8001440 <Read_Real_Environmental_Values+0x1e4>)
 800127c:	643b      	str	r3, [r7, #64]	@ 0x40
    lps22_ctx.read_reg  = platform_read_lps22;
 800127e:	4b71      	ldr	r3, [pc, #452]	@ (8001444 <Read_Real_Environmental_Values+0x1e8>)
 8001280:	647b      	str	r3, [r7, #68]	@ 0x44
    lps22_ctx.mdelay    = platform_delay;
 8001282:	4b71      	ldr	r3, [pc, #452]	@ (8001448 <Read_Real_Environmental_Values+0x1ec>)
 8001284:	64bb      	str	r3, [r7, #72]	@ 0x48
    lps22_ctx.handle    = &SENSOR_BUS;
 8001286:	4b71      	ldr	r3, [pc, #452]	@ (800144c <Read_Real_Environmental_Values+0x1f0>)
 8001288:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t data_raw_pressure = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int16_t data_raw_temperature = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	857b      	strh	r3, [r7, #42]	@ 0x2a
    lps22hh_status_t status;
    lps22hh_read_reg(&lps22_ctx, LPS22HH_STATUS, (uint8_t *)&status, 1);
 8001292:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001296:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800129a:	2301      	movs	r3, #1
 800129c:	2127      	movs	r1, #39	@ 0x27
 800129e:	f006 fff0 	bl	8008282 <lps22hh_read_reg>
    if (status.p_da)
 80012a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d011      	beq.n	80012d4 <Read_Real_Environmental_Values+0x78>
    {
         lps22hh_pressure_raw_get(&lps22_ctx, &data_raw_pressure);
 80012b0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80012b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 f8c4 	bl	8008448 <lps22hh_pressure_raw_get>
         *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80012c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 f81a 	bl	80082fc <lps22hh_from_lsb_to_hpa>
 80012c8:	eef0 7a40 	vmov.f32	s15, s0
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	edc3 7a00 	vstr	s15, [r3]
 80012d2:	e003      	b.n	80012dc <Read_Real_Environmental_Values+0x80>
    }
    else
         *pressure = 0;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

    if (status.t_da)
 80012dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d012      	beq.n	8001310 <Read_Real_Environmental_Values+0xb4>
    {
         lps22hh_temperature_raw_get(&lps22_ctx, &data_raw_temperature);
 80012ea:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 80012ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 f8d0 	bl	800849a <lps22hh_temperature_raw_get>
         *temp = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80012fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80012fe:	4618      	mov	r0, r3
 8001300:	f007 f814 	bl	800832c <lps22hh_from_lsb_to_celsius>
 8001304:	eef0 7a40 	vmov.f32	s15, s0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	edc3 7a00 	vstr	s15, [r3]
 800130e:	e003      	b.n	8001318 <Read_Real_Environmental_Values+0xbc>
    }
    else
         *temp = 0;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

    hts221_ctx.write_reg = platform_write_hts221;
 8001318:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <Read_Real_Environmental_Values+0x1f4>)
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
    hts221_ctx.read_reg  = platform_read_hts221;
 800131c:	4b4d      	ldr	r3, [pc, #308]	@ (8001454 <Read_Real_Environmental_Values+0x1f8>)
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
    hts221_ctx.mdelay    = platform_delay;
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <Read_Real_Environmental_Values+0x1ec>)
 8001322:	63bb      	str	r3, [r7, #56]	@ 0x38
    hts221_ctx.handle    = &SENSOR_BUS;
 8001324:	4b49      	ldr	r3, [pc, #292]	@ (800144c <Read_Real_Environmental_Values+0x1f0>)
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c

    lin_t lin_hum;
    hts221_hum_adc_point_0_get(&hts221_ctx, &lin_hum.x0);
 8001328:	f107 0218 	add.w	r2, r7, #24
 800132c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f006 ff61 	bl	80081fa <hts221_hum_adc_point_0_get>
    hts221_hum_rh_point_0_get(&hts221_ctx, &lin_hum.y0);
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	1d1a      	adds	r2, r3, #4
 800133e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f006 ff1c 	bl	8008182 <hts221_hum_rh_point_0_get>
    hts221_hum_adc_point_1_get(&hts221_ctx, &lin_hum.x1);
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	f103 0208 	add.w	r2, r3, #8
 8001352:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f006 ff70 	bl	800823e <hts221_hum_adc_point_1_get>
    hts221_hum_rh_point_1_get(&hts221_ctx, &lin_hum.y1);
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	f103 020c 	add.w	r2, r3, #12
 8001366:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f006 ff26 	bl	80081be <hts221_hum_rh_point_1_get>

    PRINT_DBG("Calibration Humidité: x0=%.2f, y0=%.2f, x1=%.2f, y1=%.2f\r\n",
               lin_hum.x0, lin_hum.y0, lin_hum.x1, lin_hum.y1);

    int16_t data_raw_humidity = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	82fb      	strh	r3, [r7, #22]
    hts221_status_reg_t hts_status;
    hts221_status_get(&hts221_ctx, &hts_status);
 8001376:	f107 0214 	add.w	r2, r7, #20
 800137a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f006 feed 	bl	8008160 <hts221_status_get>
    PRINT_DBG("HTS221 status: h_da=%d\r\n", hts_status.h_da);

    if (hts_status.h_da)
 8001386:	7d3b      	ldrb	r3, [r7, #20]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d04b      	beq.n	800142a <Read_Real_Environmental_Values+0x1ce>
    {
         hts221_humidity_raw_get(&hts221_ctx, &data_raw_humidity);
 8001392:	f107 0216 	add.w	r2, r7, #22
 8001396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fe86 	bl	80080ae <hts221_humidity_raw_get>
         PRINT_DBG("Raw humidity: %d\r\n", data_raw_humidity);
         *humidity = ((lin_hum.y1 - lin_hum.y0) * data_raw_humidity +
 80013a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	ee27 7a27 	vmul.f32	s14, s14, s15
                      ((lin_hum.x1 * lin_hum.y0) - (lin_hum.x0 * lin_hum.y1))) /
 80013be:	edd7 6a08 	vldr	s13, [r7, #32]
 80013c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ca:	ed97 6a06 	vldr	s12, [r7, #24]
 80013ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80013d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
         *humidity = ((lin_hum.y1 - lin_hum.y0) * data_raw_humidity +
 80013da:	ee77 6a27 	vadd.f32	s13, s14, s15
                     (lin_hum.x1 - lin_hum.x0);
 80013de:	ed97 7a08 	vldr	s14, [r7, #32]
 80013e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e6:	ee37 7a67 	vsub.f32	s14, s14, s15
                      ((lin_hum.x1 * lin_hum.y0) - (lin_hum.x0 * lin_hum.y1))) /
 80013ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
         *humidity = ((lin_hum.y1 - lin_hum.y0) * data_raw_humidity +
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a00 	vstr	s15, [r3]
         if (*humidity < 0) *humidity = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d503      	bpl.n	800140c <Read_Real_Environmental_Values+0x1b0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
         if (*humidity > 100) *humidity = 100;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001458 <Read_Real_Environmental_Values+0x1fc>
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dc00      	bgt.n	8001422 <Read_Real_Environmental_Values+0x1c6>
    }
    else
         *humidity = 0;
}
 8001420:	e007      	b.n	8001432 <Read_Real_Environmental_Values+0x1d6>
         if (*humidity > 100) *humidity = 100;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <Read_Real_Environmental_Values+0x200>)
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	e003      	b.n	8001432 <Read_Real_Environmental_Values+0x1d6>
         *humidity = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	@ 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000214 	.word	0x20000214
 8001440:	080036f5 	.word	0x080036f5
 8001444:	0800372f 	.word	0x0800372f
 8001448:	080037ed 	.word	0x080037ed
 800144c:	20000348 	.word	0x20000348
 8001450:	08003769 	.word	0x08003769
 8001454:	080037ab 	.word	0x080037ab
 8001458:	42c80000 	.word	0x42c80000
 800145c:	42c80000 	.word	0x42c80000

08001460 <Set_Random_Motion_Values>:

/* Mise à jour des valeurs de mouvement selon un compteur */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001464:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 8001468:	af00      	add	r7, sp, #0
 800146a:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  if (cnt < 20)
 800146e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001472:	2b13      	cmp	r3, #19
 8001474:	f200 8426 	bhi.w	8001cc4 <Set_Random_Motion_Values+0x864>
  {
    x_axes.AXIS_X +=  10  + ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
 8001478:	f009 ff32 	bl	800b2e0 <rand>
 800147c:	4603      	mov	r3, r0
 800147e:	17da      	asrs	r2, r3, #31
 8001480:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001484:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8001488:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800148c:	2200      	movs	r2, #0
 800148e:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8001492:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8001496:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 800149a:	462b      	mov	r3, r5
 800149c:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 80014a0:	4652      	mov	r2, sl
 80014a2:	fb02 f203 	mul.w	r2, r2, r3
 80014a6:	465b      	mov	r3, fp
 80014a8:	4621      	mov	r1, r4
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	4622      	mov	r2, r4
 80014b2:	4651      	mov	r1, sl
 80014b4:	fba2 8901 	umull	r8, r9, r2, r1
 80014b8:	444b      	add	r3, r9
 80014ba:	4699      	mov	r9, r3
 80014bc:	4642      	mov	r2, r8
 80014be:	464b      	mov	r3, r9
 80014c0:	1891      	adds	r1, r2, r2
 80014c2:	66b9      	str	r1, [r7, #104]	@ 0x68
 80014c4:	415b      	adcs	r3, r3
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80014cc:	eb12 0108 	adds.w	r1, r2, r8
 80014d0:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 80014d4:	eb43 0309 	adc.w	r3, r3, r9
 80014d8:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80014dc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 80014e8:	f7ff fb5e 	bl	8000ba8 <__aeabi_uldivmod>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	f112 010a 	adds.w	r1, r2, #10
 80014f4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80014f8:	f143 0300 	adc.w	r3, r3, #0
 80014fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001500:	4bec      	ldr	r3, [pc, #944]	@ (80018b4 <Set_Random_Motion_Values+0x454>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800150a:	4413      	add	r3, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4be9      	ldr	r3, [pc, #932]	@ (80018b4 <Set_Random_Motion_Values+0x454>)
 8001510:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -10  - ((uint64_t)rand() * 5  * cnt) / RAND_MAX;
 8001512:	f009 fee5 	bl	800b2e0 <rand>
 8001516:	4603      	mov	r3, r0
 8001518:	17da      	asrs	r2, r3, #31
 800151a:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 800151e:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8001522:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001526:	2200      	movs	r2, #0
 8001528:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 800152c:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001530:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8001534:	462b      	mov	r3, r5
 8001536:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 800153a:	4642      	mov	r2, r8
 800153c:	fb02 f203 	mul.w	r2, r2, r3
 8001540:	464b      	mov	r3, r9
 8001542:	4621      	mov	r1, r4
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	4622      	mov	r2, r4
 800154c:	4641      	mov	r1, r8
 800154e:	fba2 1201 	umull	r1, r2, r2, r1
 8001552:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 8001556:	460a      	mov	r2, r1
 8001558:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 800155c:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001560:	4413      	add	r3, r2
 8001562:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8001566:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 800156a:	4622      	mov	r2, r4
 800156c:	462b      	mov	r3, r5
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800157c:	0090      	lsls	r0, r2, #2
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4621      	mov	r1, r4
 8001584:	1851      	adds	r1, r2, r1
 8001586:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 800158a:	4629      	mov	r1, r5
 800158c:	eb43 0101 	adc.w	r1, r3, r1
 8001590:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 8001594:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 80015a0:	f7ff fb02 	bl	8000ba8 <__aeabi_uldivmod>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	f06f 0009 	mvn.w	r0, #9
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	1a80      	subs	r0, r0, r2
 80015b2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80015b6:	eb61 0303 	sbc.w	r3, r1, r3
 80015ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80015be:	4bbd      	ldr	r3, [pc, #756]	@ (80018b4 <Set_Random_Motion_Values+0x454>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015c8:	4413      	add	r3, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	4bb9      	ldr	r3, [pc, #740]	@ (80018b4 <Set_Random_Motion_Values+0x454>)
 80015ce:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  10  + ((uint64_t)rand() * 7  * cnt) / RAND_MAX;
 80015d0:	f009 fe86 	bl	800b2e0 <rand>
 80015d4:	4603      	mov	r3, r0
 80015d6:	17da      	asrs	r2, r3, #31
 80015d8:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80015dc:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 80015e0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015e4:	2200      	movs	r2, #0
 80015e6:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80015ea:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80015ee:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 80015f2:	462b      	mov	r3, r5
 80015f4:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 80015f8:	4642      	mov	r2, r8
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	464b      	mov	r3, r9
 8001600:	4621      	mov	r1, r4
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	4622      	mov	r2, r4
 800160a:	4641      	mov	r1, r8
 800160c:	fba2 1201 	umull	r1, r2, r2, r1
 8001610:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 800161a:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001624:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8001628:	4622      	mov	r2, r4
 800162a:	462b      	mov	r3, r5
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	00d9      	lsls	r1, r3, #3
 8001636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800163a:	00d0      	lsls	r0, r2, #3
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4621      	mov	r1, r4
 8001642:	1a51      	subs	r1, r2, r1
 8001644:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8001648:	4629      	mov	r1, r5
 800164a:	eb63 0301 	sbc.w	r3, r3, r1
 800164e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8001652:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 800165e:	f7ff faa3 	bl	8000ba8 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	f112 010a 	adds.w	r1, r2, #10
 800166a:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800166e:	f143 0300 	adc.w	r3, r3, #0
 8001672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001676:	4b8f      	ldr	r3, [pc, #572]	@ (80018b4 <Set_Random_Motion_Values+0x454>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	461a      	mov	r2, r3
 800167c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001680:	4413      	add	r3, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4b8b      	ldr	r3, [pc, #556]	@ (80018b4 <Set_Random_Motion_Values+0x454>)
 8001686:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  100 + ((uint64_t)rand() * 2  * cnt) / RAND_MAX;
 8001688:	f009 fe2a 	bl	800b2e0 <rand>
 800168c:	4603      	mov	r3, r0
 800168e:	17da      	asrs	r2, r3, #31
 8001690:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001694:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8001698:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800169c:	2200      	movs	r2, #0
 800169e:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80016a2:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 80016a6:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 80016aa:	462b      	mov	r3, r5
 80016ac:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 80016b0:	4642      	mov	r2, r8
 80016b2:	fb02 f203 	mul.w	r2, r2, r3
 80016b6:	464b      	mov	r3, r9
 80016b8:	4621      	mov	r1, r4
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	4622      	mov	r2, r4
 80016c2:	4641      	mov	r1, r8
 80016c4:	fba2 1201 	umull	r1, r2, r2, r1
 80016c8:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 80016cc:	460a      	mov	r2, r1
 80016ce:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 80016d2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80016d6:	4413      	add	r3, r2
 80016d8:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80016dc:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 80016e0:	460b      	mov	r3, r1
 80016e2:	18db      	adds	r3, r3, r3
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80016e6:	4613      	mov	r3, r2
 80016e8:	eb42 0303 	adc.w	r3, r2, r3
 80016ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80016ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016f2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	f7ff fa55 	bl	8000ba8 <__aeabi_uldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001706:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800170a:	f143 0300 	adc.w	r3, r3, #0
 800170e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001712:	4b69      	ldr	r3, [pc, #420]	@ (80018b8 <Set_Random_Motion_Values+0x458>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800171c:	4413      	add	r3, r2
 800171e:	461a      	mov	r2, r3
 8001720:	4b65      	ldr	r3, [pc, #404]	@ (80018b8 <Set_Random_Motion_Values+0x458>)
 8001722:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -100 - ((uint64_t)rand() * 4  * cnt) / RAND_MAX;
 8001724:	f009 fddc 	bl	800b2e0 <rand>
 8001728:	4603      	mov	r3, r0
 800172a:	17da      	asrs	r2, r3, #31
 800172c:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001730:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001734:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001738:	2200      	movs	r2, #0
 800173a:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800173e:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8001742:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 8001746:	462b      	mov	r3, r5
 8001748:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 800174c:	4642      	mov	r2, r8
 800174e:	fb02 f203 	mul.w	r2, r2, r3
 8001752:	464b      	mov	r3, r9
 8001754:	4621      	mov	r1, r4
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	4622      	mov	r2, r4
 800175e:	4641      	mov	r1, r8
 8001760:	fba2 1201 	umull	r1, r2, r2, r1
 8001764:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8001768:	460a      	mov	r2, r1
 800176a:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 800176e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001772:	4413      	add	r3, r2
 8001774:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 8001784:	462b      	mov	r3, r5
 8001786:	0099      	lsls	r1, r3, #2
 8001788:	4623      	mov	r3, r4
 800178a:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800178e:	4623      	mov	r3, r4
 8001790:	0098      	lsls	r0, r3, #2
 8001792:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	f7ff fa05 	bl	8000ba8 <__aeabi_uldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80017a6:	f04f 31ff 	mov.w	r1, #4294967295
 80017aa:	1a80      	subs	r0, r0, r2
 80017ac:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80017b0:	eb61 0303 	sbc.w	r3, r1, r3
 80017b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80017b8:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <Set_Random_Motion_Values+0x458>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	461a      	mov	r2, r3
 80017be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017c2:	4413      	add	r3, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <Set_Random_Motion_Values+0x458>)
 80017c8:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  100 + ((uint64_t)rand() * 6  * cnt) / RAND_MAX;
 80017ca:	f009 fd89 	bl	800b2e0 <rand>
 80017ce:	4603      	mov	r3, r0
 80017d0:	17da      	asrs	r2, r3, #31
 80017d2:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80017d6:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80017da:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80017e4:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80017e8:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 80017ec:	462b      	mov	r3, r5
 80017ee:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 80017f2:	4642      	mov	r2, r8
 80017f4:	fb02 f203 	mul.w	r2, r2, r3
 80017f8:	464b      	mov	r3, r9
 80017fa:	4621      	mov	r1, r4
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	4622      	mov	r2, r4
 8001804:	4641      	mov	r1, r8
 8001806:	fba2 1201 	umull	r1, r2, r2, r1
 800180a:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 800180e:	460a      	mov	r2, r1
 8001810:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 8001814:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001818:	4413      	add	r3, r2
 800181a:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800181e:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8001822:	4622      	mov	r2, r4
 8001824:	462b      	mov	r3, r5
 8001826:	1891      	adds	r1, r2, r2
 8001828:	65b9      	str	r1, [r7, #88]	@ 0x58
 800182a:	415b      	adcs	r3, r3
 800182c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800182e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001832:	4621      	mov	r1, r4
 8001834:	1851      	adds	r1, r2, r1
 8001836:	6539      	str	r1, [r7, #80]	@ 0x50
 8001838:	4629      	mov	r1, r5
 800183a:	eb43 0101 	adc.w	r1, r3, r1
 800183e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001840:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8001844:	460b      	mov	r3, r1
 8001846:	18db      	adds	r3, r3, r3
 8001848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800184a:	4613      	mov	r3, r2
 800184c:	eb42 0303 	adc.w	r3, r2, r3
 8001850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001852:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001856:	4618      	mov	r0, r3
 8001858:	4621      	mov	r1, r4
 800185a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f7ff f9a1 	bl	8000ba8 <__aeabi_uldivmod>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800186e:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001872:	f143 0300 	adc.w	r3, r3, #0
 8001876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <Set_Random_Motion_Values+0x458>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	461a      	mov	r2, r3
 8001880:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001884:	4413      	add	r3, r2
 8001886:	461a      	mov	r2, r3
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <Set_Random_Motion_Values+0x458>)
 800188a:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  3   + ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
 800188c:	f009 fd28 	bl	800b2e0 <rand>
 8001890:	4603      	mov	r3, r0
 8001892:	17da      	asrs	r2, r3, #31
 8001894:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001898:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 800189c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80018a6:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80018aa:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80018ae:	462b      	mov	r3, r5
 80018b0:	e004      	b.n	80018bc <Set_Random_Motion_Values+0x45c>
 80018b2:	bf00      	nop
 80018b4:	200003a4 	.word	0x200003a4
 80018b8:	200003b0 	.word	0x200003b0
 80018bc:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 80018c0:	4642      	mov	r2, r8
 80018c2:	fb02 f203 	mul.w	r2, r2, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	4621      	mov	r1, r4
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	4622      	mov	r2, r4
 80018d2:	4641      	mov	r1, r8
 80018d4:	fba2 1201 	umull	r1, r2, r2, r1
 80018d8:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 80018dc:	460a      	mov	r2, r1
 80018de:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 80018e2:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 80018e6:	4413      	add	r3, r2
 80018e8:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80018ec:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 80018f0:	4622      	mov	r2, r4
 80018f2:	462b      	mov	r3, r5
 80018f4:	1891      	adds	r1, r2, r2
 80018f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80018f8:	415b      	adcs	r3, r3
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80018fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001900:	4621      	mov	r1, r4
 8001902:	1851      	adds	r1, r2, r1
 8001904:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001908:	4629      	mov	r1, r5
 800190a:	eb43 0101 	adc.w	r1, r3, r1
 800190e:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 8001912:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 800191e:	f7ff f943 	bl	8000ba8 <__aeabi_uldivmod>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	1cd1      	adds	r1, r2, #3
 8001928:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800192c:	f143 0300 	adc.w	r3, r3, #0
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001934:	4be1      	ldr	r3, [pc, #900]	@ (8001cbc <Set_Random_Motion_Values+0x85c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4bde      	ldr	r3, [pc, #888]	@ (8001cbc <Set_Random_Motion_Values+0x85c>)
 8001944:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -3   - ((uint64_t)rand() * 4  * cnt) / RAND_MAX;
 8001946:	f009 fccb 	bl	800b2e0 <rand>
 800194a:	4603      	mov	r3, r0
 800194c:	17da      	asrs	r2, r3, #31
 800194e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001952:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8001956:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800195a:	2200      	movs	r2, #0
 800195c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001960:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001964:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8001968:	462b      	mov	r3, r5
 800196a:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 800196e:	4642      	mov	r2, r8
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	464b      	mov	r3, r9
 8001976:	4621      	mov	r1, r4
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	4622      	mov	r2, r4
 8001980:	4641      	mov	r1, r8
 8001982:	fba2 1201 	umull	r1, r2, r2, r1
 8001986:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 800198a:	460a      	mov	r2, r1
 800198c:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 8001990:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8001994:	4413      	add	r3, r2
 8001996:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 80019a6:	462b      	mov	r3, r5
 80019a8:	0099      	lsls	r1, r3, #2
 80019aa:	4623      	mov	r3, r4
 80019ac:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80019b0:	4623      	mov	r3, r4
 80019b2:	0098      	lsls	r0, r3, #2
 80019b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f7ff f8f4 	bl	8000ba8 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	f06f 0002 	mvn.w	r0, #2
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	1a80      	subs	r0, r0, r2
 80019ce:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80019d2:	eb61 0303 	sbc.w	r3, r1, r3
 80019d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019da:	4bb8      	ldr	r3, [pc, #736]	@ (8001cbc <Set_Random_Motion_Values+0x85c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019e4:	4413      	add	r3, r2
 80019e6:	461a      	mov	r2, r3
 80019e8:	4bb4      	ldr	r3, [pc, #720]	@ (8001cbc <Set_Random_Motion_Values+0x85c>)
 80019ea:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  3   + ((uint64_t)rand() * 5  * cnt) / RAND_MAX;
 80019ec:	f009 fc78 	bl	800b2e0 <rand>
 80019f0:	4603      	mov	r3, r0
 80019f2:	17da      	asrs	r2, r3, #31
 80019f4:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80019f8:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80019fc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a00:	2200      	movs	r2, #0
 8001a02:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001a06:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8001a0a:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8001a0e:	462b      	mov	r3, r5
 8001a10:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8001a14:	4642      	mov	r2, r8
 8001a16:	fb02 f203 	mul.w	r2, r2, r3
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	4622      	mov	r2, r4
 8001a26:	4641      	mov	r1, r8
 8001a28:	fba2 1201 	umull	r1, r2, r2, r1
 8001a2c:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8001a30:	460a      	mov	r2, r1
 8001a32:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 8001a36:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001a40:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 8001a44:	4622      	mov	r2, r4
 8001a46:	462b      	mov	r3, r5
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0099      	lsls	r1, r3, #2
 8001a52:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001a56:	0090      	lsls	r0, r2, #2
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	1851      	adds	r1, r2, r1
 8001a60:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8001a64:	4629      	mov	r1, r5
 8001a66:	eb43 0101 	adc.w	r1, r3, r1
 8001a6a:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8001a6e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8001a7a:	f7ff f895 	bl	8000ba8 <__aeabi_uldivmod>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	1cd1      	adds	r1, r2, #3
 8001a84:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001a88:	f143 0300 	adc.w	r3, r3, #0
 8001a8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001a90:	4b8a      	ldr	r3, [pc, #552]	@ (8001cbc <Set_Random_Motion_Values+0x85c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a9a:	4413      	add	r3, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b87      	ldr	r3, [pc, #540]	@ (8001cbc <Set_Random_Motion_Values+0x85c>)
 8001aa0:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X -= 100 + ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
 8001aa2:	f009 fc1d 	bl	800b2e0 <rand>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	17da      	asrs	r2, r3, #31
 8001aaa:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001aae:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001ab2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8001abc:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001ac0:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8001ac4:	462b      	mov	r3, r5
 8001ac6:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 8001aca:	4642      	mov	r2, r8
 8001acc:	fb02 f203 	mul.w	r2, r2, r3
 8001ad0:	464b      	mov	r3, r9
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	4622      	mov	r2, r4
 8001adc:	4641      	mov	r1, r8
 8001ade:	fba2 1201 	umull	r1, r2, r2, r1
 8001ae2:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001aec:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001af0:	4413      	add	r3, r2
 8001af2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001af6:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8001afa:	4622      	mov	r2, r4
 8001afc:	462b      	mov	r3, r5
 8001afe:	1891      	adds	r1, r2, r2
 8001b00:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b02:	415b      	adcs	r3, r3
 8001b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	1851      	adds	r1, r2, r1
 8001b0e:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8001b12:	4629      	mov	r1, r5
 8001b14:	eb43 0101 	adc.w	r1, r3, r1
 8001b18:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001b1c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001b28:	f7ff f83e 	bl	8000ba8 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001b34:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001b38:	f143 0300 	adc.w	r3, r3, #0
 8001b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001b40:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <Set_Random_Motion_Values+0x860>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc0 <Set_Random_Motion_Values+0x860>)
 8001b50:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += 100 + ((uint64_t)rand() * 5  * cnt) / RAND_MAX;
 8001b52:	f009 fbc5 	bl	800b2e0 <rand>
 8001b56:	4603      	mov	r3, r0
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001b5e:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001b62:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001b6c:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001b70:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001b74:	462b      	mov	r3, r5
 8001b76:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	fb02 f203 	mul.w	r2, r2, r3
 8001b80:	464b      	mov	r3, r9
 8001b82:	4621      	mov	r1, r4
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	fba2 1201 	umull	r1, r2, r2, r1
 8001b92:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8001b96:	460a      	mov	r2, r1
 8001b98:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001b9c:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001ba6:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 8001baa:	4622      	mov	r2, r4
 8001bac:	462b      	mov	r3, r5
 8001bae:	f04f 0000 	mov.w	r0, #0
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	0099      	lsls	r1, r3, #2
 8001bb8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bbc:	0090      	lsls	r0, r2, #2
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	1851      	adds	r1, r2, r1
 8001bc6:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001bca:	4629      	mov	r1, r5
 8001bcc:	eb43 0101 	adc.w	r1, r3, r1
 8001bd0:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 8001bd4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8001be0:	f7fe ffe2 	bl	8000ba8 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001bec:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001bee:	f143 0300 	adc.w	r3, r3, #0
 8001bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <Set_Random_Motion_Values+0x860>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bfc:	4413      	add	r3, r2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <Set_Random_Motion_Values+0x860>)
 8001c02:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= 100 + ((uint64_t)rand() * 7  * cnt) / RAND_MAX;
 8001c04:	f009 fb6c 	bl	800b2e0 <rand>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	17da      	asrs	r2, r3, #31
 8001c0c:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001c10:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001c14:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001c1e:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001c22:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001c26:	462b      	mov	r3, r5
 8001c28:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001c2c:	4642      	mov	r2, r8
 8001c2e:	fb02 f203 	mul.w	r2, r2, r3
 8001c32:	464b      	mov	r3, r9
 8001c34:	4621      	mov	r1, r4
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	4641      	mov	r1, r8
 8001c40:	fba2 1201 	umull	r1, r2, r2, r1
 8001c44:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001c48:	460a      	mov	r2, r1
 8001c4a:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001c4e:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001c52:	4413      	add	r3, r2
 8001c54:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001c58:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001c5c:	4622      	mov	r2, r4
 8001c5e:	462b      	mov	r3, r5
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	00d9      	lsls	r1, r3, #3
 8001c6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c6e:	00d0      	lsls	r0, r2, #3
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4621      	mov	r1, r4
 8001c76:	1a51      	subs	r1, r2, r1
 8001c78:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c82:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001c86:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001c92:	f7fe ff89 	bl	8000ba8 <__aeabi_uldivmod>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001c9e:	6739      	str	r1, [r7, #112]	@ 0x70
 8001ca0:	f143 0300 	adc.w	r3, r3, #0
 8001ca4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <Set_Random_Motion_Values+0x860>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	461a      	mov	r2, r3
 8001cac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <Set_Random_Motion_Values+0x860>)
 8001cb4:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_Z += -3   - ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
    q_axes.AXIS_X += 200 + ((uint64_t)rand() * 7  * cnt) / RAND_MAX;
    q_axes.AXIS_Y -= 150 + ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
    q_axes.AXIS_Z += 10  + ((uint64_t)rand() * 5  * cnt) / RAND_MAX;
  }
}
 8001cb6:	f000 bc37 	b.w	8002528 <Set_Random_Motion_Values+0x10c8>
 8001cba:	bf00      	nop
 8001cbc:	200003bc 	.word	0x200003bc
 8001cc0:	200003c8 	.word	0x200003c8
    x_axes.AXIS_X += -10  - ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
 8001cc4:	f009 fb0c 	bl	800b2e0 <rand>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	17da      	asrs	r2, r3, #31
 8001ccc:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001cd0:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001cd4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	469a      	mov	sl, r3
 8001cdc:	4693      	mov	fp, r2
 8001cde:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	fb0a f203 	mul.w	r2, sl, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	fb03 f30b 	mul.w	r3, r3, fp
 8001cee:	4413      	add	r3, r2
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	fba2 450a 	umull	r4, r5, r2, sl
 8001cf6:	442b      	add	r3, r5
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	1891      	adds	r1, r2, r2
 8001d00:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d02:	415b      	adcs	r3, r3
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d0a:	1911      	adds	r1, r2, r4
 8001d0c:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001d10:	416b      	adcs	r3, r5
 8001d12:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001d16:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001d22:	f7fe ff41 	bl	8000ba8 <__aeabi_uldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	f06f 0009 	mvn.w	r0, #9
 8001d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d32:	1a80      	subs	r0, r0, r2
 8001d34:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001d38:	eb61 0303 	sbc.w	r3, r1, r3
 8001d3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001d40:	4beb      	ldr	r3, [pc, #940]	@ (80020f0 <Set_Random_Motion_Values+0xc90>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4be8      	ldr	r3, [pc, #928]	@ (80020f0 <Set_Random_Motion_Values+0xc90>)
 8001d50:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  10  + ((uint64_t)rand() * 5  * cnt) / RAND_MAX;
 8001d52:	f009 fac5 	bl	800b2e0 <rand>
 8001d56:	4603      	mov	r3, r0
 8001d58:	17da      	asrs	r2, r3, #31
 8001d5a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001d5e:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001d62:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001d6c:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001d70:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001d74:	462b      	mov	r3, r5
 8001d76:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001d7a:	4642      	mov	r2, r8
 8001d7c:	fb02 f203 	mul.w	r2, r2, r3
 8001d80:	464b      	mov	r3, r9
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d92:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8001d96:	460a      	mov	r2, r1
 8001d98:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001d9c:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001da0:	4413      	add	r3, r2
 8001da2:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001da6:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001daa:	4622      	mov	r2, r4
 8001dac:	462b      	mov	r3, r5
 8001dae:	f04f 0000 	mov.w	r0, #0
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001dbc:	0090      	lsls	r0, r2, #2
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	1851      	adds	r1, r2, r1
 8001dc6:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001dca:	4629      	mov	r1, r5
 8001dcc:	eb43 0101 	adc.w	r1, r3, r1
 8001dd0:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001dd4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001de0:	f7fe fee2 	bl	8000ba8 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	f112 010a 	adds.w	r1, r2, #10
 8001dec:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001df0:	f143 0300 	adc.w	r3, r3, #0
 8001df4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001df8:	4bbd      	ldr	r3, [pc, #756]	@ (80020f0 <Set_Random_Motion_Values+0xc90>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e02:	4413      	add	r3, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4bba      	ldr	r3, [pc, #744]	@ (80020f0 <Set_Random_Motion_Values+0xc90>)
 8001e08:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -10  - ((uint64_t)rand() * 7  * cnt) / RAND_MAX;
 8001e0a:	f009 fa69 	bl	800b2e0 <rand>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	17da      	asrs	r2, r3, #31
 8001e12:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001e16:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001e1a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001e24:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001e28:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001e32:	4642      	mov	r2, r8
 8001e34:	fb02 f203 	mul.w	r2, r2, r3
 8001e38:	464b      	mov	r3, r9
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	4622      	mov	r2, r4
 8001e44:	4641      	mov	r1, r8
 8001e46:	fba2 1201 	umull	r1, r2, r2, r1
 8001e4a:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001e4e:	460a      	mov	r2, r1
 8001e50:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001e54:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001e5e:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001e62:	4622      	mov	r2, r4
 8001e64:	462b      	mov	r3, r5
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	00d9      	lsls	r1, r3, #3
 8001e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e74:	00d0      	lsls	r0, r2, #3
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	1a51      	subs	r1, r2, r1
 8001e7e:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001e82:	4629      	mov	r1, r5
 8001e84:	eb63 0301 	sbc.w	r3, r3, r1
 8001e88:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001e8c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001e98:	f7fe fe86 	bl	8000ba8 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	f06f 0009 	mvn.w	r0, #9
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	1a80      	subs	r0, r0, r2
 8001eaa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001eae:	eb61 0303 	sbc.w	r3, r1, r3
 8001eb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80020f0 <Set_Random_Motion_Values+0xc90>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ec0:	4413      	add	r3, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80020f0 <Set_Random_Motion_Values+0xc90>)
 8001ec6:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -100 - ((uint64_t)rand() * 2  * cnt) / RAND_MAX;
 8001ec8:	f009 fa0a 	bl	800b2e0 <rand>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	17da      	asrs	r2, r3, #31
 8001ed0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001ed4:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001ed8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001edc:	2200      	movs	r2, #0
 8001ede:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ee2:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001ee6:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001eea:	462b      	mov	r3, r5
 8001eec:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	fb02 f203 	mul.w	r2, r2, r3
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	4621      	mov	r1, r4
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	4622      	mov	r2, r4
 8001f02:	4641      	mov	r1, r8
 8001f04:	fba2 1201 	umull	r1, r2, r2, r1
 8001f08:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001f12:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001f16:	4413      	add	r3, r2
 8001f18:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001f1c:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001f20:	460b      	mov	r3, r1
 8001f22:	18db      	adds	r3, r3, r3
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f26:	4613      	mov	r3, r2
 8001f28:	eb42 0303 	adc.w	r3, r2, r3
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f32:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	f7fe fe35 	bl	8000ba8 <__aeabi_uldivmod>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001f46:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4a:	1a80      	subs	r0, r0, r2
 8001f4c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001f50:	eb61 0303 	sbc.w	r3, r1, r3
 8001f54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001f58:	4b66      	ldr	r3, [pc, #408]	@ (80020f4 <Set_Random_Motion_Values+0xc94>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f62:	4413      	add	r3, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b63      	ldr	r3, [pc, #396]	@ (80020f4 <Set_Random_Motion_Values+0xc94>)
 8001f68:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  100 + ((uint64_t)rand() * 4  * cnt) / RAND_MAX;
 8001f6a:	f009 f9b9 	bl	800b2e0 <rand>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	17da      	asrs	r2, r3, #31
 8001f72:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001f76:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001f7a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001f84:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001f88:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001f8c:	462b      	mov	r3, r5
 8001f8e:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001f92:	4642      	mov	r2, r8
 8001f94:	fb02 f203 	mul.w	r2, r2, r3
 8001f98:	464b      	mov	r3, r9
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	fba2 1201 	umull	r1, r2, r2, r1
 8001faa:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001fae:	460a      	mov	r2, r1
 8001fb0:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001fb4:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001fb8:	4413      	add	r3, r2
 8001fba:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001fca:	462b      	mov	r3, r5
 8001fcc:	0099      	lsls	r1, r3, #2
 8001fce:	4623      	mov	r3, r4
 8001fd0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	0098      	lsls	r0, r3, #2
 8001fd8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f7fe fde2 	bl	8000ba8 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001fec:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001ff0:	f143 0300 	adc.w	r3, r3, #0
 8001ff4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80020f4 <Set_Random_Motion_Values+0xc94>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002002:	4413      	add	r3, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4b3b      	ldr	r3, [pc, #236]	@ (80020f4 <Set_Random_Motion_Values+0xc94>)
 8002008:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -100 - ((uint64_t)rand() * 6  * cnt) / RAND_MAX;
 800200a:	f009 f969 	bl	800b2e0 <rand>
 800200e:	4603      	mov	r3, r0
 8002010:	17da      	asrs	r2, r3, #31
 8002012:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002016:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800201a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800201e:	2200      	movs	r2, #0
 8002020:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002024:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8002028:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 800202c:	462b      	mov	r3, r5
 800202e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8002032:	4642      	mov	r2, r8
 8002034:	fb02 f203 	mul.w	r2, r2, r3
 8002038:	464b      	mov	r3, r9
 800203a:	4621      	mov	r1, r4
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	4622      	mov	r2, r4
 8002044:	4641      	mov	r1, r8
 8002046:	fba2 1201 	umull	r1, r2, r2, r1
 800204a:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 800204e:	460a      	mov	r2, r1
 8002050:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8002054:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8002058:	4413      	add	r3, r2
 800205a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800205e:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	1891      	adds	r1, r2, r2
 8002068:	6239      	str	r1, [r7, #32]
 800206a:	415b      	adcs	r3, r3
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
 800206e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002072:	4621      	mov	r1, r4
 8002074:	1851      	adds	r1, r2, r1
 8002076:	61b9      	str	r1, [r7, #24]
 8002078:	4629      	mov	r1, r5
 800207a:	eb43 0101 	adc.w	r1, r3, r1
 800207e:	61f9      	str	r1, [r7, #28]
 8002080:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002084:	460b      	mov	r3, r1
 8002086:	18db      	adds	r3, r3, r3
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4613      	mov	r3, r2
 800208c:	eb42 0303 	adc.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002096:	4618      	mov	r0, r3
 8002098:	4621      	mov	r1, r4
 800209a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f7fe fd81 	bl	8000ba8 <__aeabi_uldivmod>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80020ae:	f04f 31ff 	mov.w	r1, #4294967295
 80020b2:	1a80      	subs	r0, r0, r2
 80020b4:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 80020b8:	eb61 0303 	sbc.w	r3, r1, r3
 80020bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <Set_Random_Motion_Values+0xc94>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80020ca:	4413      	add	r3, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <Set_Random_Motion_Values+0xc94>)
 80020d0:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -3   - ((uint64_t)rand() * 7  * cnt) / RAND_MAX;
 80020d2:	f009 f905 	bl	800b2e0 <rand>
 80020d6:	4603      	mov	r3, r0
 80020d8:	17da      	asrs	r2, r3, #31
 80020da:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80020de:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80020e2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80020e6:	2200      	movs	r2, #0
 80020e8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80020ec:	e004      	b.n	80020f8 <Set_Random_Motion_Values+0xc98>
 80020ee:	bf00      	nop
 80020f0:	200003a4 	.word	0x200003a4
 80020f4:	200003b0 	.word	0x200003b0
 80020f8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80020fc:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8002100:	462b      	mov	r3, r5
 8002102:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8002106:	4642      	mov	r2, r8
 8002108:	fb02 f203 	mul.w	r2, r2, r3
 800210c:	464b      	mov	r3, r9
 800210e:	4621      	mov	r1, r4
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	4622      	mov	r2, r4
 8002118:	4641      	mov	r1, r8
 800211a:	fba2 1201 	umull	r1, r2, r2, r1
 800211e:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8002122:	460a      	mov	r2, r1
 8002124:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8002128:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 800212c:	4413      	add	r3, r2
 800212e:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8002132:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	00d9      	lsls	r1, r3, #3
 8002144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002148:	00d0      	lsls	r0, r2, #3
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4621      	mov	r1, r4
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8002156:	4629      	mov	r1, r5
 8002158:	eb63 0301 	sbc.w	r3, r3, r1
 800215c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8002160:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800216c:	f7fe fd1c 	bl	8000ba8 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	f06f 0002 	mvn.w	r0, #2
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	1a80      	subs	r0, r0, r2
 800217e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8002182:	eb61 0303 	sbc.w	r3, r1, r3
 8002186:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800218a:	4bea      	ldr	r3, [pc, #936]	@ (8002534 <Set_Random_Motion_Values+0x10d4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002194:	4413      	add	r3, r2
 8002196:	461a      	mov	r2, r3
 8002198:	4be6      	ldr	r3, [pc, #920]	@ (8002534 <Set_Random_Motion_Values+0x10d4>)
 800219a:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  3   + ((uint64_t)rand() * 9  * cnt) / RAND_MAX;
 800219c:	f009 f8a0 	bl	800b2e0 <rand>
 80021a0:	4603      	mov	r3, r0
 80021a2:	17da      	asrs	r2, r3, #31
 80021a4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80021a8:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 80021ac:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021b0:	2200      	movs	r2, #0
 80021b2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80021b6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80021ba:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 80021be:	462b      	mov	r3, r5
 80021c0:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 80021c4:	4642      	mov	r2, r8
 80021c6:	fb02 f203 	mul.w	r2, r2, r3
 80021ca:	464b      	mov	r3, r9
 80021cc:	4621      	mov	r1, r4
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	4622      	mov	r2, r4
 80021d6:	4641      	mov	r1, r8
 80021d8:	fba2 1201 	umull	r1, r2, r2, r1
 80021dc:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 80021e0:	460a      	mov	r2, r1
 80021e2:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 80021e6:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80021ea:	4413      	add	r3, r2
 80021ec:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80021f0:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 80021f4:	4622      	mov	r2, r4
 80021f6:	462b      	mov	r3, r5
 80021f8:	f04f 0000 	mov.w	r0, #0
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	00d9      	lsls	r1, r3, #3
 8002202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002206:	00d0      	lsls	r0, r2, #3
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4621      	mov	r1, r4
 800220e:	1851      	adds	r1, r2, r1
 8002210:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8002214:	4629      	mov	r1, r5
 8002216:	eb43 0101 	adc.w	r1, r3, r1
 800221a:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 800221e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800222a:	f7fe fcbd 	bl	8000ba8 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	1cd1      	adds	r1, r2, #3
 8002234:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8002238:	f143 0300 	adc.w	r3, r3, #0
 800223c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002240:	4bbc      	ldr	r3, [pc, #752]	@ (8002534 <Set_Random_Motion_Values+0x10d4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	461a      	mov	r2, r3
 8002246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800224a:	4413      	add	r3, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4bb9      	ldr	r3, [pc, #740]	@ (8002534 <Set_Random_Motion_Values+0x10d4>)
 8002250:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -3   - ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
 8002252:	f009 f845 	bl	800b2e0 <rand>
 8002256:	4603      	mov	r3, r0
 8002258:	17da      	asrs	r2, r3, #31
 800225a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800225e:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8002262:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002266:	2200      	movs	r2, #0
 8002268:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800226c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002270:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8002274:	462b      	mov	r3, r5
 8002276:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 800227a:	4642      	mov	r2, r8
 800227c:	fb02 f203 	mul.w	r2, r2, r3
 8002280:	464b      	mov	r3, r9
 8002282:	4621      	mov	r1, r4
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	4622      	mov	r2, r4
 800228c:	4641      	mov	r1, r8
 800228e:	fba2 1201 	umull	r1, r2, r2, r1
 8002292:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8002296:	460a      	mov	r2, r1
 8002298:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 800229c:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 80022a0:	4413      	add	r3, r2
 80022a2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 80022a6:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	1891      	adds	r1, r2, r2
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	415b      	adcs	r3, r3
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ba:	4621      	mov	r1, r4
 80022bc:	1851      	adds	r1, r2, r1
 80022be:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 80022c2:	4629      	mov	r1, r5
 80022c4:	eb43 0101 	adc.w	r1, r3, r1
 80022c8:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 80022cc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 80022d8:	f7fe fc66 	bl	8000ba8 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	f06f 0002 	mvn.w	r0, #2
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	1a80      	subs	r0, r0, r2
 80022ea:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 80022ee:	eb61 0303 	sbc.w	r3, r1, r3
 80022f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80022f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <Set_Random_Motion_Values+0x10d4>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002300:	4413      	add	r3, r2
 8002302:	461a      	mov	r2, r3
 8002304:	4b8b      	ldr	r3, [pc, #556]	@ (8002534 <Set_Random_Motion_Values+0x10d4>)
 8002306:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += 200 + ((uint64_t)rand() * 7  * cnt) / RAND_MAX;
 8002308:	f008 ffea 	bl	800b2e0 <rand>
 800230c:	4603      	mov	r3, r0
 800230e:	17da      	asrs	r2, r3, #31
 8002310:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002314:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8002318:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002322:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002326:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800232a:	462b      	mov	r3, r5
 800232c:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 8002330:	4642      	mov	r2, r8
 8002332:	fb02 f203 	mul.w	r2, r2, r3
 8002336:	464b      	mov	r3, r9
 8002338:	4621      	mov	r1, r4
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	4622      	mov	r2, r4
 8002342:	4641      	mov	r1, r8
 8002344:	fba2 1201 	umull	r1, r2, r2, r1
 8002348:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 800234c:	460a      	mov	r2, r1
 800234e:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8002352:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8002356:	4413      	add	r3, r2
 8002358:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800235c:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8002360:	4622      	mov	r2, r4
 8002362:	462b      	mov	r3, r5
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	00d9      	lsls	r1, r3, #3
 800236e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002372:	00d0      	lsls	r0, r2, #3
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4621      	mov	r1, r4
 800237a:	1a51      	subs	r1, r2, r1
 800237c:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8002380:	4629      	mov	r1, r5
 8002382:	eb63 0301 	sbc.w	r3, r3, r1
 8002386:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800238a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8002396:	f7fe fc07 	bl	8000ba8 <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 80023a2:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80023a6:	f143 0300 	adc.w	r3, r3, #0
 80023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023ae:	4b62      	ldr	r3, [pc, #392]	@ (8002538 <Set_Random_Motion_Values+0x10d8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b8:	4413      	add	r3, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002538 <Set_Random_Motion_Values+0x10d8>)
 80023be:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= 150 + ((uint64_t)rand() * 3  * cnt) / RAND_MAX;
 80023c0:	f008 ff8e 	bl	800b2e0 <rand>
 80023c4:	4603      	mov	r3, r0
 80023c6:	17da      	asrs	r2, r3, #31
 80023c8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80023cc:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80023d0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80023da:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80023de:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80023e2:	462b      	mov	r3, r5
 80023e4:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 80023e8:	4642      	mov	r2, r8
 80023ea:	fb02 f203 	mul.w	r2, r2, r3
 80023ee:	464b      	mov	r3, r9
 80023f0:	4621      	mov	r1, r4
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	4622      	mov	r2, r4
 80023fa:	4641      	mov	r1, r8
 80023fc:	fba2 1201 	umull	r1, r2, r2, r1
 8002400:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8002404:	460a      	mov	r2, r1
 8002406:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 800240a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 800240e:	4413      	add	r3, r2
 8002410:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002414:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8002418:	4622      	mov	r2, r4
 800241a:	462b      	mov	r3, r5
 800241c:	1891      	adds	r1, r2, r2
 800241e:	6039      	str	r1, [r7, #0]
 8002420:	415b      	adcs	r3, r3
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002428:	4621      	mov	r1, r4
 800242a:	1851      	adds	r1, r2, r1
 800242c:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8002430:	4629      	mov	r1, r5
 8002432:	eb43 0101 	adc.w	r1, r3, r1
 8002436:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 800243a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8002446:	f7fe fbaf 	bl	8000ba8 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8002452:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8002456:	f143 0300 	adc.w	r3, r3, #0
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800245e:	4b36      	ldr	r3, [pc, #216]	@ (8002538 <Set_Random_Motion_Values+0x10d8>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	461a      	mov	r2, r3
 800246c:	4b32      	ldr	r3, [pc, #200]	@ (8002538 <Set_Random_Motion_Values+0x10d8>)
 800246e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += 10  + ((uint64_t)rand() * 5  * cnt) / RAND_MAX;
 8002470:	f008 ff36 	bl	800b2e0 <rand>
 8002474:	4603      	mov	r3, r0
 8002476:	17da      	asrs	r2, r3, #31
 8002478:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800247c:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8002480:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002484:	2200      	movs	r2, #0
 8002486:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800248a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800248e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8002492:	462b      	mov	r3, r5
 8002494:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8002498:	4642      	mov	r2, r8
 800249a:	fb02 f203 	mul.w	r2, r2, r3
 800249e:	464b      	mov	r3, r9
 80024a0:	4621      	mov	r1, r4
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	4622      	mov	r2, r4
 80024aa:	4641      	mov	r1, r8
 80024ac:	fba2 1201 	umull	r1, r2, r2, r1
 80024b0:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 80024b4:	460a      	mov	r2, r1
 80024b6:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 80024ba:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80024be:	4413      	add	r3, r2
 80024c0:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80024c4:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 80024c8:	4622      	mov	r2, r4
 80024ca:	462b      	mov	r3, r5
 80024cc:	f04f 0000 	mov.w	r0, #0
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	0099      	lsls	r1, r3, #2
 80024d6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024da:	0090      	lsls	r0, r2, #2
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4621      	mov	r1, r4
 80024e2:	1851      	adds	r1, r2, r1
 80024e4:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb43 0101 	adc.w	r1, r3, r1
 80024ee:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80024f2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80024fe:	f7fe fb53 	bl	8000ba8 <__aeabi_uldivmod>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	f112 010a 	adds.w	r1, r2, #10
 800250a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800250e:	f143 0300 	adc.w	r3, r3, #0
 8002512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <Set_Random_Motion_Values+0x10d8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	461a      	mov	r2, r3
 800251c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002520:	4413      	add	r3, r2
 8002522:	461a      	mov	r2, r3
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <Set_Random_Motion_Values+0x10d8>)
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 800252e:	46bd      	mov	sp, r7
 8002530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002534:	200003bc 	.word	0x200003bc
 8002538:	200003c8 	.word	0x200003c8

0800253c <Reset_Motion_Values>:

/* Réinitialisation des valeurs de mouvement */
static void Reset_Motion_Values(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X % 2000 == 0) ? -x_axes.AXIS_X : 10;
 8002540:	4b6e      	ldr	r3, [pc, #440]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b6e      	ldr	r3, [pc, #440]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 8002546:	fb83 1302 	smull	r1, r3, r3, r2
 800254a:	11d9      	asrs	r1, r3, #7
 800254c:	17d3      	asrs	r3, r2, #31
 800254e:	1acb      	subs	r3, r1, r3
 8002550:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <Reset_Motion_Values+0x2a>
 800255e:	4b67      	ldr	r3, [pc, #412]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	425b      	negs	r3, r3
 8002564:	e000      	b.n	8002568 <Reset_Motion_Values+0x2c>
 8002566:	230a      	movs	r3, #10
 8002568:	4a64      	ldr	r2, [pc, #400]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 800256a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y % 2000 == 0) ? -x_axes.AXIS_Y : -10;
 800256c:	4b63      	ldr	r3, [pc, #396]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4b63      	ldr	r3, [pc, #396]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 8002572:	fb83 1302 	smull	r1, r3, r3, r2
 8002576:	11d9      	asrs	r1, r3, #7
 8002578:	17d3      	asrs	r3, r2, #31
 800257a:	1acb      	subs	r3, r1, r3
 800257c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <Reset_Motion_Values+0x56>
 800258a:	4b5c      	ldr	r3, [pc, #368]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	425b      	negs	r3, r3
 8002590:	e001      	b.n	8002596 <Reset_Motion_Values+0x5a>
 8002592:	f06f 0309 	mvn.w	r3, #9
 8002596:	4a59      	ldr	r2, [pc, #356]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 8002598:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z % 2000 == 0) ? -x_axes.AXIS_Z : 10;
 800259a:	4b58      	ldr	r3, [pc, #352]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4b58      	ldr	r3, [pc, #352]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 80025a0:	fb83 1302 	smull	r1, r3, r3, r2
 80025a4:	11d9      	asrs	r1, r3, #7
 80025a6:	17d3      	asrs	r3, r2, #31
 80025a8:	1acb      	subs	r3, r1, r3
 80025aa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <Reset_Motion_Values+0x84>
 80025b8:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	425b      	negs	r3, r3
 80025be:	e000      	b.n	80025c2 <Reset_Motion_Values+0x86>
 80025c0:	230a      	movs	r3, #10
 80025c2:	4a4e      	ldr	r2, [pc, #312]	@ (80026fc <Reset_Motion_Values+0x1c0>)
 80025c4:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X % 2000 == 0) ? -g_axes.AXIS_X : 100;
 80025c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 80025cc:	fb83 1302 	smull	r1, r3, r3, r2
 80025d0:	11d9      	asrs	r1, r3, #7
 80025d2:	17d3      	asrs	r3, r2, #31
 80025d4:	1acb      	subs	r3, r1, r3
 80025d6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <Reset_Motion_Values+0xb0>
 80025e4:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	425b      	negs	r3, r3
 80025ea:	e000      	b.n	80025ee <Reset_Motion_Values+0xb2>
 80025ec:	2364      	movs	r3, #100	@ 0x64
 80025ee:	4a45      	ldr	r2, [pc, #276]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 80025f0:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y % 2000 == 0) ? -g_axes.AXIS_Y : -100;
 80025f2:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4b42      	ldr	r3, [pc, #264]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 80025f8:	fb83 1302 	smull	r1, r3, r3, r2
 80025fc:	11d9      	asrs	r1, r3, #7
 80025fe:	17d3      	asrs	r3, r2, #31
 8002600:	1acb      	subs	r3, r1, r3
 8002602:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <Reset_Motion_Values+0xdc>
 8002610:	4b3c      	ldr	r3, [pc, #240]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	425b      	negs	r3, r3
 8002616:	e001      	b.n	800261c <Reset_Motion_Values+0xe0>
 8002618:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800261c:	4a39      	ldr	r2, [pc, #228]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 800261e:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z % 2000 == 0) ? -g_axes.AXIS_Z : 100;
 8002620:	4b38      	ldr	r3, [pc, #224]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 8002626:	fb83 1302 	smull	r1, r3, r3, r2
 800262a:	11d9      	asrs	r1, r3, #7
 800262c:	17d3      	asrs	r3, r2, #31
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <Reset_Motion_Values+0x10a>
 800263e:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	425b      	negs	r3, r3
 8002644:	e000      	b.n	8002648 <Reset_Motion_Values+0x10c>
 8002646:	2364      	movs	r3, #100	@ 0x64
 8002648:	4a2e      	ldr	r2, [pc, #184]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 800264a:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X % 2000 == 0) ? -m_axes.AXIS_X : 3;
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b2b      	ldr	r3, [pc, #172]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 8002652:	fb83 1302 	smull	r1, r3, r3, r2
 8002656:	11d9      	asrs	r1, r3, #7
 8002658:	17d3      	asrs	r3, r2, #31
 800265a:	1acb      	subs	r3, r1, r3
 800265c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <Reset_Motion_Values+0x136>
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <Reset_Motion_Values+0x1cc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	425b      	negs	r3, r3
 8002670:	e000      	b.n	8002674 <Reset_Motion_Values+0x138>
 8002672:	2303      	movs	r3, #3
 8002674:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <Reset_Motion_Values+0x1cc>)
 8002676:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y % 2000 == 0) ? -m_axes.AXIS_Y : -3;
 8002678:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 800267e:	fb83 1302 	smull	r1, r3, r3, r2
 8002682:	11d9      	asrs	r1, r3, #7
 8002684:	17d3      	asrs	r3, r2, #31
 8002686:	1acb      	subs	r3, r1, r3
 8002688:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <Reset_Motion_Values+0x162>
 8002696:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <Reset_Motion_Values+0x1cc>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	425b      	negs	r3, r3
 800269c:	e001      	b.n	80026a2 <Reset_Motion_Values+0x166>
 800269e:	f06f 0302 	mvn.w	r3, #2
 80026a2:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <Reset_Motion_Values+0x1cc>)
 80026a4:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z % 2000 == 0) ? -m_axes.AXIS_Z : 3;
 80026a6:	4b17      	ldr	r3, [pc, #92]	@ (8002704 <Reset_Motion_Values+0x1c8>)
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <Reset_Motion_Values+0x1c4>)
 80026ac:	fb83 1302 	smull	r1, r3, r3, r2
 80026b0:	11d9      	asrs	r1, r3, #7
 80026b2:	17d3      	asrs	r3, r2, #31
 80026b4:	1acb      	subs	r3, r1, r3
 80026b6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <Reset_Motion_Values+0x190>
 80026c4:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <Reset_Motion_Values+0x1cc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	425b      	negs	r3, r3
 80026ca:	e000      	b.n	80026ce <Reset_Motion_Values+0x192>
 80026cc:	2303      	movs	r3, #3
 80026ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002708 <Reset_Motion_Values+0x1cc>)
 80026d0:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <Reset_Motion_Values+0x1d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	425b      	negs	r3, r3
 80026d8:	4a0c      	ldr	r2, [pc, #48]	@ (800270c <Reset_Motion_Values+0x1d0>)
 80026da:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <Reset_Motion_Values+0x1d0>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	425b      	negs	r3, r3
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <Reset_Motion_Values+0x1d0>)
 80026e4:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <Reset_Motion_Values+0x1d0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	425b      	negs	r3, r3
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <Reset_Motion_Values+0x1d0>)
 80026ee:	6093      	str	r3, [r2, #8]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200003a4 	.word	0x200003a4
 8002700:	10624dd3 	.word	0x10624dd3
 8002704:	200003b0 	.word	0x200003b0
 8002708:	200003bc 	.word	0x200003bc
 800270c:	200003c8 	.word	0x200003c8

08002710 <getBlueNRGVersion>:

/* Récupération des versions matérielle et firmware */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b089      	sub	sp, #36	@ 0x24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800271a:	f107 0410 	add.w	r4, r7, #16
 800271e:	f107 0215 	add.w	r2, r7, #21
 8002722:	f107 0112 	add.w	r1, r7, #18
 8002726:	f107 0016 	add.w	r0, r7, #22
 800272a:	f107 030e 	add.w	r3, r7, #14
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4623      	mov	r3, r4
 8002732:	f008 f972 	bl	800aa1a <hci_read_local_version_information>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]
                                               &manufacturer_name, &lmp_pal_subversion);
  if (status == BLE_STATUS_SUCCESS)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11b      	bne.n	8002778 <getBlueNRGVersion+0x68>
  {
    *hwVersion = hci_revision >> 8;
 8002740:	8a7b      	ldrh	r3, [r7, #18]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	701a      	strb	r2, [r3, #0]
    *fwVersion = ((hci_revision & 0xFF) << 8) | (((lmp_pal_subversion >> 4) & 0xF) << 4) | (lmp_pal_subversion & 0xF);
 800274c:	8a7b      	ldrh	r3, [r7, #18]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	b21a      	sxth	r2, r3
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	b29b      	uxth	r3, r3
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	b21b      	sxth	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	b21b      	sxth	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b21a      	sxth	r2, r3
 8002764:	89fb      	ldrh	r3, [r7, #14]
 8002766:	b21b      	sxth	r3, r3
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	b21b      	sxth	r3, r3
 800276e:	4313      	orrs	r3, r2
 8002770:	b21b      	sxth	r3, r3
 8002772:	b29a      	uxth	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8002778:	7dfb      	ldrb	r3, [r7, #23]
}
 800277a:	4618      	mov	r0, r3
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
	...

08002784 <BSP_PB_Callback>:

/* Callback pour le bouton poussoir */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  user_button_pressed = 1;
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <BSP_PB_Callback+0x1c>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	2000020e 	.word	0x2000020e

080027a4 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4604      	mov	r4, r0
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	4603      	mov	r3, r0
 80027b8:	80bb      	strh	r3, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	71bb      	strb	r3, [r7, #6]
 80027be:	4613      	mov	r3, r2
 80027c0:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <hci_le_connection_complete_event+0x38>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  connection_handle = Connection_Handle;
 80027c8:	4a05      	ldr	r2, [pc, #20]	@ (80027e0 <hci_le_connection_complete_event+0x3c>)
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	8013      	strh	r3, [r2, #0]
  BSP_LED_Off(LED2);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f001 fa6a 	bl	8003ca8 <BSP_LED_Off>
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	200003a0 	.word	0x200003a0
 80027e0:	2000039c 	.word	0x2000039c

080027e4 <hci_disconnection_complete_event>:

void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	460b      	mov	r3, r1
 80027f0:	80bb      	strh	r3, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <hci_disconnection_complete_event+0x34>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
  set_connectable = TRUE;
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <hci_disconnection_complete_event+0x38>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <hci_disconnection_complete_event+0x3c>)
 8002804:	2200      	movs	r2, #0
 8002806:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Déconnecté\r\n");
  BSP_LED_On(LED2);
 8002808:	2000      	movs	r0, #0
 800280a:	f001 fa37 	bl	8003c7c <BSP_LED_On>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200003a0 	.word	0x200003a0
 800281c:	20000001 	.word	0x20000001
 8002820:	2000039c 	.word	0x2000039c

08002824 <aci_gatt_read_permit_req_event>:

void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
 800282e:	460b      	mov	r3, r1
 8002830:	80bb      	strh	r3, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 8002836:	88bb      	ldrh	r3, [r7, #4]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa39 	bl	8002cb0 <Read_Request_CB>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <Add_HWServW2ST_Service>:
extern __IO uint16_t connection_handle;
extern uint32_t start_time;

/* Ajout du service hardware */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b08d      	sub	sp, #52	@ 0x34
 800284c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  uint8_t char_number = 5;
 800284e:	2305      	movs	r3, #5
 8002850:	75fb      	strb	r3, [r7, #23]
  uint8_t max_attribute_records = 1 + (3 * char_number);
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	461a      	mov	r2, r3
 8002856:	0052      	lsls	r2, r2, #1
 8002858:	4413      	add	r3, r2
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	75bb      	strb	r3, [r7, #22]

  // Ajout du service HW
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002860:	231b      	movs	r3, #27
 8002862:	713b      	strb	r3, [r7, #4]
 8002864:	23c5      	movs	r3, #197	@ 0xc5
 8002866:	717b      	strb	r3, [r7, #5]
 8002868:	23d5      	movs	r3, #213	@ 0xd5
 800286a:	71bb      	strb	r3, [r7, #6]
 800286c:	23a5      	movs	r3, #165	@ 0xa5
 800286e:	71fb      	strb	r3, [r7, #7]
 8002870:	2302      	movs	r3, #2
 8002872:	723b      	strb	r3, [r7, #8]
 8002874:	2300      	movs	r3, #0
 8002876:	727b      	strb	r3, [r7, #9]
 8002878:	23b4      	movs	r3, #180	@ 0xb4
 800287a:	72bb      	strb	r3, [r7, #10]
 800287c:	239a      	movs	r3, #154	@ 0x9a
 800287e:	72fb      	strb	r3, [r7, #11]
 8002880:	23e1      	movs	r3, #225	@ 0xe1
 8002882:	733b      	strb	r3, [r7, #12]
 8002884:	2311      	movs	r3, #17
 8002886:	737b      	strb	r3, [r7, #13]
 8002888:	2301      	movs	r3, #1
 800288a:	73bb      	strb	r3, [r7, #14]
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	2300      	movs	r3, #0
 8002892:	743b      	strb	r3, [r7, #16]
 8002894:	2300      	movs	r3, #0
 8002896:	747b      	strb	r3, [r7, #17]
 8002898:	2300      	movs	r3, #0
 800289a:	74bb      	strb	r3, [r7, #18]
 800289c:	2300      	movs	r3, #0
 800289e:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80028a0:	4b4f      	ldr	r3, [pc, #316]	@ (80029e0 <Add_HWServW2ST_Service+0x198>)
 80028a2:	461c      	mov	r4, r3
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80028ac:	7dbb      	ldrb	r3, [r7, #22]
 80028ae:	4a4d      	ldr	r2, [pc, #308]	@ (80029e4 <Add_HWServW2ST_Service+0x19c>)
 80028b0:	9200      	str	r2, [sp, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	494a      	ldr	r1, [pc, #296]	@ (80029e0 <Add_HWServW2ST_Service+0x198>)
 80028b6:	2002      	movs	r0, #2
 80028b8:	f006 f983 	bl	8008bc2 <aci_gatt_add_service>
 80028bc:	4603      	mov	r3, r0
 80028be:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80028c0:	7d7b      	ldrb	r3, [r7, #21]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 80028c6:	2347      	movs	r3, #71	@ 0x47
 80028c8:	e085      	b.n	80029d6 <Add_HWServW2ST_Service+0x18e>

  // Ajout de la caractéristique environnementale
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80028ca:	231b      	movs	r3, #27
 80028cc:	713b      	strb	r3, [r7, #4]
 80028ce:	23c5      	movs	r3, #197	@ 0xc5
 80028d0:	717b      	strb	r3, [r7, #5]
 80028d2:	23d5      	movs	r3, #213	@ 0xd5
 80028d4:	71bb      	strb	r3, [r7, #6]
 80028d6:	23a5      	movs	r3, #165	@ 0xa5
 80028d8:	71fb      	strb	r3, [r7, #7]
 80028da:	2302      	movs	r3, #2
 80028dc:	723b      	strb	r3, [r7, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	727b      	strb	r3, [r7, #9]
 80028e2:	2336      	movs	r3, #54	@ 0x36
 80028e4:	72bb      	strb	r3, [r7, #10]
 80028e6:	23ac      	movs	r3, #172	@ 0xac
 80028e8:	72fb      	strb	r3, [r7, #11]
 80028ea:	23e1      	movs	r3, #225	@ 0xe1
 80028ec:	733b      	strb	r3, [r7, #12]
 80028ee:	2311      	movs	r3, #17
 80028f0:	737b      	strb	r3, [r7, #13]
 80028f2:	2301      	movs	r3, #1
 80028f4:	73bb      	strb	r3, [r7, #14]
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	2300      	movs	r3, #0
 80028fc:	743b      	strb	r3, [r7, #16]
 80028fe:	2300      	movs	r3, #0
 8002900:	747b      	strb	r3, [r7, #17]
 8002902:	2300      	movs	r3, #0
 8002904:	74bb      	strb	r3, [r7, #18]
 8002906:	2300      	movs	r3, #0
 8002908:	74fb      	strb	r3, [r7, #19]
  // Activer les bits pour Température (0x04), Pression (0x08) et Humidité (0x10)
  uuid[14] |= (0x04 | 0x08 | 0x10);
 800290a:	7cbb      	ldrb	r3, [r7, #18]
 800290c:	f043 031c 	orr.w	r3, r3, #28
 8002910:	b2db      	uxtb	r3, r3
 8002912:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002914:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <Add_HWServW2ST_Service+0x1a0>)
 8002916:	461c      	mov	r4, r3
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800291c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002920:	4b30      	ldr	r3, [pc, #192]	@ (80029e4 <Add_HWServW2ST_Service+0x19c>)
 8002922:	8818      	ldrh	r0, [r3, #0]
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <Add_HWServW2ST_Service+0x1a4>)
 8002926:	9305      	str	r3, [sp, #20]
 8002928:	2300      	movs	r3, #0
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	2310      	movs	r3, #16
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	2304      	movs	r3, #4
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2300      	movs	r3, #0
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2312      	movs	r3, #18
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	230a      	movs	r3, #10
 800293e:	4a2a      	ldr	r2, [pc, #168]	@ (80029e8 <Add_HWServW2ST_Service+0x1a0>)
 8002940:	2102      	movs	r1, #2
 8002942:	f006 fa14 	bl	8008d6e <aci_gatt_add_char>
 8002946:	4603      	mov	r3, r0
 8002948:	757b      	strb	r3, [r7, #21]
                          2 + 2 + 4 + 2, // Taille pour inclure les données d’humidité
                          CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800294a:	7d7b      	ldrb	r3, [r7, #21]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 8002950:	2347      	movs	r3, #71	@ 0x47
 8002952:	e040      	b.n	80029d6 <Add_HWServW2ST_Service+0x18e>

  // Ajout de la caractéristique AccGyroMag
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002954:	231b      	movs	r3, #27
 8002956:	713b      	strb	r3, [r7, #4]
 8002958:	23c5      	movs	r3, #197	@ 0xc5
 800295a:	717b      	strb	r3, [r7, #5]
 800295c:	23d5      	movs	r3, #213	@ 0xd5
 800295e:	71bb      	strb	r3, [r7, #6]
 8002960:	23a5      	movs	r3, #165	@ 0xa5
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	2302      	movs	r3, #2
 8002966:	723b      	strb	r3, [r7, #8]
 8002968:	2300      	movs	r3, #0
 800296a:	727b      	strb	r3, [r7, #9]
 800296c:	2336      	movs	r3, #54	@ 0x36
 800296e:	72bb      	strb	r3, [r7, #10]
 8002970:	23ac      	movs	r3, #172	@ 0xac
 8002972:	72fb      	strb	r3, [r7, #11]
 8002974:	23e1      	movs	r3, #225	@ 0xe1
 8002976:	733b      	strb	r3, [r7, #12]
 8002978:	2311      	movs	r3, #17
 800297a:	737b      	strb	r3, [r7, #13]
 800297c:	2301      	movs	r3, #1
 800297e:	73bb      	strb	r3, [r7, #14]
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	2300      	movs	r3, #0
 8002986:	743b      	strb	r3, [r7, #16]
 8002988:	2300      	movs	r3, #0
 800298a:	747b      	strb	r3, [r7, #17]
 800298c:	23e0      	movs	r3, #224	@ 0xe0
 800298e:	74bb      	strb	r3, [r7, #18]
 8002990:	2300      	movs	r3, #0
 8002992:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002994:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <Add_HWServW2ST_Service+0x1a0>)
 8002996:	461c      	mov	r4, r3
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800299c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80029a0:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <Add_HWServW2ST_Service+0x19c>)
 80029a2:	8818      	ldrh	r0, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <Add_HWServW2ST_Service+0x1a8>)
 80029a6:	9305      	str	r3, [sp, #20]
 80029a8:	2300      	movs	r3, #0
 80029aa:	9304      	str	r3, [sp, #16]
 80029ac:	2310      	movs	r3, #16
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	2304      	movs	r3, #4
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2310      	movs	r3, #16
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2314      	movs	r3, #20
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <Add_HWServW2ST_Service+0x1a0>)
 80029c0:	2102      	movs	r1, #2
 80029c2:	f006 f9d4 	bl	8008d6e <aci_gatt_add_char>
 80029c6:	4603      	mov	r3, r0
 80029c8:	757b      	strb	r3, [r7, #21]
                          2 + 3 * 3 * 2,
                          CHAR_PROP_NOTIFY,
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80029ca:	7d7b      	ldrb	r3, [r7, #21]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <Add_HWServW2ST_Service+0x18c>
    return BLE_STATUS_ERROR;
 80029d0:	2347      	movs	r3, #71	@ 0x47
 80029d2:	e000      	b.n	80029d6 <Add_HWServW2ST_Service+0x18e>

  return BLE_STATUS_SUCCESS;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000220 	.word	0x20000220
 80029e4:	20000216 	.word	0x20000216
 80029e8:	20000230 	.word	0x20000230
 80029ec:	20000218 	.word	0x20000218
 80029f0:	2000021a 	.word	0x2000021a

080029f4 <Add_SWServW2ST_Service>:

/* Ajout du service software */
tBleStatus Add_SWServW2ST_Service(void)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b08d      	sub	sp, #52	@ 0x34
 80029f8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  uint8_t char_number = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75fb      	strb	r3, [r7, #23]
  uint8_t max_attribute_records = 1 + (3 * char_number);
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	461a      	mov	r2, r3
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	75bb      	strb	r3, [r7, #22]

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002a0c:	231b      	movs	r3, #27
 8002a0e:	713b      	strb	r3, [r7, #4]
 8002a10:	23c5      	movs	r3, #197	@ 0xc5
 8002a12:	717b      	strb	r3, [r7, #5]
 8002a14:	23d5      	movs	r3, #213	@ 0xd5
 8002a16:	71bb      	strb	r3, [r7, #6]
 8002a18:	23a5      	movs	r3, #165	@ 0xa5
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	723b      	strb	r3, [r7, #8]
 8002a20:	2300      	movs	r3, #0
 8002a22:	727b      	strb	r3, [r7, #9]
 8002a24:	23b4      	movs	r3, #180	@ 0xb4
 8002a26:	72bb      	strb	r3, [r7, #10]
 8002a28:	239a      	movs	r3, #154	@ 0x9a
 8002a2a:	72fb      	strb	r3, [r7, #11]
 8002a2c:	23e1      	movs	r3, #225	@ 0xe1
 8002a2e:	733b      	strb	r3, [r7, #12]
 8002a30:	2311      	movs	r3, #17
 8002a32:	737b      	strb	r3, [r7, #13]
 8002a34:	2302      	movs	r3, #2
 8002a36:	73bb      	strb	r3, [r7, #14]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	743b      	strb	r3, [r7, #16]
 8002a40:	2300      	movs	r3, #0
 8002a42:	747b      	strb	r3, [r7, #17]
 8002a44:	2300      	movs	r3, #0
 8002a46:	74bb      	strb	r3, [r7, #18]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <Add_SWServW2ST_Service+0x10c>)
 8002a4e:	461c      	mov	r4, r3
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002a58:	7dbb      	ldrb	r3, [r7, #22]
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <Add_SWServW2ST_Service+0x110>)
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4927      	ldr	r1, [pc, #156]	@ (8002b00 <Add_SWServW2ST_Service+0x10c>)
 8002a62:	2002      	movs	r0, #2
 8002a64:	f006 f8ad 	bl	8008bc2 <aci_gatt_add_service>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002a6c:	7d7b      	ldrb	r3, [r7, #21]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <Add_SWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 8002a72:	2347      	movs	r3, #71	@ 0x47
 8002a74:	e040      	b.n	8002af8 <Add_SWServW2ST_Service+0x104>

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002a76:	231b      	movs	r3, #27
 8002a78:	713b      	strb	r3, [r7, #4]
 8002a7a:	23c5      	movs	r3, #197	@ 0xc5
 8002a7c:	717b      	strb	r3, [r7, #5]
 8002a7e:	23d5      	movs	r3, #213	@ 0xd5
 8002a80:	71bb      	strb	r3, [r7, #6]
 8002a82:	23a5      	movs	r3, #165	@ 0xa5
 8002a84:	71fb      	strb	r3, [r7, #7]
 8002a86:	2302      	movs	r3, #2
 8002a88:	723b      	strb	r3, [r7, #8]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	727b      	strb	r3, [r7, #9]
 8002a8e:	2336      	movs	r3, #54	@ 0x36
 8002a90:	72bb      	strb	r3, [r7, #10]
 8002a92:	23ac      	movs	r3, #172	@ 0xac
 8002a94:	72fb      	strb	r3, [r7, #11]
 8002a96:	23e1      	movs	r3, #225	@ 0xe1
 8002a98:	733b      	strb	r3, [r7, #12]
 8002a9a:	2311      	movs	r3, #17
 8002a9c:	737b      	strb	r3, [r7, #13]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73bb      	strb	r3, [r7, #14]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	743b      	strb	r3, [r7, #16]
 8002aaa:	2301      	movs	r3, #1
 8002aac:	747b      	strb	r3, [r7, #17]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	74bb      	strb	r3, [r7, #18]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <Add_SWServW2ST_Service+0x114>)
 8002ab8:	461c      	mov	r4, r3
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002abe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <Add_SWServW2ST_Service+0x110>)
 8002ac4:	8818      	ldrh	r0, [r3, #0]
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <Add_SWServW2ST_Service+0x118>)
 8002ac8:	9305      	str	r3, [sp, #20]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9304      	str	r3, [sp, #16]
 8002ace:	2310      	movs	r3, #16
 8002ad0:	9303      	str	r3, [sp, #12]
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2310      	movs	r3, #16
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2308      	movs	r3, #8
 8002ae0:	4a09      	ldr	r2, [pc, #36]	@ (8002b08 <Add_SWServW2ST_Service+0x114>)
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	f006 f943 	bl	8008d6e <aci_gatt_add_char>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	757b      	strb	r3, [r7, #21]
                          2 + 6 * SEND_N_QUATERNIONS,
                          CHAR_PROP_NOTIFY,
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          16, 0, &QuaternionsCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002aec:	7d7b      	ldrb	r3, [r7, #21]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <Add_SWServW2ST_Service+0x102>
    return BLE_STATUS_ERROR;
 8002af2:	2347      	movs	r3, #71	@ 0x47
 8002af4:	e000      	b.n	8002af8 <Add_SWServW2ST_Service+0x104>

  return BLE_STATUS_SUCCESS;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	20000220 	.word	0x20000220
 8002b04:	2000021c 	.word	0x2000021c
 8002b08:	20000230 	.word	0x20000230
 8002b0c:	2000021e 	.word	0x2000021e

08002b10 <Acc_Update>:

/* Mise à jour de la caractéristique d'accélération, gyroscope et magnétomètre */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint8_t buff[2 + 2 * 3 * 3];
  tBleStatus ret;

  HOST_TO_LE_16(buff, (HAL_GetTick() >> 3));
 8002b1c:	f001 fae4 	bl	80040e8 <HAL_GetTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	743b      	strb	r3, [r7, #16]
 8002b28:	f001 fade 	bl	80040e8 <HAL_GetTick>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	0adb      	lsrs	r3, r3, #11
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff + 2, -x_axes->AXIS_X);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	425b      	negs	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	74bb      	strb	r3, [r7, #18]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	425b      	negs	r3, r3
 8002b46:	121b      	asrs	r3, r3, #8
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff + 4,  x_axes->AXIS_Y);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	753b      	strb	r3, [r7, #20]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	121b      	asrs	r3, r3, #8
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff + 6, -x_axes->AXIS_Z);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	425b      	negs	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	75bb      	strb	r3, [r7, #22]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	425b      	negs	r3, r3
 8002b70:	121b      	asrs	r3, r3, #8
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	75fb      	strb	r3, [r7, #23]
  HOST_TO_LE_16(buff + 8,  g_axes->AXIS_X);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	763b      	strb	r3, [r7, #24]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	121b      	asrs	r3, r3, #8
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff + 10, g_axes->AXIS_Y);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	76bb      	strb	r3, [r7, #26]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	121b      	asrs	r3, r3, #8
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff + 12, g_axes->AXIS_Z);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	773b      	strb	r3, [r7, #28]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	121b      	asrs	r3, r3, #8
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	777b      	strb	r3, [r7, #29]
  HOST_TO_LE_16(buff + 14, m_axes->AXIS_X);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	77bb      	strb	r3, [r7, #30]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	121b      	asrs	r3, r3, #8
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff + 16, m_axes->AXIS_Y);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f887 3020 	strb.w	r3, [r7, #32]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	121b      	asrs	r3, r3, #8
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff + 18, m_axes->AXIS_Z);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	121b      	asrs	r3, r3, #8
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002bea:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <Acc_Update+0x10c>)
 8002bec:	8818      	ldrh	r0, [r3, #0]
 8002bee:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <Acc_Update+0x110>)
 8002bf0:	8819      	ldrh	r1, [r3, #0]
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2314      	movs	r3, #20
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f006 f9bf 	bl	8008f7e <aci_gatt_update_char_value>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                   0, sizeof(buff), buff);
  if (ret != BLE_STATUS_SUCCESS)
 8002c06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <Acc_Update+0x102>
  {
    PRINT_DBG("Erreur mise à jour Acceleration: 0x%02X\r\n", ret);
    return BLE_STATUS_ERROR;
 8002c0e:	2347      	movs	r3, #71	@ 0x47
 8002c10:	e000      	b.n	8002c14 <Acc_Update+0x104>
  }
  return BLE_STATUS_SUCCESS;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	@ 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000216 	.word	0x20000216
 8002c20:	2000021a 	.word	0x2000021a

08002c24 <Quat_Update>:

tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2 + 6 * SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff, (HAL_GetTick() >> 3));
 8002c2c:	f001 fa5c 	bl	80040e8 <HAL_GetTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	733b      	strb	r3, [r7, #12]
 8002c38:	f001 fa56 	bl	80040e8 <HAL_GetTick>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0adb      	lsrs	r3, r3, #11
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	737b      	strb	r3, [r7, #13]
#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff + 2, data[0].AXIS_X);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	73bb      	strb	r3, [r7, #14]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	121b      	asrs	r3, r3, #8
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff + 4, data[0].AXIS_Y);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	743b      	strb	r3, [r7, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	121b      	asrs	r3, r3, #8
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff + 6, data[0].AXIS_Z);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	74bb      	strb	r3, [r7, #18]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	121b      	asrs	r3, r3, #8
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff + 18, data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS doit être 1, 2 ou 3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <Quat_Update+0x84>)
 8002c7c:	8818      	ldrh	r0, [r3, #0]
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <Quat_Update+0x88>)
 8002c80:	8819      	ldrh	r1, [r3, #0]
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2308      	movs	r3, #8
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f006 f977 	bl	8008f7e <aci_gatt_update_char_value>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]
                                   0, sizeof(buff), buff);
  if (ret != BLE_STATUS_SUCCESS)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <Quat_Update+0x7a>
  {
    PRINT_DBG("Erreur mise à jour Quaternions: 0x%02X\r\n", ret);
    return BLE_STATUS_ERROR;
 8002c9a:	2347      	movs	r3, #71	@ 0x47
 8002c9c:	e000      	b.n	8002ca0 <Quat_Update+0x7c>
  }
  return BLE_STATUS_SUCCESS;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	2000021c 	.word	0x2000021c
 8002cac:	2000021e 	.word	0x2000021e

08002cb0 <Read_Request_CB>:

/* Callback de lecture GATT pour actualiser les valeurs des capteurs */
void Read_Request_CB(uint16_t handle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if (handle == AccGyroMagCharHandle + 1)
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	4b26      	ldr	r3, [pc, #152]	@ (8002d58 <Read_Request_CB+0xa8>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d105      	bne.n	8002cd2 <Read_Request_CB+0x22>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002cc6:	4a25      	ldr	r2, [pc, #148]	@ (8002d5c <Read_Request_CB+0xac>)
 8002cc8:	4925      	ldr	r1, [pc, #148]	@ (8002d60 <Read_Request_CB+0xb0>)
 8002cca:	4826      	ldr	r0, [pc, #152]	@ (8002d64 <Read_Request_CB+0xb4>)
 8002ccc:	f7ff ff20 	bl	8002b10 <Acc_Update>
 8002cd0:	e031      	b.n	8002d36 <Read_Request_CB+0x86>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <Read_Request_CB+0xb8>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d12b      	bne.n	8002d36 <Read_Request_CB+0x86>
  {
    float data_t, data_p, data_h;
    Read_Real_Environmental_Values(&data_p, &data_t, &data_h);
 8002cde:	f107 0208 	add.w	r2, r7, #8
 8002ce2:	f107 0110 	add.w	r1, r7, #16
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fab6 	bl	800125c <Read_Real_Environmental_Values>
    Environmental_Update((int32_t)(data_p * 100), (int16_t)(data_t * 10), (int16_t)(data_h * 10));
 8002cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002d6c <Read_Request_CB+0xbc>
 8002cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002d00:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d04:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d10:	ee17 3a90 	vmov	r3, s15
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d1a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d26:	ee17 2a90 	vmov	r2, s15
 8002d2a:	b212      	sxth	r2, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	ee16 0a90 	vmov	r0, s13
 8002d32:	f000 f81f 	bl	8002d74 <Environmental_Update>
  }

  if (connection_handle != 0)
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <Read_Request_CB+0xc0>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <Read_Request_CB+0xa0>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <Read_Request_CB+0xc0>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f006 f9cb 	bl	80090e2 <aci_gatt_allow_read>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
      PRINT_DBG("aci_gatt_allow_read() échoué: 0x%02x\r\n", ret);
  }
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2000021a 	.word	0x2000021a
 8002d5c:	200003bc 	.word	0x200003bc
 8002d60:	200003b0 	.word	0x200003b0
 8002d64:	200003a4 	.word	0x200003a4
 8002d68:	20000218 	.word	0x20000218
 8002d6c:	42c80000 	.word	0x42c80000
 8002d70:	2000039c 	.word	0x2000039c

08002d74 <Environmental_Update>:

tBleStatus Environmental_Update(int32_t press, int16_t temp, int16_t hum)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	803b      	strh	r3, [r7, #0]
  tBleStatus ret;
  uint8_t buff[10];
  HOST_TO_LE_16(buff, 0);
 8002d84:	2300      	movs	r3, #0
 8002d86:	733b      	strb	r3, [r7, #12]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	737b      	strb	r3, [r7, #13]
  HOST_TO_LE_32(buff + 2, press);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	73bb      	strb	r3, [r7, #14]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	121b      	asrs	r3, r3, #8
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	141b      	asrs	r3, r3, #16
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	743b      	strb	r3, [r7, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	161b      	asrs	r3, r3, #24
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff + 8, temp);
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	753b      	strb	r3, [r7, #20]
 8002db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002db4:	121b      	asrs	r3, r3, #8
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff + 6, hum);
 8002dbc:	883b      	ldrh	r3, [r7, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	74bb      	strb	r3, [r7, #18]
 8002dc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002dc6:	121b      	asrs	r3, r3, #8
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <Environmental_Update+0x88>)
 8002dd0:	8818      	ldrh	r0, [r3, #0]
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <Environmental_Update+0x8c>)
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	230a      	movs	r3, #10
 8002dde:	2200      	movs	r2, #0
 8002de0:	f006 f8cd 	bl	8008f7e <aci_gatt_update_char_value>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]
                                   0, sizeof(buff), buff);
  if (ret != BLE_STATUS_SUCCESS)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <Environmental_Update+0x7e>
  {
    PRINT_DBG("Erreur mise à jour ENV: 0x%04X\r\n", ret);
    return BLE_STATUS_ERROR;
 8002dee:	2347      	movs	r3, #71	@ 0x47
 8002df0:	e000      	b.n	8002df4 <Environmental_Update+0x80>
  }
  return BLE_STATUS_SUCCESS;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000216 	.word	0x20000216
 8002e00:	20000218 	.word	0x20000218

08002e04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	4a33      	ldr	r2, [pc, #204]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e26:	4b31      	ldr	r3, [pc, #196]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e32:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4e:	4a27      	ldr	r2, [pc, #156]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e56:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e66:	4a21      	ldr	r2, [pc, #132]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <MX_GPIO_Init+0xe8>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e84:	f001 fdb8 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ea0:	f001 faf4 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8002ea4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ec0:	f001 fae4 	bl	800448c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2006      	movs	r0, #6
 8002eca:	f001 fa3c 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ece:	2006      	movs	r0, #6
 8002ed0:	f001 fa55 	bl	800437e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2028      	movs	r0, #40	@ 0x28
 8002eda:	f001 fa34 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ede:	2028      	movs	r0, #40	@ 0x28
 8002ee0:	f001 fa4d 	bl	800437e <HAL_NVIC_EnableIRQ>

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	@ 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000

08002ef0 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8002ef4:	2006      	movs	r0, #6
 8002ef6:	f001 fa42 	bl	800437e <HAL_NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8002f02:	2006      	movs	r0, #6
 8002f04:	f001 fa49 	bl	800439a <HAL_NVIC_DisableIRQ>
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <HCI_TL_SPI_Init+0x94>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <HCI_TL_SPI_Init+0x94>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f20:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <HCI_TL_SPI_Init+0x94>)
 8002f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f44:	f001 faa2 	bl	800448c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f64:	f001 fa92 	bl	800448c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f82:	f001 fa83 	bl	800448c <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002f86:	2201      	movs	r2, #1
 8002f88:	2102      	movs	r1, #2
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f8e:	f001 fd33 	bl	80049f8 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8002f92:	f000 fc9f 	bl	80038d4 <BSP_SPI1_Init>
 8002f96:	4603      	mov	r3, r0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002fa8:	2101      	movs	r1, #1
 8002faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fae:	f001 fc17 	bl	80047e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fb8:	f001 fc12 	bl	80047e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc4:	f001 fc0c 	bl	80047e0 <HAL_GPIO_DeInit>
  return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fda:	f001 fd0d 	bl	80049f8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fe8:	f001 fd06 	bl	80049f8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002fec:	2005      	movs	r0, #5
 8002fee:	f001 f887 	bl	8004100 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ffc:	f001 fcfc 	bl	80049f8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003000:	2005      	movs	r0, #5
 8003002:	f001 f87d 	bl	8004100 <HAL_Delay>
  return 0;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}

0800300c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800301c:	2300      	movs	r3, #0
 800301e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003020:	4a27      	ldr	r2, [pc, #156]	@ (80030c0 <HCI_TL_SPI_Receive+0xb4>)
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800302a:	6018      	str	r0, [r3, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8003030:	f7ff ff65 	bl	8002efe <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	2102      	movs	r1, #2
 8003038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800303c:	f001 fcdc 	bl	80049f8 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003040:	f107 010c 	add.w	r1, r7, #12
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	2205      	movs	r2, #5
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fc72 	bl	8003934 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8003050:	7c3b      	ldrb	r3, [r7, #16]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	b21a      	sxth	r2, r3
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	b21b      	sxth	r3, r3
 800305a:	4313      	orrs	r3, r2
 800305c:	b21b      	sxth	r3, r3
 800305e:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8003060:	8bfb      	ldrh	r3, [r7, #30]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01e      	beq.n	80030a4 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8003066:	8bfa      	ldrh	r2, [r7, #30]
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	429a      	cmp	r2, r3
 800306c:	d901      	bls.n	8003072 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8003072:	2300      	movs	r3, #0
 8003074:	777b      	strb	r3, [r7, #29]
 8003076:	e010      	b.n	800309a <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8003078:	f107 011b 	add.w	r1, r7, #27
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	2201      	movs	r2, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fc56 	bl	8003934 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8003088:	7f7b      	ldrb	r3, [r7, #29]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	7efa      	ldrb	r2, [r7, #27]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8003094:	7f7b      	ldrb	r3, [r7, #29]
 8003096:	3301      	adds	r3, #1
 8003098:	777b      	strb	r3, [r7, #29]
 800309a:	7f7b      	ldrb	r3, [r7, #29]
 800309c:	b29b      	uxth	r3, r3
 800309e:	8bfa      	ldrh	r2, [r7, #30]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8e9      	bhi.n	8003078 <HCI_TL_SPI_Receive+0x6c>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80030a4:	2201      	movs	r2, #1
 80030a6:	2102      	movs	r1, #2
 80030a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030ac:	f001 fca4 	bl	80049f8 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 80030b0:	f7ff ff1e 	bl	8002ef0 <HCI_TL_SPI_Enable_IRQ>

  return len;
 80030b4:	7f7b      	ldrb	r3, [r7, #29]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	0800e008 	.word	0x0800e008

080030c4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	@ 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80030d0:	4a36      	ldr	r2, [pc, #216]	@ (80031ac <HCI_TL_SPI_Send+0xe8>)
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030da:	6018      	str	r0, [r3, #0]
 80030dc:	3304      	adds	r3, #4
 80030de:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f001 f802 	bl	80040e8 <HAL_GetTick>
 80030e4:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80030e6:	f7ff ff0a 	bl	8002efe <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80030ea:	f000 fffd 	bl	80040e8 <HAL_GetTick>
 80030ee:	61f8      	str	r0, [r7, #28]

    result = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2102      	movs	r1, #2
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030fc:	f001 fc7c 	bl	80049f8 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8003100:	e00a      	b.n	8003118 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8003102:	f000 fff1 	bl	80040e8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d903      	bls.n	8003118 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8003110:	f06f 0302 	mvn.w	r3, #2
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003116:	e004      	b.n	8003122 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 8003118:	f000 f84c 	bl	80031b4 <IsDataAvailable>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ef      	beq.n	8003102 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	f113 0f03 	cmn.w	r3, #3
 8003128:	d106      	bne.n	8003138 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800312a:	2201      	movs	r2, #1
 800312c:	2102      	movs	r1, #2
 800312e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003132:	f001 fc61 	bl	80049f8 <HAL_GPIO_WritePin>
      break;
 8003136:	e031      	b.n	800319c <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003138:	f107 010c 	add.w	r1, r7, #12
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	2205      	movs	r2, #5
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fbf6 	bl	8003934 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8003148:	7bbb      	ldrb	r3, [r7, #14]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	b21a      	sxth	r2, r3
 800314e:	7b7b      	ldrb	r3, [r7, #13]
 8003150:	b21b      	sxth	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b21b      	sxth	r3, r3
 8003156:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8003158:	8b7a      	ldrh	r2, [r7, #26]
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	429a      	cmp	r2, r3
 800315e:	d306      	bcc.n	800316e <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	461a      	mov	r2, r3
 8003164:	4912      	ldr	r1, [pc, #72]	@ (80031b0 <HCI_TL_SPI_Send+0xec>)
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fbe4 	bl	8003934 <BSP_SPI1_SendRecv>
 800316c:	e002      	b.n	8003174 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800316e:	f06f 0301 	mvn.w	r3, #1
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003174:	2201      	movs	r2, #1
 8003176:	2102      	movs	r1, #2
 8003178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800317c:	f001 fc3c 	bl	80049f8 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003180:	f000 ffb2 	bl	80040e8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d903      	bls.n	8003196 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 800318e:	f06f 0302 	mvn.w	r3, #2
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8003194:	e002      	b.n	800319c <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	dba6      	blt.n	80030ea <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 800319c:	f7ff fea8 	bl	8002ef0 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3728      	adds	r7, #40	@ 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	0800e010 	.word	0x0800e010
 80031b0:	20000248 	.word	0x20000248

080031b4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80031b8:	2101      	movs	r1, #1
 80031ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031be:	f001 fc03 	bl	80049c8 <HAL_GPIO_ReadPin>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80031da:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <hci_tl_lowlevel_init+0x54>)
 80031dc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80031de:	4b13      	ldr	r3, [pc, #76]	@ (800322c <hci_tl_lowlevel_init+0x58>)
 80031e0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80031e2:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <hci_tl_lowlevel_init+0x5c>)
 80031e4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80031e6:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <hci_tl_lowlevel_init+0x60>)
 80031e8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80031ea:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <hci_tl_lowlevel_init+0x64>)
 80031ec:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <hci_tl_lowlevel_init+0x68>)
 80031f0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f007 fdab 	bl	800ad50 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80031fa:	f04f 51b0 	mov.w	r1, #369098752	@ 0x16000000
 80031fe:	4810      	ldr	r0, [pc, #64]	@ (8003240 <hci_tl_lowlevel_init+0x6c>)
 8003200:	f001 f8ff 	bl	8004402 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003204:	4a0f      	ldr	r2, [pc, #60]	@ (8003244 <hci_tl_lowlevel_init+0x70>)
 8003206:	2100      	movs	r1, #0
 8003208:	480d      	ldr	r0, [pc, #52]	@ (8003240 <hci_tl_lowlevel_init+0x6c>)
 800320a:	f001 f8e0 	bl	80043ce <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2006      	movs	r0, #6
 8003214:	f001 f897 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003218:	2006      	movs	r0, #6
 800321a:	f001 f8b0 	bl	800437e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	08002f0d 	.word	0x08002f0d
 800322c:	08002fa5 	.word	0x08002fa5
 8003230:	080030c5 	.word	0x080030c5
 8003234:	0800300d 	.word	0x0800300d
 8003238:	08002fcf 	.word	0x08002fcf
 800323c:	08003975 	.word	0x08003975
 8003240:	20000240 	.word	0x20000240
 8003244:	08003249 	.word	0x08003249

08003248 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800324c:	e005      	b.n	800325a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800324e:	2000      	movs	r0, #0
 8003250:	f007 fee2 	bl	800b018 <hci_notify_asynch_evt>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800325a:	f7ff ffab 	bl	80031b4 <IsDataAvailable>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f4      	bne.n	800324e <hci_tl_lowlevel_isr+0x6>
 8003264:	e000      	b.n	8003268 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8003266:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003270:	4b1b      	ldr	r3, [pc, #108]	@ (80032e0 <MX_I2C1_Init+0x74>)
 8003272:	4a1c      	ldr	r2, [pc, #112]	@ (80032e4 <MX_I2C1_Init+0x78>)
 8003274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <MX_I2C1_Init+0x74>)
 8003278:	4a1b      	ldr	r2, [pc, #108]	@ (80032e8 <MX_I2C1_Init+0x7c>)
 800327a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <MX_I2C1_Init+0x74>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003282:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <MX_I2C1_Init+0x74>)
 8003284:	2201      	movs	r2, #1
 8003286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <MX_I2C1_Init+0x74>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800328e:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <MX_I2C1_Init+0x74>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003294:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <MX_I2C1_Init+0x74>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <MX_I2C1_Init+0x74>)
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <MX_I2C1_Init+0x74>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a6:	480e      	ldr	r0, [pc, #56]	@ (80032e0 <MX_I2C1_Init+0x74>)
 80032a8:	f001 fbd8 	bl	8004a5c <HAL_I2C_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032b2:	f000 f92d 	bl	8003510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032b6:	2100      	movs	r1, #0
 80032b8:	4809      	ldr	r0, [pc, #36]	@ (80032e0 <MX_I2C1_Init+0x74>)
 80032ba:	f002 f933 	bl	8005524 <HAL_I2CEx_ConfigAnalogFilter>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032c4:	f000 f924 	bl	8003510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032c8:	2100      	movs	r1, #0
 80032ca:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <MX_I2C1_Init+0x74>)
 80032cc:	f002 f975 	bl	80055ba <HAL_I2CEx_ConfigDigitalFilter>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032d6:	f000 f91b 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000348 	.word	0x20000348
 80032e4:	40005400 	.word	0x40005400
 80032e8:	10707dbc 	.word	0x10707dbc

080032ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b0ac      	sub	sp, #176	@ 0xb0
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2288      	movs	r2, #136	@ 0x88
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f008 fda2 	bl	800be56 <memset>
  if(i2cHandle->Instance==I2C1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a21      	ldr	r2, [pc, #132]	@ (800339c <HAL_I2C_MspInit+0xb0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d13b      	bne.n	8003394 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800331c:	2340      	movs	r3, #64	@ 0x40
 800331e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003320:	2300      	movs	r3, #0
 8003322:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fff7 	bl	800631c <HAL_RCCEx_PeriphCLKConfig>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003334:	f000 f8ec 	bl	8003510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_I2C_MspInit+0xb4>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <HAL_I2C_MspInit+0xb4>)
 800333e:	f043 0302 	orr.w	r3, r3, #2
 8003342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003344:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <HAL_I2C_MspInit+0xb4>)
 8003346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003350:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003358:	2312      	movs	r3, #18
 800335a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800336a:	2304      	movs	r3, #4
 800336c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003374:	4619      	mov	r1, r3
 8003376:	480b      	ldr	r0, [pc, #44]	@ (80033a4 <HAL_I2C_MspInit+0xb8>)
 8003378:	f001 f888 	bl	800448c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <HAL_I2C_MspInit+0xb4>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	4a07      	ldr	r2, [pc, #28]	@ (80033a0 <HAL_I2C_MspInit+0xb4>)
 8003382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003386:	6593      	str	r3, [r2, #88]	@ 0x58
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_I2C_MspInit+0xb4>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003394:	bf00      	nop
 8003396:	37b0      	adds	r7, #176	@ 0xb0
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40005400 	.word	0x40005400
 80033a0:	40021000 	.word	0x40021000
 80033a4:	48000400 	.word	0x48000400

080033a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80033ae:	f000 fe2b 	bl	8004008 <HAL_Init>
  SystemClock_Config();
 80033b2:	f000 f824 	bl	80033fe <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033b6:	f7ff fd25 	bl	8002e04 <MX_GPIO_Init>
  MX_I2C1_Init();
 80033ba:	f7ff ff57 	bl	800326c <MX_I2C1_Init>
  MX_BlueNRG_2_Init();
 80033be:	f7fd fd95 	bl	8000eec <MX_BlueNRG_2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MX_BlueNRG_2_Process();
 80033c2:	f7fd fdb7 	bl	8000f34 <MX_BlueNRG_2_Process>

    float press, temp, hum;
    Read_Real_Environmental_Values(&press, &temp, &hum);
 80033c6:	1d3a      	adds	r2, r7, #4
 80033c8:	f107 0108 	add.w	r1, r7, #8
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd ff43 	bl	800125c <Read_Real_Environmental_Values>
    Send_Sensor_Data_UART(press, temp, hum);
 80033d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80033da:	ed97 7a02 	vldr	s14, [r7, #8]
 80033de:	edd7 6a01 	vldr	s13, [r7, #4]
 80033e2:	eeb0 1a66 	vmov.f32	s2, s13
 80033e6:	eef0 0a47 	vmov.f32	s1, s14
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	f000 f857 	bl	80034a0 <Send_Sensor_Data_UART>

    HAL_Delay(10000);
 80033f2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80033f6:	f000 fe83 	bl	8004100 <HAL_Delay>
  {
 80033fa:	bf00      	nop
 80033fc:	e7e1      	b.n	80033c2 <main+0x1a>

080033fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b096      	sub	sp, #88	@ 0x58
 8003402:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	2244      	movs	r2, #68	@ 0x44
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f008 fd22 	bl	800be56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003412:	463b      	mov	r3, r7
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003420:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003424:	f002 f924 	bl	8005670 <HAL_PWREx_ControlVoltageScaling>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800342e:	f000 f86f 	bl	8003510 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003432:	2302      	movs	r3, #2
 8003434:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800343a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800343c:	2310      	movs	r3, #16
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003440:	2302      	movs	r3, #2
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003444:	2302      	movs	r3, #2
 8003446:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003448:	2301      	movs	r3, #1
 800344a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800344c:	2308      	movs	r3, #8
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003450:	2307      	movs	r3, #7
 8003452:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003454:	2302      	movs	r3, #2
 8003456:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003458:	2302      	movs	r3, #2
 800345a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4618      	mov	r0, r3
 8003462:	f002 f95b 	bl	800571c <HAL_RCC_OscConfig>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800346c:	f000 f850 	bl	8003510 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003470:	230f      	movs	r3, #15
 8003472:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003474:	2303      	movs	r3, #3
 8003476:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003484:	463b      	mov	r3, r7
 8003486:	2103      	movs	r1, #3
 8003488:	4618      	mov	r0, r3
 800348a:	f002 fd23 	bl	8005ed4 <HAL_RCC_ClockConfig>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003494:	f000 f83c 	bl	8003510 <Error_Handler>
  }
}
 8003498:	bf00      	nop
 800349a:	3758      	adds	r7, #88	@ 0x58
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <Send_Sensor_Data_UART>:
  * @param  temperature : Température en °C
  * @param  humidity : Humidité en %
  * @retval None
  */
void Send_Sensor_Data_UART(float pressure, float temperature, float humidity)
{
 80034a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034a4:	b0a2      	sub	sp, #136	@ 0x88
 80034a6:	af04      	add	r7, sp, #16
 80034a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80034ac:	edc7 0a02 	vstr	s1, [r7, #8]
 80034b0:	ed87 1a01 	vstr	s2, [r7, #4]
    char buffer[100];
    int len = sprintf(buffer, "P: %.2f hPa, T: %.1f °C, H: %.1f %%\r\n", pressure, temperature, humidity);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7fd f847 	bl	8000548 <__aeabi_f2d>
 80034ba:	4680      	mov	r8, r0
 80034bc:	4689      	mov	r9, r1
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f7fd f842 	bl	8000548 <__aeabi_f2d>
 80034c4:	4604      	mov	r4, r0
 80034c6:	460d      	mov	r5, r1
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fd f83d 	bl	8000548 <__aeabi_f2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	f107 0010 	add.w	r0, r7, #16
 80034d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034da:	e9cd 4500 	strd	r4, r5, [sp]
 80034de:	4642      	mov	r2, r8
 80034e0:	464b      	mov	r3, r9
 80034e2:	4909      	ldr	r1, [pc, #36]	@ (8003508 <Send_Sensor_Data_UART+0x68>)
 80034e4:	f008 fc54 	bl	800bd90 <siprintf>
 80034e8:	6778      	str	r0, [r7, #116]	@ 0x74
    /* Utilisation de huart2 selon la configuration de CubeMX pour le ST-LINK */
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80034ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	f107 0110 	add.w	r1, r7, #16
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	4805      	ldr	r0, [pc, #20]	@ (800350c <Send_Sensor_Data_UART+0x6c>)
 80034f8:	f004 f856 	bl	80075a8 <HAL_UART_Transmit>
}
 80034fc:	bf00      	nop
 80034fe:	3778      	adds	r7, #120	@ 0x78
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003506:	bf00      	nop
 8003508:	0800e018 	.word	0x0800e018
 800350c:	20000440 	.word	0x20000440

08003510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
  __disable_irq();
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <Error_Handler+0x8>

0800351c <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b092      	sub	sp, #72	@ 0x48
 8003520:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8003522:	4a36      	ldr	r2, [pc, #216]	@ (80035fc <Set_DeviceConnectable+0xe0>)
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8003530:	2302      	movs	r3, #2
 8003532:	703b      	strb	r3, [r7, #0]
 8003534:	230a      	movs	r3, #10
 8003536:	707b      	strb	r3, [r7, #1]
 8003538:	2300      	movs	r3, #0
 800353a:	70bb      	strb	r3, [r7, #2]
 800353c:	2308      	movs	r3, #8
 800353e:	70fb      	strb	r3, [r7, #3]
 8003540:	2309      	movs	r3, #9
 8003542:	713b      	strb	r3, [r7, #4]
 8003544:	2342      	movs	r3, #66	@ 0x42
 8003546:	717b      	strb	r3, [r7, #5]
 8003548:	236c      	movs	r3, #108	@ 0x6c
 800354a:	71bb      	strb	r3, [r7, #6]
 800354c:	2375      	movs	r3, #117	@ 0x75
 800354e:	71fb      	strb	r3, [r7, #7]
 8003550:	2365      	movs	r3, #101	@ 0x65
 8003552:	723b      	strb	r3, [r7, #8]
 8003554:	234e      	movs	r3, #78	@ 0x4e
 8003556:	727b      	strb	r3, [r7, #9]
 8003558:	2352      	movs	r3, #82	@ 0x52
 800355a:	72bb      	strb	r3, [r7, #10]
 800355c:	2347      	movs	r3, #71	@ 0x47
 800355e:	72fb      	strb	r3, [r7, #11]
 8003560:	230d      	movs	r3, #13
 8003562:	733b      	strb	r3, [r7, #12]
 8003564:	23ff      	movs	r3, #255	@ 0xff
 8003566:	737b      	strb	r3, [r7, #13]
 8003568:	2301      	movs	r3, #1
 800356a:	73bb      	strb	r3, [r7, #14]
 800356c:	2302      	movs	r3, #2
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	2300      	movs	r3, #0
 8003572:	743b      	strb	r3, [r7, #16]
 8003574:	23fc      	movs	r3, #252	@ 0xfc
 8003576:	747b      	strb	r3, [r7, #17]
 8003578:	2300      	movs	r3, #0
 800357a:	74bb      	strb	r3, [r7, #18]
 800357c:	2300      	movs	r3, #0
 800357e:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
	0xFC, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <Set_DeviceConnectable+0xe4>)
 8003582:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8003584:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8003586:	4b1e      	ldr	r3, [pc, #120]	@ (8003600 <Set_DeviceConnectable+0xe4>)
 8003588:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 800358a:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 800358c:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <Set_DeviceConnectable+0xe4>)
 800358e:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8003590:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8003592:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <Set_DeviceConnectable+0xe4>)
 8003594:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8003596:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8003598:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <Set_DeviceConnectable+0xe4>)
 800359a:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 800359c:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800359e:	4b18      	ldr	r3, [pc, #96]	@ (8003600 <Set_DeviceConnectable+0xe4>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80035a2:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80035a4:	7cbb      	ldrb	r3, [r7, #18]
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 80035ae:	2100      	movs	r1, #0
 80035b0:	2000      	movs	r0, #0
 80035b2:	f007 fa78 	bl	800aaa6 <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80035b6:	2300      	movs	r3, #0
 80035b8:	9306      	str	r3, [sp, #24]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9305      	str	r3, [sp, #20]
 80035be:	2300      	movs	r3, #0
 80035c0:	9304      	str	r3, [sp, #16]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	9302      	str	r3, [sp, #8]
 80035cc:	2308      	movs	r3, #8
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2301      	movs	r3, #1
 80035d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035de:	2000      	movs	r0, #0
 80035e0:	f004 ffcd 	bl	800857e <aci_gap_set_discoverable>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80035ea:	463b      	mov	r3, r7
 80035ec:	4619      	mov	r1, r3
 80035ee:	201a      	movs	r0, #26
 80035f0:	f005 fa42 	bl	8008a78 <aci_gap_update_adv_data>
  {
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	@ 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	0800e040 	.word	0x0800e040
 8003600:	20000208 	.word	0x20000208

08003604 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d163      	bne.n	80036e0 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b3e      	cmp	r3, #62	@ 0x3e
 8003624:	d11e      	bne.n	8003664 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3302      	adds	r3, #2
 800362a:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e014      	b.n	800365c <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4a2b      	ldr	r2, [pc, #172]	@ (80036e8 <APP_UserEvtRx+0xe4>)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8003640:	4299      	cmp	r1, r3
 8003642:	d108      	bne.n	8003656 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8003644:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <APP_UserEvtRx+0xe4>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	3201      	adds	r2, #1
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b09      	cmp	r3, #9
 8003660:	d9e7      	bls.n	8003632 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8003662:	e03d      	b.n	80036e0 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2bff      	cmp	r3, #255	@ 0xff
 800366a:	d11e      	bne.n	80036aa <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3302      	adds	r3, #2
 8003670:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e014      	b.n	80036a2 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29a      	uxth	r2, r3
 800367e:	491b      	ldr	r1, [pc, #108]	@ (80036ec <APP_UserEvtRx+0xe8>)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003686:	429a      	cmp	r2, r3
 8003688:	d108      	bne.n	800369c <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800368a:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <APP_UserEvtRx+0xe8>)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	3202      	adds	r2, #2
 8003698:	4610      	mov	r0, r2
 800369a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3301      	adds	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80036a6:	d9e7      	bls.n	8003678 <APP_UserEvtRx+0x74>
}
 80036a8:	e01a      	b.n	80036e0 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e014      	b.n	80036da <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4619      	mov	r1, r3
 80036b6:	4a0e      	ldr	r2, [pc, #56]	@ (80036f0 <APP_UserEvtRx+0xec>)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80036be:	4299      	cmp	r1, r3
 80036c0:	d108      	bne.n	80036d4 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80036c2:	4a0b      	ldr	r2, [pc, #44]	@ (80036f0 <APP_UserEvtRx+0xec>)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	3202      	adds	r2, #2
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d9e7      	bls.n	80036b0 <APP_UserEvtRx+0xac>
}
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	0800e0dc 	.word	0x0800e0dc
 80036ec:	0800e12c 	.word	0x0800e12c
 80036f0:	0800e0a4 	.word	0x0800e0a4

080036f4 <platform_write_lps22>:
#include "sensor_platform.h"
#include "lps22hh_reg.h"
#include "hts221_reg.h"

int32_t platform_write_lps22(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af04      	add	r7, sp, #16
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	460b      	mov	r3, r1
 8003702:	72fb      	strb	r3, [r7, #11]
 8003704:	4613      	mov	r3, r2
 8003706:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8003708:	7afb      	ldrb	r3, [r7, #11]
 800370a:	b29a      	uxth	r2, r3
 800370c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003710:	9302      	str	r3, [sp, #8]
 8003712:	893b      	ldrh	r3, [r7, #8]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2301      	movs	r3, #1
 800371c:	21bb      	movs	r1, #187	@ 0xbb
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f001 fa2c 	bl	8004b7c <HAL_I2C_Mem_Write>
    return 0;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <platform_read_lps22>:

int32_t platform_read_lps22(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b088      	sub	sp, #32
 8003732:	af04      	add	r7, sp, #16
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	461a      	mov	r2, r3
 800373a:	460b      	mov	r3, r1
 800373c:	72fb      	strb	r3, [r7, #11]
 800373e:	4613      	mov	r3, r2
 8003740:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003742:	7afb      	ldrb	r3, [r7, #11]
 8003744:	b29a      	uxth	r2, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	893b      	ldrh	r3, [r7, #8]
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2301      	movs	r3, #1
 8003756:	21bb      	movs	r1, #187	@ 0xbb
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f001 fb23 	bl	8004da4 <HAL_I2C_Mem_Read>
    return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <platform_write_hts221>:

int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af04      	add	r7, sp, #16
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	461a      	mov	r2, r3
 8003774:	460b      	mov	r3, r1
 8003776:	72fb      	strb	r3, [r7, #11]
 8003778:	4613      	mov	r3, r2
 800377a:	813b      	strh	r3, [r7, #8]
    reg |= 0x80;
 800377c:	7afb      	ldrb	r3, [r7, #11]
 800377e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003782:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	b29a      	uxth	r2, r3
 8003788:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800378c:	9302      	str	r3, [sp, #8]
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2301      	movs	r3, #1
 8003798:	21bf      	movs	r1, #191	@ 0xbf
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f001 f9ee 	bl	8004b7c <HAL_I2C_Mem_Write>
    return 0;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <platform_read_hts221>:

int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b088      	sub	sp, #32
 80037ae:	af04      	add	r7, sp, #16
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	461a      	mov	r2, r3
 80037b6:	460b      	mov	r3, r1
 80037b8:	72fb      	strb	r3, [r7, #11]
 80037ba:	4613      	mov	r3, r2
 80037bc:	813b      	strh	r3, [r7, #8]
    reg |= 0x80;
 80037be:	7afb      	ldrb	r3, [r7, #11]
 80037c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037c4:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ce:	9302      	str	r3, [sp, #8]
 80037d0:	893b      	ldrh	r3, [r7, #8]
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2301      	movs	r3, #1
 80037da:	21bf      	movs	r1, #191	@ 0xbf
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f001 fae1 	bl	8004da4 <HAL_I2C_Mem_Read>
    return 0;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <platform_delay>:

void platform_delay(uint32_t ms)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fc83 	bl	8004100 <HAL_Delay>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <HAL_MspInit+0x44>)
 800380c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380e:	4a0e      	ldr	r2, [pc, #56]	@ (8003848 <HAL_MspInit+0x44>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6613      	str	r3, [r2, #96]	@ 0x60
 8003816:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <HAL_MspInit+0x44>)
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b09      	ldr	r3, [pc, #36]	@ (8003848 <HAL_MspInit+0x44>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	4a08      	ldr	r2, [pc, #32]	@ (8003848 <HAL_MspInit+0x44>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382c:	6593      	str	r3, [r2, #88]	@ 0x58
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_MspInit+0x44>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000

0800384c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <NMI_Handler+0x4>

08003854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <HardFault_Handler+0x4>

0800385c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <MemManage_Handler+0x4>

08003864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <BusFault_Handler+0x4>

0800386c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <UsageFault_Handler+0x4>

08003874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a2:	f000 fc0d 	bl	80040c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80038b0:	4802      	ldr	r0, [pc, #8]	@ (80038bc <EXTI0_IRQHandler+0x10>)
 80038b2:	f000 fdbb 	bl	800442c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000240 	.word	0x20000240

080038c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <EXTI15_10_IRQHandler+0x10>)
 80038c6:	f000 fdb1 	bl	800442c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000000c 	.word	0x2000000c

080038d4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80038de:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <BSP_SPI1_Init+0x54>)
 80038e0:	4a12      	ldr	r2, [pc, #72]	@ (800392c <BSP_SPI1_Init+0x58>)
 80038e2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80038e4:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <BSP_SPI1_Init+0x5c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	4911      	ldr	r1, [pc, #68]	@ (8003930 <BSP_SPI1_Init+0x5c>)
 80038ec:	600a      	str	r2, [r1, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d114      	bne.n	800391c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80038f2:	480d      	ldr	r0, [pc, #52]	@ (8003928 <BSP_SPI1_Init+0x54>)
 80038f4:	f003 fc8e 	bl	8007214 <HAL_SPI_GetState>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10e      	bne.n	800391c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80038fe:	480a      	ldr	r0, [pc, #40]	@ (8003928 <BSP_SPI1_Init+0x54>)
 8003900:	f000 f882 	bl	8003a08 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800390a:	4807      	ldr	r0, [pc, #28]	@ (8003928 <BSP_SPI1_Init+0x54>)
 800390c:	f000 f83a 	bl	8003984 <MX_SPI1_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003916:	f06f 0307 	mvn.w	r3, #7
 800391a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800391c:	687b      	ldr	r3, [r7, #4]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200003d4 	.word	0x200003d4
 800392c:	40013000 	.word	0x40013000
 8003930:	20000438 	.word	0x20000438

08003934 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800394c:	9200      	str	r2, [sp, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	4807      	ldr	r0, [pc, #28]	@ (8003970 <BSP_SPI1_SendRecv+0x3c>)
 8003954:	f003 fa4b 	bl	8006dee <HAL_SPI_TransmitReceive>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800395e:	f06f 0305 	mvn.w	r3, #5
 8003962:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003964:	697b      	ldr	r3, [r7, #20]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200003d4 	.word	0x200003d4

08003974 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003978:	f000 fbb6 	bl	80040e8 <HAL_GetTick>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <MX_SPI1_Init+0x80>)
 8003994:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800399c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039aa:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039be:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2228      	movs	r2, #40	@ 0x28
 80039c4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2207      	movs	r2, #7
 80039dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f003 f952 	bl	8006c94 <HAL_SPI_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40013000 	.word	0x40013000

08003a08 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	@ 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a10:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a1c:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2c:	4a25      	ldr	r2, [pc, #148]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a44:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <SPI1_MspInit+0xbc>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003a58:	2340      	movs	r3, #64	@ 0x40
 8003a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003a68:	2305      	movs	r3, #5
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4619      	mov	r1, r3
 8003a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a76:	f000 fd09 	bl	800448c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003a8e:	f107 0314 	add.w	r3, r7, #20
 8003a92:	4619      	mov	r1, r3
 8003a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a98:	f000 fcf8 	bl	800448c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003aac:	2305      	movs	r3, #5
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4804      	ldr	r0, [pc, #16]	@ (8003ac8 <SPI1_MspInit+0xc0>)
 8003ab8:	f000 fce8 	bl	800448c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003abc:	bf00      	nop
 8003abe:	3728      	adds	r7, #40	@ 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	48000400 	.word	0x48000400

08003acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return 1;
 8003ad0:	2301      	movs	r3, #1
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_kill>:

int _kill(int pid, int sig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ae6:	f008 fa09 	bl	800befc <__errno>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2216      	movs	r2, #22
 8003aee:	601a      	str	r2, [r3, #0]
  return -1;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_exit>:

void _exit (int status)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ffe7 	bl	8003adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <_exit+0x12>

08003b12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e00a      	b.n	8003b3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b24:	f3af 8000 	nop.w
 8003b28:	4601      	mov	r1, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	60ba      	str	r2, [r7, #8]
 8003b30:	b2ca      	uxtb	r2, r1
 8003b32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3301      	adds	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	dbf0      	blt.n	8003b24 <_read+0x12>
  }

  return len;
 8003b42:	687b      	ldr	r3, [r7, #4]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e009      	b.n	8003b72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	60ba      	str	r2, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f9c2 	bl	8003ef0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	dbf1      	blt.n	8003b5e <_write+0x12>
  }
  return len;
 8003b7a:	687b      	ldr	r3, [r7, #4]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_close>:

int _close(int file)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bac:	605a      	str	r2, [r3, #4]
  return 0;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <_isatty>:

int _isatty(int file)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bc4:	2301      	movs	r3, #1
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf4:	4a14      	ldr	r2, [pc, #80]	@ (8003c48 <_sbrk+0x5c>)
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <_sbrk+0x60>)
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c00:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <_sbrk+0x64>)
 8003c0a:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <_sbrk+0x68>)
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <_sbrk+0x64>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d207      	bcs.n	8003c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c1c:	f008 f96e 	bl	800befc <__errno>
 8003c20:	4603      	mov	r3, r0
 8003c22:	220c      	movs	r2, #12
 8003c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	e009      	b.n	8003c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <_sbrk+0x64>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <_sbrk+0x64>)
 8003c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20018000 	.word	0x20018000
 8003c4c:	00000800 	.word	0x00000800
 8003c50:	2000043c 	.word	0x2000043c
 8003c54:	20000bc0 	.word	0x20000bc0

08003c58 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <BSP_LED_Init+0x20>)
 8003c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	0800e048 	.word	0x0800e048

08003c7c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	4a06      	ldr	r2, [pc, #24]	@ (8003ca4 <BSP_LED_On+0x28>)
 8003c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8e:	2120      	movs	r1, #32
 8003c90:	2201      	movs	r2, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 feb0 	bl	80049f8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4a06      	ldr	r2, [pc, #24]	@ (8003cd0 <BSP_LED_Off+0x28>)
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	2120      	movs	r1, #32
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fe9a 	bl	80049f8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000004 	.word	0x20000004

08003cd4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	4a06      	ldr	r2, [pc, #24]	@ (8003cfc <BSP_LED_Toggle+0x28>)
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fe9c 	bl	8004a28 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000004 	.word	0x20000004

08003d00 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	71fb      	strb	r3, [r7, #7]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <BSP_PB_Init+0x94>)
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003d2e:	79bb      	ldrb	r3, [r7, #6]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d132      	bne.n	8003d9a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4a1b      	ldr	r2, [pc, #108]	@ (8003da8 <BSP_PB_Init+0x98>)
 8003d3a:	441a      	add	r2, r3
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	491b      	ldr	r1, [pc, #108]	@ (8003dac <BSP_PB_Init+0x9c>)
 8003d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f000 fb5b 	bl	8004402 <HAL_EXTI_GetHandle>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d52:	f06f 0303 	mvn.w	r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e01f      	b.n	8003d9a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4a12      	ldr	r2, [pc, #72]	@ (8003da8 <BSP_PB_Init+0x98>)
 8003d60:	1898      	adds	r0, r3, r2
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	4a12      	ldr	r2, [pc, #72]	@ (8003db0 <BSP_PB_Init+0xa0>)
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f000 fb2e 	bl	80043ce <HAL_EXTI_RegisterCallback>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d78:	f06f 0303 	mvn.w	r3, #3
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e00c      	b.n	8003d9a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003d80:	2028      	movs	r0, #40	@ 0x28
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	4a0b      	ldr	r2, [pc, #44]	@ (8003db4 <BSP_PB_Init+0xa4>)
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f000 fada 	bl	8004346 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003d92:	2328      	movs	r3, #40	@ 0x28
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 faf2 	bl	800437e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0800e04c 	.word	0x0800e04c
 8003da8:	2000000c 	.word	0x2000000c
 8003dac:	0800e050 	.word	0x0800e050
 8003db0:	0800e054 	.word	0x0800e054
 8003db4:	0800e058 	.word	0x0800e058

08003db8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <BSP_PB_GetState+0x34>)
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fdf9 	bl	80049c8 <HAL_GPIO_ReadPin>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000008 	.word	0x20000008

08003df0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fe fcc5 	bl	8002784 <BSP_PB_Callback>
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d903      	bls.n	8003e28 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003e20:	f06f 0301 	mvn.w	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e025      	b.n	8003e74 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	4914      	ldr	r1, [pc, #80]	@ (8003e80 <BSP_COM_Init+0x74>)
 8003e2e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e32:	4814      	ldr	r0, [pc, #80]	@ (8003e84 <BSP_COM_Init+0x78>)
 8003e34:	4613      	mov	r3, r2
 8003e36:	015b      	lsls	r3, r3, #5
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4403      	add	r3, r0
 8003e3e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003e40:	79fa      	ldrb	r2, [r7, #7]
 8003e42:	4613      	mov	r3, r2
 8003e44:	015b      	lsls	r3, r3, #5
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e84 <BSP_COM_Init+0x78>)
 8003e4c:	4413      	add	r3, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f86a 	bl	8003f28 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003e54:	79fa      	ldrb	r2, [r7, #7]
 8003e56:	4613      	mov	r3, r2
 8003e58:	015b      	lsls	r3, r3, #5
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4a09      	ldr	r2, [pc, #36]	@ (8003e84 <BSP_COM_Init+0x78>)
 8003e60:	4413      	add	r3, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f810 	bl	8003e88 <MX_USART2_UART_Init>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e6e:	f06f 0303 	mvn.w	r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000014 	.word	0x20000014
 8003e84:	20000440 	.word	0x20000440

08003e88 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <MX_USART2_UART_Init+0x64>)
 8003e98:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ea0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f003 fb10 	bl	80074f8 <HAL_UART_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40004400 	.word	0x40004400

08003ef0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003ef8:	4b09      	ldr	r3, [pc, #36]	@ (8003f20 <__io_putchar+0x30>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	015b      	lsls	r3, r3, #5
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4a07      	ldr	r2, [pc, #28]	@ (8003f24 <__io_putchar+0x34>)
 8003f08:	1898      	adds	r0, r3, r2
 8003f0a:	1d39      	adds	r1, r7, #4
 8003f0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f10:	2201      	movs	r2, #1
 8003f12:	f003 fb49 	bl	80075a8 <HAL_UART_Transmit>
  return ch;
 8003f16:	687b      	ldr	r3, [r7, #4]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200004c4 	.word	0x200004c4
 8003f24:	20000440 	.word	0x20000440

08003f28 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0ac      	sub	sp, #176	@ 0xb0
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	2288      	movs	r2, #136	@ 0x88
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f007 ff8c 	bl	800be56 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f42:	2300      	movs	r3, #0
 8003f44:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 f9e6 	bl	800631c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f50:	4b23      	ldr	r3, [pc, #140]	@ (8003fe0 <USART2_MspInit+0xb8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	4a22      	ldr	r2, [pc, #136]	@ (8003fe0 <USART2_MspInit+0xb8>)
 8003f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <USART2_MspInit+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f68:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe0 <USART2_MspInit+0xb8>)
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <USART2_MspInit+0xb8>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <USART2_MspInit+0xb8>)
 8003f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8003f80:	2304      	movs	r3, #4
 8003f82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8003f98:	2307      	movs	r3, #7
 8003f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8003f9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fa8:	f000 fa70 	bl	800448c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8003fac:	2308      	movs	r3, #8
 8003fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8003fc4:	2307      	movs	r3, #7
 8003fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8003fca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fd4:	f000 fa5a 	bl	800448c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	37b0      	adds	r7, #176	@ 0xb0
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003fe8:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <SystemInit+0x20>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	4a05      	ldr	r2, [pc, #20]	@ (8004004 <SystemInit+0x20>)
 8003ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004012:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <HAL_Init+0x3c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0b      	ldr	r2, [pc, #44]	@ (8004044 <HAL_Init+0x3c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800401e:	2003      	movs	r0, #3
 8004020:	f000 f986 	bl	8004330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004024:	2000      	movs	r0, #0
 8004026:	f000 f80f 	bl	8004048 <HAL_InitTick>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	71fb      	strb	r3, [r7, #7]
 8004034:	e001      	b.n	800403a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004036:	f7ff fbe5 	bl	8003804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800403a:	79fb      	ldrb	r3, [r7, #7]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40022000 	.word	0x40022000

08004048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004054:	4b17      	ldr	r3, [pc, #92]	@ (80040b4 <HAL_InitTick+0x6c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d023      	beq.n	80040a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800405c:	4b16      	ldr	r3, [pc, #88]	@ (80040b8 <HAL_InitTick+0x70>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <HAL_InitTick+0x6c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800406a:	fbb3 f3f1 	udiv	r3, r3, r1
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f99f 	bl	80043b6 <HAL_SYSTICK_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d809      	bhi.n	8004098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004084:	2200      	movs	r2, #0
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f000 f95b 	bl	8004346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <HAL_InitTick+0x74>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e007      	b.n	80040a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e004      	b.n	80040a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e001      	b.n	80040a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000020 	.word	0x20000020
 80040b8:	20000018 	.word	0x20000018
 80040bc:	2000001c 	.word	0x2000001c

080040c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_IncTick+0x20>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_IncTick+0x24>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	4a04      	ldr	r2, [pc, #16]	@ (80040e4 <HAL_IncTick+0x24>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000020 	.word	0x20000020
 80040e4:	200004c8 	.word	0x200004c8

080040e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return uwTick;
 80040ec:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <HAL_GetTick+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	200004c8 	.word	0x200004c8

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff ffee 	bl	80040e8 <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d005      	beq.n	8004126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_Delay+0x44>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004126:	bf00      	nop
 8004128:	f7ff ffde 	bl	80040e8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d8f7      	bhi.n	8004128 <HAL_Delay+0x28>
  {
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000020 	.word	0x20000020

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	@ (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	@ (80041e4 <__NVIC_EnableIRQ+0x38>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db12      	blt.n	8004220 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	490a      	ldr	r1, [pc, #40]	@ (800422c <__NVIC_DisableIRQ+0x44>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2001      	movs	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	3320      	adds	r3, #32
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004214:	f3bf 8f4f 	dsb	sy
}
 8004218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800421a:	f3bf 8f6f 	isb	sy
}
 800421e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	@ (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	@ (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	@ 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf28      	it	cs
 80042a2:	2304      	movcs	r3, #4
 80042a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d902      	bls.n	80042b4 <NVIC_EncodePriority+0x30>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b03      	subs	r3, #3
 80042b2:	e000      	b.n	80042b6 <NVIC_EncodePriority+0x32>
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	4313      	orrs	r3, r2
         );
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	@ 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fc:	d301      	bcc.n	8004302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fe:	2301      	movs	r3, #1
 8004300:	e00f      	b.n	8004322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004302:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <SysTick_Config+0x40>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430a:	210f      	movs	r1, #15
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f7ff ff8e 	bl	8004230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <SysTick_Config+0x40>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431a:	4b04      	ldr	r3, [pc, #16]	@ (800432c <SysTick_Config+0x40>)
 800431c:	2207      	movs	r2, #7
 800431e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000e010 	.word	0xe000e010

08004330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff05 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004358:	f7ff ff1a 	bl	8004190 <__NVIC_GetPriorityGrouping>
 800435c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	6978      	ldr	r0, [r7, #20]
 8004364:	f7ff ff8e 	bl	8004284 <NVIC_EncodePriority>
 8004368:	4602      	mov	r2, r0
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff5d 	bl	8004230 <__NVIC_SetPriority>
}
 8004376:	bf00      	nop
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff0d 	bl	80041ac <__NVIC_EnableIRQ>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff1d 	bl	80041e8 <__NVIC_DisableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ff94 	bl	80042ec <SysTick_Config>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	460b      	mov	r3, r1
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80043e0:	7afb      	ldrb	r3, [r7, #11]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	605a      	str	r2, [r3, #4]
      break;
 80043ec:	e002      	b.n	80043f4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
      break;
 80043f2:	bf00      	nop
  }

  return status;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e003      	b.n	800441e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2201      	movs	r2, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <HAL_EXTI_IRQHandler+0x5c>)
 8004456:	4413      	add	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4013      	ands	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4798      	blx	r3
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40010414 	.word	0x40010414

0800448c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800449a:	e17f      	b.n	800479c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8171 	beq.w	8004796 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d005      	beq.n	80044cc <HAL_GPIO_Init+0x40>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d130      	bne.n	800452e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2203      	movs	r2, #3
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004502:	2201      	movs	r2, #1
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 0201 	and.w	r2, r3, #1
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b03      	cmp	r3, #3
 8004538:	d118      	bne.n	800456c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004540:	2201      	movs	r2, #1
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f003 0201 	and.w	r2, r3, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b03      	cmp	r3, #3
 8004576:	d017      	beq.n	80045a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	2203      	movs	r2, #3
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d123      	bne.n	80045fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	08da      	lsrs	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3208      	adds	r2, #8
 80045bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	220f      	movs	r2, #15
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	08da      	lsrs	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3208      	adds	r2, #8
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	2203      	movs	r2, #3
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0203 	and.w	r2, r3, #3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80ac 	beq.w	8004796 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463e:	4b5f      	ldr	r3, [pc, #380]	@ (80047bc <HAL_GPIO_Init+0x330>)
 8004640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004642:	4a5e      	ldr	r2, [pc, #376]	@ (80047bc <HAL_GPIO_Init+0x330>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6613      	str	r3, [r2, #96]	@ 0x60
 800464a:	4b5c      	ldr	r3, [pc, #368]	@ (80047bc <HAL_GPIO_Init+0x330>)
 800464c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004656:	4a5a      	ldr	r2, [pc, #360]	@ (80047c0 <HAL_GPIO_Init+0x334>)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3302      	adds	r3, #2
 800465e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004662:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	220f      	movs	r2, #15
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004680:	d025      	beq.n	80046ce <HAL_GPIO_Init+0x242>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4f      	ldr	r2, [pc, #316]	@ (80047c4 <HAL_GPIO_Init+0x338>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <HAL_GPIO_Init+0x23e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a4e      	ldr	r2, [pc, #312]	@ (80047c8 <HAL_GPIO_Init+0x33c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d019      	beq.n	80046c6 <HAL_GPIO_Init+0x23a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a4d      	ldr	r2, [pc, #308]	@ (80047cc <HAL_GPIO_Init+0x340>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_GPIO_Init+0x236>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a4c      	ldr	r2, [pc, #304]	@ (80047d0 <HAL_GPIO_Init+0x344>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00d      	beq.n	80046be <HAL_GPIO_Init+0x232>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a4b      	ldr	r2, [pc, #300]	@ (80047d4 <HAL_GPIO_Init+0x348>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_Init+0x22e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a4a      	ldr	r2, [pc, #296]	@ (80047d8 <HAL_GPIO_Init+0x34c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_Init+0x22a>
 80046b2:	2306      	movs	r3, #6
 80046b4:	e00c      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046b6:	2307      	movs	r3, #7
 80046b8:	e00a      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046ba:	2305      	movs	r3, #5
 80046bc:	e008      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046be:	2304      	movs	r3, #4
 80046c0:	e006      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046c2:	2303      	movs	r3, #3
 80046c4:	e004      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e002      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_GPIO_Init+0x244>
 80046ce:	2300      	movs	r3, #0
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	f002 0203 	and.w	r2, r2, #3
 80046d6:	0092      	lsls	r2, r2, #2
 80046d8:	4093      	lsls	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046e0:	4937      	ldr	r1, [pc, #220]	@ (80047c0 <HAL_GPIO_Init+0x334>)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	3302      	adds	r3, #2
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ee:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <HAL_GPIO_Init+0x350>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004712:	4a32      	ldr	r2, [pc, #200]	@ (80047dc <HAL_GPIO_Init+0x350>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004718:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <HAL_GPIO_Init+0x350>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800473c:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <HAL_GPIO_Init+0x350>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004742:	4b26      	ldr	r3, [pc, #152]	@ (80047dc <HAL_GPIO_Init+0x350>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <HAL_GPIO_Init+0x350>)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800476c:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <HAL_GPIO_Init+0x350>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	43db      	mvns	r3, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004790:	4a12      	ldr	r2, [pc, #72]	@ (80047dc <HAL_GPIO_Init+0x350>)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3301      	adds	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f47f ae78 	bne.w	800449c <HAL_GPIO_Init+0x10>
  }
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40010000 	.word	0x40010000
 80047c4:	48000400 	.word	0x48000400
 80047c8:	48000800 	.word	0x48000800
 80047cc:	48000c00 	.word	0x48000c00
 80047d0:	48001000 	.word	0x48001000
 80047d4:	48001400 	.word	0x48001400
 80047d8:	48001800 	.word	0x48001800
 80047dc:	40010400 	.word	0x40010400

080047e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80047ee:	e0cd      	b.n	800498c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047f0:	2201      	movs	r2, #1
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80c0 	beq.w	8004986 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004806:	4a68      	ldr	r2, [pc, #416]	@ (80049a8 <HAL_GPIO_DeInit+0x1c8>)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	3302      	adds	r3, #2
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	220f      	movs	r2, #15
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800482e:	d025      	beq.n	800487c <HAL_GPIO_DeInit+0x9c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a5e      	ldr	r2, [pc, #376]	@ (80049ac <HAL_GPIO_DeInit+0x1cc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d01f      	beq.n	8004878 <HAL_GPIO_DeInit+0x98>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a5d      	ldr	r2, [pc, #372]	@ (80049b0 <HAL_GPIO_DeInit+0x1d0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d019      	beq.n	8004874 <HAL_GPIO_DeInit+0x94>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a5c      	ldr	r2, [pc, #368]	@ (80049b4 <HAL_GPIO_DeInit+0x1d4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_GPIO_DeInit+0x90>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a5b      	ldr	r2, [pc, #364]	@ (80049b8 <HAL_GPIO_DeInit+0x1d8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00d      	beq.n	800486c <HAL_GPIO_DeInit+0x8c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a5a      	ldr	r2, [pc, #360]	@ (80049bc <HAL_GPIO_DeInit+0x1dc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <HAL_GPIO_DeInit+0x88>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a59      	ldr	r2, [pc, #356]	@ (80049c0 <HAL_GPIO_DeInit+0x1e0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_GPIO_DeInit+0x84>
 8004860:	2306      	movs	r3, #6
 8004862:	e00c      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 8004864:	2307      	movs	r3, #7
 8004866:	e00a      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 8004868:	2305      	movs	r3, #5
 800486a:	e008      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 800486c:	2304      	movs	r3, #4
 800486e:	e006      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 8004870:	2303      	movs	r3, #3
 8004872:	e004      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 8004874:	2302      	movs	r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_GPIO_DeInit+0x9e>
 800487c:	2300      	movs	r3, #0
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	4093      	lsls	r3, r2
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	429a      	cmp	r2, r3
 800488c:	d132      	bne.n	80048f4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800488e:	4b4d      	ldr	r3, [pc, #308]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	494b      	ldr	r1, [pc, #300]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 8004898:	4013      	ands	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800489c:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	4947      	ldr	r1, [pc, #284]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80048aa:	4b46      	ldr	r3, [pc, #280]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	4944      	ldr	r1, [pc, #272]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80048b8:	4b42      	ldr	r3, [pc, #264]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	43db      	mvns	r3, r3
 80048c0:	4940      	ldr	r1, [pc, #256]	@ (80049c4 <HAL_GPIO_DeInit+0x1e4>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	220f      	movs	r2, #15
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80048d6:	4a34      	ldr	r2, [pc, #208]	@ (80049a8 <HAL_GPIO_DeInit+0x1c8>)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	43da      	mvns	r2, r3
 80048e6:	4830      	ldr	r0, [pc, #192]	@ (80049a8 <HAL_GPIO_DeInit+0x1c8>)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	400a      	ands	r2, r1
 80048ee:	3302      	adds	r3, #2
 80048f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2103      	movs	r1, #3
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	08da      	lsrs	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3208      	adds	r2, #8
 8004910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	08d2      	lsrs	r2, r2, #3
 8004928:	4019      	ands	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3208      	adds	r2, #8
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2103      	movs	r1, #3
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	2101      	movs	r1, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2103      	movs	r1, #3
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	401a      	ands	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004976:	2101      	movs	r1, #1
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	401a      	ands	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f af2b 	bne.w	80047f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40010000 	.word	0x40010000
 80049ac:	48000400 	.word	0x48000400
 80049b0:	48000800 	.word	0x48000800
 80049b4:	48000c00 	.word	0x48000c00
 80049b8:	48001000 	.word	0x48001000
 80049bc:	48001400 	.word	0x48001400
 80049c0:	48001800 	.word	0x48001800
 80049c4:	40010400 	.word	0x40010400

080049c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	e001      	b.n	80049ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a14:	e002      	b.n	8004a1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	041a      	lsls	r2, r3, #16
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	43d9      	mvns	r1, r3
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	400b      	ands	r3, r1
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	619a      	str	r2, [r3, #24]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e081      	b.n	8004b72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe fc32 	bl	80032ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	@ 0x24
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004aac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004abc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	e006      	b.n	8004ae4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ae2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d104      	bne.n	8004af6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69d9      	ldr	r1, [r3, #28]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	817b      	strh	r3, [r7, #10]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	813b      	strh	r3, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	f040 80f9 	bne.w	8004d96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_I2C_Mem_Write+0x34>
 8004baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0ed      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_I2C_Mem_Write+0x4e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0e6      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bd2:	f7ff fa89 	bl	80040e8 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2319      	movs	r3, #25
 8004bde:	2201      	movs	r2, #1
 8004be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fac3 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0d1      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2221      	movs	r2, #33	@ 0x21
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c1c:	88f8      	ldrh	r0, [r7, #6]
 8004c1e:	893a      	ldrh	r2, [r7, #8]
 8004c20:	8979      	ldrh	r1, [r7, #10]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f9d3 	bl	8004fd8 <I2C_RequestMemoryWrite>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0a9      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2bff      	cmp	r3, #255	@ 0xff
 8004c4c:	d90e      	bls.n	8004c6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	22ff      	movs	r2, #255	@ 0xff
 8004c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	8979      	ldrh	r1, [r7, #10]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fc2b 	bl	80054c0 <I2C_TransferConfig>
 8004c6a:	e00f      	b.n	8004c8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	8979      	ldrh	r1, [r7, #10]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fc1a 	bl	80054c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 faad 	bl	80051f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e07b      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d034      	beq.n	8004d44 <HAL_I2C_Mem_Write+0x1c8>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d130      	bne.n	8004d44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	@ 0x80
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fa3f 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e04d      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2bff      	cmp	r3, #255	@ 0xff
 8004d04:	d90e      	bls.n	8004d24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	22ff      	movs	r2, #255	@ 0xff
 8004d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	8979      	ldrh	r1, [r7, #10]
 8004d14:	2300      	movs	r3, #0
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fbcf 	bl	80054c0 <I2C_TransferConfig>
 8004d22:	e00f      	b.n	8004d44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	8979      	ldrh	r1, [r7, #10]
 8004d36:	2300      	movs	r3, #0
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fbbe 	bl	80054c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d19e      	bne.n	8004c8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fa8c 	bl	8005270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e01a      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2220      	movs	r2, #32
 8004d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <HAL_I2C_Mem_Write+0x224>)
 8004d76:	400b      	ands	r3, r1
 8004d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	fe00e800 	.word	0xfe00e800

08004da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	461a      	mov	r2, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	817b      	strh	r3, [r7, #10]
 8004db6:	460b      	mov	r3, r1
 8004db8:	813b      	strh	r3, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	f040 80fd 	bne.w	8004fc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_I2C_Mem_Read+0x34>
 8004dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0f1      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_Mem_Read+0x4e>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0ea      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dfa:	f7ff f975 	bl	80040e8 <HAL_GetTick>
 8004dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2319      	movs	r3, #25
 8004e06:	2201      	movs	r2, #1
 8004e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f9af 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0d5      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2222      	movs	r2, #34	@ 0x22
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2240      	movs	r2, #64	@ 0x40
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e44:	88f8      	ldrh	r0, [r7, #6]
 8004e46:	893a      	ldrh	r2, [r7, #8]
 8004e48:	8979      	ldrh	r1, [r7, #10]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4603      	mov	r3, r0
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f913 	bl	8005080 <I2C_RequestMemoryRead>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0ad      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2bff      	cmp	r3, #255	@ 0xff
 8004e74:	d90e      	bls.n	8004e94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	22ff      	movs	r2, #255	@ 0xff
 8004e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	8979      	ldrh	r1, [r7, #10]
 8004e84:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_I2C_Mem_Read+0x22c>)
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fb17 	bl	80054c0 <I2C_TransferConfig>
 8004e92:	e00f      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	8979      	ldrh	r1, [r7, #10]
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd0 <HAL_I2C_Mem_Read+0x22c>)
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fb06 	bl	80054c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f956 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e07c      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d034      	beq.n	8004f74 <HAL_I2C_Mem_Read+0x1d0>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d130      	bne.n	8004f74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2180      	movs	r1, #128	@ 0x80
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f927 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e04d      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2bff      	cmp	r3, #255	@ 0xff
 8004f34:	d90e      	bls.n	8004f54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	22ff      	movs	r2, #255	@ 0xff
 8004f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	8979      	ldrh	r1, [r7, #10]
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fab7 	bl	80054c0 <I2C_TransferConfig>
 8004f52:	e00f      	b.n	8004f74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	8979      	ldrh	r1, [r7, #10]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 faa6 	bl	80054c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d19a      	bne.n	8004eb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f974 	bl	8005270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e01a      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2220      	movs	r2, #32
 8004f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <HAL_I2C_Mem_Read+0x230>)
 8004fa6:	400b      	ands	r3, r1
 8004fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e000      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004fc6:	2302      	movs	r3, #2
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	80002400 	.word	0x80002400
 8004fd4:	fe00e800 	.word	0xfe00e800

08004fd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	817b      	strh	r3, [r7, #10]
 8004fea:	460b      	mov	r3, r1
 8004fec:	813b      	strh	r3, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	8979      	ldrh	r1, [r7, #10]
 8004ff8:	4b20      	ldr	r3, [pc, #128]	@ (800507c <I2C_RequestMemoryWrite+0xa4>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fa5d 	bl	80054c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f8f0 	bl	80051f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e02c      	b.n	8005074 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005020:	893b      	ldrh	r3, [r7, #8]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	629a      	str	r2, [r3, #40]	@ 0x28
 800502a:	e015      	b.n	8005058 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	b29b      	uxth	r3, r3
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	69b9      	ldr	r1, [r7, #24]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f8d6 	bl	80051f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e012      	b.n	8005074 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800504e:	893b      	ldrh	r3, [r7, #8]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2200      	movs	r2, #0
 8005060:	2180      	movs	r1, #128	@ 0x80
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f884 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	80002000 	.word	0x80002000

08005080 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	461a      	mov	r2, r3
 800508e:	4603      	mov	r3, r0
 8005090:	817b      	strh	r3, [r7, #10]
 8005092:	460b      	mov	r3, r1
 8005094:	813b      	strh	r3, [r7, #8]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	8979      	ldrh	r1, [r7, #10]
 80050a0:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <I2C_RequestMemoryRead+0xa4>)
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa0a 	bl	80054c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	69b9      	ldr	r1, [r7, #24]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f89d 	bl	80051f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e02c      	b.n	800511a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050c6:	893b      	ldrh	r3, [r7, #8]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80050d0:	e015      	b.n	80050fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050d2:	893b      	ldrh	r3, [r7, #8]
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	69b9      	ldr	r1, [r7, #24]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f883 	bl	80051f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e012      	b.n	800511a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050f4:	893b      	ldrh	r3, [r7, #8]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2200      	movs	r2, #0
 8005106:	2140      	movs	r1, #64	@ 0x40
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f831 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	80002000 	.word	0x80002000

08005128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b02      	cmp	r3, #2
 800513c:	d103      	bne.n	8005146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d007      	beq.n	8005164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	619a      	str	r2, [r3, #24]
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005180:	e022      	b.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d01e      	beq.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fe ffad 	bl	80040e8 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d113      	bne.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e00f      	b.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d0cd      	beq.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051fc:	e02c      	b.n	8005258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f870 	bl	80052e8 <I2C_IsErrorOccurred>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e02a      	b.n	8005268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d01e      	beq.n	8005258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fe ff65 	bl	80040e8 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d113      	bne.n	8005258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e007      	b.n	8005268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d1cb      	bne.n	80051fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800527c:	e028      	b.n	80052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f830 	bl	80052e8 <I2C_IsErrorOccurred>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e026      	b.n	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fe ff29 	bl	80040e8 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d113      	bne.n	80052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e007      	b.n	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d1cf      	bne.n	800527e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	@ 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d075      	beq.n	8005400 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2210      	movs	r2, #16
 800531a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800531c:	e056      	b.n	80053cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d052      	beq.n	80053cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fe fedf 	bl	80040e8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_IsErrorOccurred+0x54>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d147      	bne.n	80053cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800534e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800535e:	d12e      	bne.n	80053be <I2C_IsErrorOccurred+0xd6>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005366:	d02a      	beq.n	80053be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b20      	cmp	r3, #32
 800536c:	d027      	beq.n	80053be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800537c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800537e:	f7fe feb3 	bl	80040e8 <HAL_GetTick>
 8005382:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005384:	e01b      	b.n	80053be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005386:	f7fe feaf 	bl	80040e8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b19      	cmp	r3, #25
 8005392:	d914      	bls.n	80053be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d1dc      	bne.n	8005386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d003      	beq.n	80053e2 <I2C_IsErrorOccurred+0xfa>
 80053da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d09d      	beq.n	800531e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2220      	movs	r2, #32
 80053f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f043 0304 	orr.w	r3, r3, #4
 80053f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	f043 0308 	orr.w	r3, r3, #8
 800543a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005466:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800546e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01c      	beq.n	80054b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fe56 	bl	8005128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <I2C_IsErrorOccurred+0x1d4>)
 8005488:	400b      	ands	r3, r1
 800548a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	431a      	orrs	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3728      	adds	r7, #40	@ 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	fe00e800 	.word	0xfe00e800

080054c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	817b      	strh	r3, [r7, #10]
 80054ce:	4613      	mov	r3, r2
 80054d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d2:	897b      	ldrh	r3, [r7, #10]
 80054d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054d8:	7a7b      	ldrb	r3, [r7, #9]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	0d5b      	lsrs	r3, r3, #21
 80054fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054fe:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <I2C_TransferConfig+0x60>)
 8005500:	430b      	orrs	r3, r1
 8005502:	43db      	mvns	r3, r3
 8005504:	ea02 0103 	and.w	r1, r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	03ff63ff 	.word	0x03ff63ff

08005524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b20      	cmp	r3, #32
 8005538:	d138      	bne.n	80055ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005544:	2302      	movs	r3, #2
 8005546:	e032      	b.n	80055ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	@ 0x24
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d139      	bne.n	8005644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055da:	2302      	movs	r3, #2
 80055dc:	e033      	b.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2224      	movs	r2, #36	@ 0x24
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800560c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005658:	4b04      	ldr	r3, [pc, #16]	@ (800566c <HAL_PWREx_GetVoltageRange+0x18>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40007000 	.word	0x40007000

08005670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567e:	d130      	bne.n	80056e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005680:	4b23      	ldr	r3, [pc, #140]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568c:	d038      	beq.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800568e:	4b20      	ldr	r3, [pc, #128]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005696:	4a1e      	ldr	r2, [pc, #120]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800569c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800569e:	4b1d      	ldr	r3, [pc, #116]	@ (8005714 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2232      	movs	r2, #50	@ 0x32
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	0c9b      	lsrs	r3, r3, #18
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056b4:	e002      	b.n	80056bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c8:	d102      	bne.n	80056d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f2      	bne.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d110      	bne.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e00f      	b.n	8005702 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	d007      	beq.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056f0:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056f8:	4a05      	ldr	r2, [pc, #20]	@ (8005710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40007000 	.word	0x40007000
 8005714:	20000018 	.word	0x20000018
 8005718:	431bde83 	.word	0x431bde83

0800571c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e3ca      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572e:	4b97      	ldr	r3, [pc, #604]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005738:	4b94      	ldr	r3, [pc, #592]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80e4 	beq.w	8005918 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_RCC_OscConfig+0x4a>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b0c      	cmp	r3, #12
 800575a:	f040 808b 	bne.w	8005874 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 8087 	bne.w	8005874 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005766:	4b89      	ldr	r3, [pc, #548]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCC_OscConfig+0x62>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e3a2      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	4b82      	ldr	r3, [pc, #520]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <HAL_RCC_OscConfig+0x7c>
 800578e:	4b7f      	ldr	r3, [pc, #508]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005796:	e005      	b.n	80057a4 <HAL_RCC_OscConfig+0x88>
 8005798:	4b7c      	ldr	r3, [pc, #496]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800579a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d223      	bcs.n	80057f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fd55 	bl	800625c <RCC_SetFlashLatencyFromMSIRange>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e383      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057bc:	4b73      	ldr	r3, [pc, #460]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a72      	ldr	r2, [pc, #456]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057c2:	f043 0308 	orr.w	r3, r3, #8
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4b70      	ldr	r3, [pc, #448]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	496d      	ldr	r1, [pc, #436]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057da:	4b6c      	ldr	r3, [pc, #432]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	4968      	ldr	r1, [pc, #416]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
 80057ee:	e025      	b.n	800583c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f0:	4b66      	ldr	r3, [pc, #408]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a65      	ldr	r2, [pc, #404]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057f6:	f043 0308 	orr.w	r3, r3, #8
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b63      	ldr	r3, [pc, #396]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	4960      	ldr	r1, [pc, #384]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800580e:	4b5f      	ldr	r3, [pc, #380]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	495b      	ldr	r1, [pc, #364]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800581e:	4313      	orrs	r3, r2
 8005820:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fd15 	bl	800625c <RCC_SetFlashLatencyFromMSIRange>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e343      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800583c:	f000 fc4a 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b52      	ldr	r3, [pc, #328]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	4950      	ldr	r1, [pc, #320]	@ (8005990 <HAL_RCC_OscConfig+0x274>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	4a4e      	ldr	r2, [pc, #312]	@ (8005994 <HAL_RCC_OscConfig+0x278>)
 800585a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800585c:	4b4e      	ldr	r3, [pc, #312]	@ (8005998 <HAL_RCC_OscConfig+0x27c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe fbf1 	bl	8004048 <HAL_InitTick>
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d052      	beq.n	8005916 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	e327      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d032      	beq.n	80058e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800587c:	4b43      	ldr	r3, [pc, #268]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a42      	ldr	r2, [pc, #264]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005888:	f7fe fc2e 	bl	80040e8 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005890:	f7fe fc2a 	bl	80040e8 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e310      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058a2:	4b3a      	ldr	r3, [pc, #232]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058ae:	4b37      	ldr	r3, [pc, #220]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a36      	ldr	r2, [pc, #216]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058b4:	f043 0308 	orr.w	r3, r3, #8
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b34      	ldr	r3, [pc, #208]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	4931      	ldr	r1, [pc, #196]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058cc:	4b2f      	ldr	r3, [pc, #188]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	492c      	ldr	r1, [pc, #176]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
 80058e0:	e01a      	b.n	8005918 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058e2:	4b2a      	ldr	r3, [pc, #168]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a29      	ldr	r2, [pc, #164]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058ee:	f7fe fbfb 	bl	80040e8 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058f6:	f7fe fbf7 	bl	80040e8 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e2dd      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005908:	4b20      	ldr	r3, [pc, #128]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x1da>
 8005914:	e000      	b.n	8005918 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005916:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d074      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b08      	cmp	r3, #8
 8005928:	d005      	beq.n	8005936 <HAL_RCC_OscConfig+0x21a>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d10e      	bne.n	800594e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d10b      	bne.n	800594e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d064      	beq.n	8005a0c <HAL_RCC_OscConfig+0x2f0>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d160      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e2ba      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005956:	d106      	bne.n	8005966 <HAL_RCC_OscConfig+0x24a>
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a0b      	ldr	r2, [pc, #44]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800595e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e026      	b.n	80059b4 <HAL_RCC_OscConfig+0x298>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800596e:	d115      	bne.n	800599c <HAL_RCC_OscConfig+0x280>
 8005970:	4b06      	ldr	r3, [pc, #24]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a05      	ldr	r2, [pc, #20]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	4b03      	ldr	r3, [pc, #12]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a02      	ldr	r2, [pc, #8]	@ (800598c <HAL_RCC_OscConfig+0x270>)
 8005982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e014      	b.n	80059b4 <HAL_RCC_OscConfig+0x298>
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	0800e05c 	.word	0x0800e05c
 8005994:	20000018 	.word	0x20000018
 8005998:	2000001c 	.word	0x2000001c
 800599c:	4ba0      	ldr	r3, [pc, #640]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a9f      	ldr	r2, [pc, #636]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b9d      	ldr	r3, [pc, #628]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a9c      	ldr	r2, [pc, #624]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 80059ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d013      	beq.n	80059e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7fe fb94 	bl	80040e8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c4:	f7fe fb90 	bl	80040e8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	@ 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e276      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059d6:	4b92      	ldr	r3, [pc, #584]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x2a8>
 80059e2:	e014      	b.n	8005a0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fe fb80 	bl	80040e8 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fe fb7c 	bl	80040e8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	@ 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e262      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059fe:	4b88      	ldr	r3, [pc, #544]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x2d0>
 8005a0a:	e000      	b.n	8005a0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d060      	beq.n	8005adc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_OscConfig+0x310>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d116      	bne.n	8005a5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_OscConfig+0x328>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e23f      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a44:	4b76      	ldr	r3, [pc, #472]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	4973      	ldr	r1, [pc, #460]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a58:	e040      	b.n	8005adc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d023      	beq.n	8005aaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a62:	4b6f      	ldr	r3, [pc, #444]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6e      	ldr	r2, [pc, #440]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fe fb3b 	bl	80040e8 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a76:	f7fe fb37 	bl	80040e8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e21d      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a88:	4b65      	ldr	r3, [pc, #404]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a94:	4b62      	ldr	r3, [pc, #392]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	061b      	lsls	r3, r3, #24
 8005aa2:	495f      	ldr	r1, [pc, #380]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]
 8005aa8:	e018      	b.n	8005adc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a5c      	ldr	r2, [pc, #368]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fe fb17 	bl	80040e8 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005abe:	f7fe fb13 	bl	80040e8 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e1f9      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad0:	4b53      	ldr	r3, [pc, #332]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f0      	bne.n	8005abe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d03c      	beq.n	8005b62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af0:	4b4b      	ldr	r3, [pc, #300]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af6:	4a4a      	ldr	r2, [pc, #296]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fe faf2 	bl	80040e8 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fe faee 	bl	80040e8 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e1d4      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b1a:	4b41      	ldr	r3, [pc, #260]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0ef      	beq.n	8005b08 <HAL_RCC_OscConfig+0x3ec>
 8005b28:	e01b      	b.n	8005b62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b30:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fe fad5 	bl	80040e8 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b42:	f7fe fad1 	bl	80040e8 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e1b7      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b54:	4b32      	ldr	r3, [pc, #200]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1ef      	bne.n	8005b42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 80a6 	beq.w	8005cbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b70:	2300      	movs	r3, #0
 8005b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b74:	4b2a      	ldr	r3, [pc, #168]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10d      	bne.n	8005b9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b80:	4b27      	ldr	r3, [pc, #156]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	4a26      	ldr	r2, [pc, #152]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b8c:	4b24      	ldr	r3, [pc, #144]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b9c:	4b21      	ldr	r3, [pc, #132]	@ (8005c24 <HAL_RCC_OscConfig+0x508>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d118      	bne.n	8005bda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c24 <HAL_RCC_OscConfig+0x508>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <HAL_RCC_OscConfig+0x508>)
 8005bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb4:	f7fe fa98 	bl	80040e8 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbc:	f7fe fa94 	bl	80040e8 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e17a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bce:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <HAL_RCC_OscConfig+0x508>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d108      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x4d8>
 8005be2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be8:	4a0d      	ldr	r2, [pc, #52]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bf2:	e029      	b.n	8005c48 <HAL_RCC_OscConfig+0x52c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b05      	cmp	r3, #5
 8005bfa:	d115      	bne.n	8005c28 <HAL_RCC_OscConfig+0x50c>
 8005bfc:	4b08      	ldr	r3, [pc, #32]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	4a07      	ldr	r2, [pc, #28]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005c04:	f043 0304 	orr.w	r3, r3, #4
 8005c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c0c:	4b04      	ldr	r3, [pc, #16]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c12:	4a03      	ldr	r2, [pc, #12]	@ (8005c20 <HAL_RCC_OscConfig+0x504>)
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c1c:	e014      	b.n	8005c48 <HAL_RCC_OscConfig+0x52c>
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40007000 	.word	0x40007000
 8005c28:	4b9c      	ldr	r3, [pc, #624]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2e:	4a9b      	ldr	r2, [pc, #620]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c38:	4b98      	ldr	r3, [pc, #608]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	4a97      	ldr	r2, [pc, #604]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d016      	beq.n	8005c7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c50:	f7fe fa4a 	bl	80040e8 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c56:	e00a      	b.n	8005c6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c58:	f7fe fa46 	bl	80040e8 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e12a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6e:	4b8b      	ldr	r3, [pc, #556]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0ed      	beq.n	8005c58 <HAL_RCC_OscConfig+0x53c>
 8005c7c:	e015      	b.n	8005caa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fe fa33 	bl	80040e8 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fe fa2f 	bl	80040e8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e113      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c9c:	4b7f      	ldr	r3, [pc, #508]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ed      	bne.n	8005c86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d105      	bne.n	8005cbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb0:	4b7a      	ldr	r3, [pc, #488]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb4:	4a79      	ldr	r2, [pc, #484]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80fe 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	f040 80d0 	bne.w	8005e70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005cd0:	4b72      	ldr	r3, [pc, #456]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 0203 	and.w	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d130      	bne.n	8005d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d127      	bne.n	8005d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d11f      	bne.n	8005d46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d10:	2a07      	cmp	r2, #7
 8005d12:	bf14      	ite	ne
 8005d14:	2201      	movne	r2, #1
 8005d16:	2200      	moveq	r2, #0
 8005d18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d113      	bne.n	8005d46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d06e      	beq.n	8005e24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d069      	beq.n	8005e20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d4c:	4b53      	ldr	r3, [pc, #332]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d105      	bne.n	8005d64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d58:	4b50      	ldr	r3, [pc, #320]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0ad      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d68:	4b4c      	ldr	r3, [pc, #304]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d74:	f7fe f9b8 	bl	80040e8 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7c:	f7fe f9b4 	bl	80040e8 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e09a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d8e:	4b43      	ldr	r3, [pc, #268]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d9a:	4b40      	ldr	r3, [pc, #256]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	4b40      	ldr	r3, [pc, #256]	@ (8005ea0 <HAL_RCC_OscConfig+0x784>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005daa:	3a01      	subs	r2, #1
 8005dac:	0112      	lsls	r2, r2, #4
 8005dae:	4311      	orrs	r1, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005db4:	0212      	lsls	r2, r2, #8
 8005db6:	4311      	orrs	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005dbc:	0852      	lsrs	r2, r2, #1
 8005dbe:	3a01      	subs	r2, #1
 8005dc0:	0552      	lsls	r2, r2, #21
 8005dc2:	4311      	orrs	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005dc8:	0852      	lsrs	r2, r2, #1
 8005dca:	3a01      	subs	r2, #1
 8005dcc:	0652      	lsls	r2, r2, #25
 8005dce:	4311      	orrs	r1, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005dd4:	0912      	lsrs	r2, r2, #4
 8005dd6:	0452      	lsls	r2, r2, #17
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	4930      	ldr	r1, [pc, #192]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005de0:	4b2e      	ldr	r3, [pc, #184]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dec:	4b2b      	ldr	r3, [pc, #172]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005df6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005df8:	f7fe f976 	bl	80040e8 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fe f972 	bl	80040e8 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e058      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e12:	4b22      	ldr	r3, [pc, #136]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e1e:	e050      	b.n	8005ec2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e04f      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e24:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d148      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e30:	4b1a      	ldr	r3, [pc, #104]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e3c:	4b17      	ldr	r3, [pc, #92]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a16      	ldr	r2, [pc, #88]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e48:	f7fe f94e 	bl	80040e8 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fe f94a 	bl	80040e8 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e030      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e62:	4b0e      	ldr	r3, [pc, #56]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0x734>
 8005e6e:	e028      	b.n	8005ec2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b0c      	cmp	r3, #12
 8005e74:	d023      	beq.n	8005ebe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e76:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <HAL_RCC_OscConfig+0x780>)
 8005e7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fe f931 	bl	80040e8 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e88:	e00c      	b.n	8005ea4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8a:	f7fe f92d 	bl	80040e8 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d905      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e013      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <HAL_RCC_OscConfig+0x7b0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ec      	bne.n	8005e8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005eb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <HAL_RCC_OscConfig+0x7b0>)
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	4905      	ldr	r1, [pc, #20]	@ (8005ecc <HAL_RCC_OscConfig+0x7b0>)
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <HAL_RCC_OscConfig+0x7b4>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
 8005ebc:	e001      	b.n	8005ec2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	feeefffc 	.word	0xfeeefffc

08005ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0e7      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b75      	ldr	r3, [pc, #468]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d910      	bls.n	8005f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b72      	ldr	r3, [pc, #456]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 0207 	bic.w	r2, r3, #7
 8005efe:	4970      	ldr	r1, [pc, #448]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b6e      	ldr	r3, [pc, #440]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0cf      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d010      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	4b66      	ldr	r3, [pc, #408]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d908      	bls.n	8005f46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f34:	4b63      	ldr	r3, [pc, #396]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4960      	ldr	r1, [pc, #384]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04c      	beq.n	8005fec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d121      	bne.n	8005faa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0a6      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f72:	4b54      	ldr	r3, [pc, #336]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d115      	bne.n	8005faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e09a      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e08e      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e086      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005faa:	4b46      	ldr	r3, [pc, #280]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 0203 	bic.w	r2, r3, #3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4943      	ldr	r1, [pc, #268]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbc:	f7fe f894 	bl	80040e8 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc4:	f7fe f890 	bl	80040e8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e06e      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fda:	4b3a      	ldr	r3, [pc, #232]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 020c 	and.w	r2, r3, #12
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d1eb      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d010      	beq.n	800601a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006004:	429a      	cmp	r2, r3
 8006006:	d208      	bcs.n	800601a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006008:	4b2e      	ldr	r3, [pc, #184]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	492b      	ldr	r1, [pc, #172]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800601a:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d210      	bcs.n	800604a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006028:	4b25      	ldr	r3, [pc, #148]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f023 0207 	bic.w	r2, r3, #7
 8006030:	4923      	ldr	r1, [pc, #140]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006038:	4b21      	ldr	r3, [pc, #132]	@ (80060c0 <HAL_RCC_ClockConfig+0x1ec>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d001      	beq.n	800604a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e036      	b.n	80060b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006056:	4b1b      	ldr	r3, [pc, #108]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	4918      	ldr	r1, [pc, #96]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006074:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4910      	ldr	r1, [pc, #64]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006088:	f000 f824 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f0>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	490b      	ldr	r1, [pc, #44]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f4>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
 80060a4:	4a09      	ldr	r2, [pc, #36]	@ (80060cc <HAL_RCC_ClockConfig+0x1f8>)
 80060a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060a8:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <HAL_RCC_ClockConfig+0x1fc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fd ffcb 	bl	8004048 <HAL_InitTick>
 80060b2:	4603      	mov	r3, r0
 80060b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80060b6:	7afb      	ldrb	r3, [r7, #11]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40022000 	.word	0x40022000
 80060c4:	40021000 	.word	0x40021000
 80060c8:	0800e05c 	.word	0x0800e05c
 80060cc:	20000018 	.word	0x20000018
 80060d0:	2000001c 	.word	0x2000001c

080060d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b089      	sub	sp, #36	@ 0x24
 80060d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b3e      	ldr	r3, [pc, #248]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ec:	4b3b      	ldr	r3, [pc, #236]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0x34>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b0c      	cmp	r3, #12
 8006100:	d121      	bne.n	8006146 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d11e      	bne.n	8006146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006108:	4b34      	ldr	r3, [pc, #208]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006114:	4b31      	ldr	r3, [pc, #196]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 8006116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	e005      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006124:	4b2d      	ldr	r3, [pc, #180]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006130:	4a2b      	ldr	r2, [pc, #172]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006144:	e00a      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d102      	bne.n	8006152 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800614c:	4b25      	ldr	r3, [pc, #148]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	e004      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b08      	cmp	r3, #8
 8006156:	d101      	bne.n	800615c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006158:	4b23      	ldr	r3, [pc, #140]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800615a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b0c      	cmp	r3, #12
 8006160:	d134      	bne.n	80061cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006162:	4b1e      	ldr	r3, [pc, #120]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d003      	beq.n	800617a <HAL_RCC_GetSysClockFreq+0xa6>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d003      	beq.n	8006180 <HAL_RCC_GetSysClockFreq+0xac>
 8006178:	e005      	b.n	8006186 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800617a:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800617c:	617b      	str	r3, [r7, #20]
      break;
 800617e:	e005      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006180:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006182:	617b      	str	r3, [r7, #20]
      break;
 8006184:	e002      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	617b      	str	r3, [r7, #20]
      break;
 800618a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800618c:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	3301      	adds	r3, #1
 8006198:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800619a:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	fb03 f202 	mul.w	r2, r3, r2
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061b2:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x108>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	0e5b      	lsrs	r3, r3, #25
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	3301      	adds	r3, #1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80061cc:	69bb      	ldr	r3, [r7, #24]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3724      	adds	r7, #36	@ 0x24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40021000 	.word	0x40021000
 80061e0:	0800e074 	.word	0x0800e074
 80061e4:	00f42400 	.word	0x00f42400
 80061e8:	007a1200 	.word	0x007a1200

080061ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f0:	4b03      	ldr	r3, [pc, #12]	@ (8006200 <HAL_RCC_GetHCLKFreq+0x14>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000018 	.word	0x20000018

08006204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006208:	f7ff fff0 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 800620c:	4602      	mov	r2, r0
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4904      	ldr	r1, [pc, #16]	@ (800622c <HAL_RCC_GetPCLK1Freq+0x28>)
 800621a:	5ccb      	ldrb	r3, [r1, r3]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006224:	4618      	mov	r0, r3
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	0800e06c 	.word	0x0800e06c

08006230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006234:	f7ff ffda 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	0adb      	lsrs	r3, r3, #11
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	4904      	ldr	r1, [pc, #16]	@ (8006258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021000 	.word	0x40021000
 8006258:	0800e06c 	.word	0x0800e06c

0800625c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006268:	4b2a      	ldr	r3, [pc, #168]	@ (8006314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800626a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006274:	f7ff f9ee 	bl	8005654 <HAL_PWREx_GetVoltageRange>
 8006278:	6178      	str	r0, [r7, #20]
 800627a:	e014      	b.n	80062a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800627c:	4b25      	ldr	r3, [pc, #148]	@ (8006314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006280:	4a24      	ldr	r2, [pc, #144]	@ (8006314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006286:	6593      	str	r3, [r2, #88]	@ 0x58
 8006288:	4b22      	ldr	r3, [pc, #136]	@ (8006314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800628a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006294:	f7ff f9de 	bl	8005654 <HAL_PWREx_GetVoltageRange>
 8006298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800629a:	4b1e      	ldr	r3, [pc, #120]	@ (8006314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629e:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ac:	d10b      	bne.n	80062c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b80      	cmp	r3, #128	@ 0x80
 80062b2:	d919      	bls.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80062b8:	d902      	bls.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062ba:	2302      	movs	r3, #2
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e013      	b.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062c0:	2301      	movs	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	e010      	b.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b80      	cmp	r3, #128	@ 0x80
 80062ca:	d902      	bls.n	80062d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062cc:	2303      	movs	r3, #3
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	e00a      	b.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b80      	cmp	r3, #128	@ 0x80
 80062d6:	d102      	bne.n	80062de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062d8:	2302      	movs	r3, #2
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	e004      	b.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b70      	cmp	r3, #112	@ 0x70
 80062e2:	d101      	bne.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062e4:	2301      	movs	r3, #1
 80062e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f023 0207 	bic.w	r2, r3, #7
 80062f0:	4909      	ldr	r1, [pc, #36]	@ (8006318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80062f8:	4b07      	ldr	r3, [pc, #28]	@ (8006318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	429a      	cmp	r2, r3
 8006304:	d001      	beq.n	800630a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40021000 	.word	0x40021000
 8006318:	40022000 	.word	0x40022000

0800631c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006324:	2300      	movs	r3, #0
 8006326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006328:	2300      	movs	r3, #0
 800632a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006334:	2b00      	cmp	r3, #0
 8006336:	d041      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800633c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006340:	d02a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006342:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006346:	d824      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006348:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800634c:	d008      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800634e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006352:	d81e      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800635c:	d010      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800635e:	e018      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006360:	4b86      	ldr	r3, [pc, #536]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	4a85      	ldr	r2, [pc, #532]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800636a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800636c:	e015      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3304      	adds	r3, #4
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fabb 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800637e:	e00c      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3320      	adds	r3, #32
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fba6 	bl	8006ad8 <RCCEx_PLLSAI2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006390:	e003      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	74fb      	strb	r3, [r7, #19]
      break;
 8006396:	e000      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800639a:	7cfb      	ldrb	r3, [r7, #19]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063a0:	4b76      	ldr	r3, [pc, #472]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ae:	4973      	ldr	r1, [pc, #460]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80063b6:	e001      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d041      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063d0:	d02a      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80063d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063d6:	d824      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063dc:	d008      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e2:	d81e      	bhi.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80063e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063ec:	d010      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063ee:	e018      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063f0:	4b62      	ldr	r3, [pc, #392]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a61      	ldr	r2, [pc, #388]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063fc:	e015      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	2100      	movs	r1, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fa73 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800640e:	e00c      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3320      	adds	r3, #32
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fb5e 	bl	8006ad8 <RCCEx_PLLSAI2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006420:	e003      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	74fb      	strb	r3, [r7, #19]
      break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642a:	7cfb      	ldrb	r3, [r7, #19]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006430:	4b52      	ldr	r3, [pc, #328]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006436:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800643e:	494f      	ldr	r1, [pc, #316]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006446:	e001      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80a0 	beq.w	800659a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800645a:	2300      	movs	r3, #0
 800645c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800645e:	4b47      	ldr	r3, [pc, #284]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00d      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006474:	4b41      	ldr	r3, [pc, #260]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006478:	4a40      	ldr	r2, [pc, #256]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006480:	4b3e      	ldr	r3, [pc, #248]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648c:	2301      	movs	r3, #1
 800648e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006490:	4b3b      	ldr	r3, [pc, #236]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a3a      	ldr	r2, [pc, #232]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800649c:	f7fd fe24 	bl	80040e8 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064a2:	e009      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a4:	f7fd fe20 	bl	80040e8 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d902      	bls.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	74fb      	strb	r3, [r7, #19]
        break;
 80064b6:	e005      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064b8:	4b31      	ldr	r3, [pc, #196]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0ef      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d15c      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064ca:	4b2c      	ldr	r3, [pc, #176]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01f      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d019      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064e8:	4b24      	ldr	r3, [pc, #144]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064f4:	4b21      	ldr	r3, [pc, #132]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fa:	4a20      	ldr	r2, [pc, #128]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006504:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	4a1c      	ldr	r2, [pc, #112]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800650c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006514:	4a19      	ldr	r2, [pc, #100]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006526:	f7fd fddf 	bl	80040e8 <HAL_GetTick>
 800652a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652c:	e00b      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fd fddb 	bl	80040e8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800653c:	4293      	cmp	r3, r2
 800653e:	d902      	bls.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	74fb      	strb	r3, [r7, #19]
            break;
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006546:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ec      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10c      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655a:	4b08      	ldr	r3, [pc, #32]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656a:	4904      	ldr	r1, [pc, #16]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006572:	e009      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
 8006578:	e006      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800657a:	bf00      	nop
 800657c:	40021000 	.word	0x40021000
 8006580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	7cfb      	ldrb	r3, [r7, #19]
 8006586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006588:	7c7b      	ldrb	r3, [r7, #17]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d105      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800658e:	4b9e      	ldr	r3, [pc, #632]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006592:	4a9d      	ldr	r2, [pc, #628]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006598:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065a6:	4b98      	ldr	r3, [pc, #608]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f023 0203 	bic.w	r2, r3, #3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	4994      	ldr	r1, [pc, #592]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065c8:	4b8f      	ldr	r3, [pc, #572]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ce:	f023 020c 	bic.w	r2, r3, #12
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	498c      	ldr	r1, [pc, #560]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065ea:	4b87      	ldr	r3, [pc, #540]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	4983      	ldr	r1, [pc, #524]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800660c:	4b7e      	ldr	r3, [pc, #504]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	497b      	ldr	r1, [pc, #492]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800662e:	4b76      	ldr	r3, [pc, #472]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663c:	4972      	ldr	r1, [pc, #456]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006650:	4b6d      	ldr	r3, [pc, #436]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800665e:	496a      	ldr	r1, [pc, #424]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006672:	4b65      	ldr	r3, [pc, #404]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006680:	4961      	ldr	r1, [pc, #388]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006694:	4b5c      	ldr	r3, [pc, #368]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a2:	4959      	ldr	r1, [pc, #356]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066b6:	4b54      	ldr	r3, [pc, #336]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	4950      	ldr	r1, [pc, #320]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	4948      	ldr	r1, [pc, #288]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066fa:	4b43      	ldr	r3, [pc, #268]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006708:	493f      	ldr	r1, [pc, #252]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d028      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800671c:	4b3a      	ldr	r3, [pc, #232]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800672a:	4937      	ldr	r1, [pc, #220]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800673a:	d106      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800673c:	4b32      	ldr	r3, [pc, #200]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a31      	ldr	r2, [pc, #196]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006746:	60d3      	str	r3, [r2, #12]
 8006748:	e011      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800674e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006752:	d10c      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	2101      	movs	r1, #1
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f8c8 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006764:	7cfb      	ldrb	r3, [r7, #19]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800676a:	7cfb      	ldrb	r3, [r7, #19]
 800676c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d028      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006780:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006788:	491f      	ldr	r1, [pc, #124]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006798:	d106      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800679a:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4a1a      	ldr	r2, [pc, #104]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067a4:	60d3      	str	r3, [r2, #12]
 80067a6:	e011      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067b0:	d10c      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	2101      	movs	r1, #1
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f899 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067c2:	7cfb      	ldrb	r3, [r7, #19]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02b      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e6:	4908      	ldr	r1, [pc, #32]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067f6:	d109      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f8:	4b03      	ldr	r3, [pc, #12]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4a02      	ldr	r2, [pc, #8]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006802:	60d3      	str	r3, [r2, #12]
 8006804:	e014      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006814:	d10c      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	2101      	movs	r1, #1
 800681c:	4618      	mov	r0, r3
 800681e:	f000 f867 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006826:	7cfb      	ldrb	r3, [r7, #19]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02f      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800683c:	4b2b      	ldr	r3, [pc, #172]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006842:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800684a:	4928      	ldr	r1, [pc, #160]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800685a:	d10d      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3304      	adds	r3, #4
 8006860:	2102      	movs	r1, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f844 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800686c:	7cfb      	ldrb	r3, [r7, #19]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d014      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006872:	7cfb      	ldrb	r3, [r7, #19]
 8006874:	74bb      	strb	r3, [r7, #18]
 8006876:	e011      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800687c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006880:	d10c      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3320      	adds	r3, #32
 8006886:	2102      	movs	r1, #2
 8006888:	4618      	mov	r0, r3
 800688a:	f000 f925 	bl	8006ad8 <RCCEx_PLLSAI2_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006892:	7cfb      	ldrb	r3, [r7, #19]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068a8:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068b6:	490d      	ldr	r1, [pc, #52]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ca:	4b08      	ldr	r3, [pc, #32]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068da:	4904      	ldr	r1, [pc, #16]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40021000 	.word	0x40021000

080068f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068fe:	4b75      	ldr	r3, [pc, #468]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800690a:	4b72      	ldr	r3, [pc, #456]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0203 	and.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d10d      	bne.n	8006936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
       ||
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006922:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
       ||
 8006932:	429a      	cmp	r2, r3
 8006934:	d047      	beq.n	80069c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
 800693a:	e044      	b.n	80069c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d018      	beq.n	8006976 <RCCEx_PLLSAI1_Config+0x86>
 8006944:	2b03      	cmp	r3, #3
 8006946:	d825      	bhi.n	8006994 <RCCEx_PLLSAI1_Config+0xa4>
 8006948:	2b01      	cmp	r3, #1
 800694a:	d002      	beq.n	8006952 <RCCEx_PLLSAI1_Config+0x62>
 800694c:	2b02      	cmp	r3, #2
 800694e:	d009      	beq.n	8006964 <RCCEx_PLLSAI1_Config+0x74>
 8006950:	e020      	b.n	8006994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006952:	4b60      	ldr	r3, [pc, #384]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d11d      	bne.n	800699a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006962:	e01a      	b.n	800699a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006964:	4b5b      	ldr	r3, [pc, #364]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d116      	bne.n	800699e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006974:	e013      	b.n	800699e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006976:	4b57      	ldr	r3, [pc, #348]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10f      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006982:	4b54      	ldr	r3, [pc, #336]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006992:	e006      	b.n	80069a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
      break;
 8006998:	e004      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800699a:	bf00      	nop
 800699c:	e002      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069aa:	4b4a      	ldr	r3, [pc, #296]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6819      	ldr	r1, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	430b      	orrs	r3, r1
 80069c0:	4944      	ldr	r1, [pc, #272]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d17d      	bne.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069cc:	4b41      	ldr	r3, [pc, #260]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a40      	ldr	r2, [pc, #256]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d8:	f7fd fb86 	bl	80040e8 <HAL_GetTick>
 80069dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069de:	e009      	b.n	80069f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e0:	f7fd fb82 	bl	80040e8 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d902      	bls.n	80069f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
        break;
 80069f2:	e005      	b.n	8006a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069f4:	4b37      	ldr	r3, [pc, #220]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ef      	bne.n	80069e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d160      	bne.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d111      	bne.n	8006a30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6892      	ldr	r2, [r2, #8]
 8006a1c:	0211      	lsls	r1, r2, #8
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68d2      	ldr	r2, [r2, #12]
 8006a22:	0912      	lsrs	r2, r2, #4
 8006a24:	0452      	lsls	r2, r2, #17
 8006a26:	430a      	orrs	r2, r1
 8006a28:	492a      	ldr	r1, [pc, #168]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	610b      	str	r3, [r1, #16]
 8006a2e:	e027      	b.n	8006a80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d112      	bne.n	8006a5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a36:	4b27      	ldr	r3, [pc, #156]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006a3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6892      	ldr	r2, [r2, #8]
 8006a46:	0211      	lsls	r1, r2, #8
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6912      	ldr	r2, [r2, #16]
 8006a4c:	0852      	lsrs	r2, r2, #1
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	0552      	lsls	r2, r2, #21
 8006a52:	430a      	orrs	r2, r1
 8006a54:	491f      	ldr	r1, [pc, #124]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	610b      	str	r3, [r1, #16]
 8006a5a:	e011      	b.n	8006a80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006a64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6892      	ldr	r2, [r2, #8]
 8006a6c:	0211      	lsls	r1, r2, #8
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6952      	ldr	r2, [r2, #20]
 8006a72:	0852      	lsrs	r2, r2, #1
 8006a74:	3a01      	subs	r2, #1
 8006a76:	0652      	lsls	r2, r2, #25
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	4916      	ldr	r1, [pc, #88]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a80:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a13      	ldr	r2, [pc, #76]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fd fb2c 	bl	80040e8 <HAL_GetTick>
 8006a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a92:	e009      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a94:	f7fd fb28 	bl	80040e8 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d902      	bls.n	8006aa8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8006aa6:	e005      	b.n	8006ab4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ef      	beq.n	8006a94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006aba:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006abc:	691a      	ldr	r2, [r3, #16]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	4904      	ldr	r1, [pc, #16]	@ (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d018      	beq.n	8006b24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006af2:	4b67      	ldr	r3, [pc, #412]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d10d      	bne.n	8006b1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
       ||
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b0a:	4b61      	ldr	r3, [pc, #388]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
       ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d047      	beq.n	8006bae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	73fb      	strb	r3, [r7, #15]
 8006b22:	e044      	b.n	8006bae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d018      	beq.n	8006b5e <RCCEx_PLLSAI2_Config+0x86>
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d825      	bhi.n	8006b7c <RCCEx_PLLSAI2_Config+0xa4>
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d002      	beq.n	8006b3a <RCCEx_PLLSAI2_Config+0x62>
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d009      	beq.n	8006b4c <RCCEx_PLLSAI2_Config+0x74>
 8006b38:	e020      	b.n	8006b7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b3a:	4b55      	ldr	r3, [pc, #340]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b4a:	e01a      	b.n	8006b82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b4c:	4b50      	ldr	r3, [pc, #320]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d116      	bne.n	8006b86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b5c:	e013      	b.n	8006b86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b6a:	4b49      	ldr	r3, [pc, #292]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b7a:	e006      	b.n	8006b8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b80:	e004      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b92:	4b3f      	ldr	r3, [pc, #252]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	4939      	ldr	r1, [pc, #228]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d167      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bb4:	4b36      	ldr	r3, [pc, #216]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a35      	ldr	r2, [pc, #212]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fd fa92 	bl	80040e8 <HAL_GetTick>
 8006bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bc6:	e009      	b.n	8006bdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bc8:	f7fd fa8e 	bl	80040e8 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d902      	bls.n	8006bdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bda:	e005      	b.n	8006be8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1ef      	bne.n	8006bc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d14a      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d111      	bne.n	8006c18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bf4:	4b26      	ldr	r3, [pc, #152]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6892      	ldr	r2, [r2, #8]
 8006c04:	0211      	lsls	r1, r2, #8
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	0912      	lsrs	r2, r2, #4
 8006c0c:	0452      	lsls	r2, r2, #17
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	491f      	ldr	r1, [pc, #124]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	614b      	str	r3, [r1, #20]
 8006c16:	e011      	b.n	8006c3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c18:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006c20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6892      	ldr	r2, [r2, #8]
 8006c28:	0211      	lsls	r1, r2, #8
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6912      	ldr	r2, [r2, #16]
 8006c2e:	0852      	lsrs	r2, r2, #1
 8006c30:	3a01      	subs	r2, #1
 8006c32:	0652      	lsls	r2, r2, #25
 8006c34:	430a      	orrs	r2, r1
 8006c36:	4916      	ldr	r1, [pc, #88]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c3c:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c48:	f7fd fa4e 	bl	80040e8 <HAL_GetTick>
 8006c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c4e:	e009      	b.n	8006c64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c50:	f7fd fa4a 	bl	80040e8 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d902      	bls.n	8006c64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	73fb      	strb	r3, [r7, #15]
          break;
 8006c62:	e005      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c64:	4b0a      	ldr	r3, [pc, #40]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0ef      	beq.n	8006c50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c76:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	4904      	ldr	r1, [pc, #16]	@ (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000

08006c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e095      	b.n	8006dd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d108      	bne.n	8006cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cb6:	d009      	beq.n	8006ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	61da      	str	r2, [r3, #28]
 8006cbe:	e005      	b.n	8006ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f877 	bl	8006dda <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d0c:	d902      	bls.n	8006d14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e002      	b.n	8006d1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d22:	d007      	beq.n	8006d34 <HAL_SPI_Init+0xa0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d2c:	d002      	beq.n	8006d34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d76:	ea42 0103 	orr.w	r1, r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	f003 0204 	and.w	r2, r3, #4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006db0:	ea42 0103 	orr.w	r1, r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b08a      	sub	sp, #40	@ 0x28
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x26>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e1fb      	b.n	800720c <HAL_SPI_TransmitReceive+0x41e>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e1c:	f7fd f964 	bl	80040e8 <HAL_GetTick>
 8006e20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e30:	887b      	ldrh	r3, [r7, #2]
 8006e32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e34:	887b      	ldrh	r3, [r7, #2]
 8006e36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e38:	7efb      	ldrb	r3, [r7, #27]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d00e      	beq.n	8006e5c <HAL_SPI_TransmitReceive+0x6e>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e44:	d106      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d102      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x66>
 8006e4e:	7efb      	ldrb	r3, [r7, #27]
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d003      	beq.n	8006e5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e54:	2302      	movs	r3, #2
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e5a:	e1cd      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x80>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x80>
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e74:	e1c0      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d003      	beq.n	8006e8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2205      	movs	r2, #5
 8006e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	887a      	ldrh	r2, [r7, #2]
 8006e9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	887a      	ldrh	r2, [r7, #2]
 8006ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	887a      	ldrh	r2, [r7, #2]
 8006eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	887a      	ldrh	r2, [r7, #2]
 8006eb6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ecc:	d802      	bhi.n	8006ed4 <HAL_SPI_TransmitReceive+0xe6>
 8006ece:	8a3b      	ldrh	r3, [r7, #16]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d908      	bls.n	8006ee6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ee2:	605a      	str	r2, [r3, #4]
 8006ee4:	e007      	b.n	8006ef6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ef4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b40      	cmp	r3, #64	@ 0x40
 8006f02:	d007      	beq.n	8006f14 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f1c:	d97c      	bls.n	8007018 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x13e>
 8006f26:	8a7b      	ldrh	r3, [r7, #18]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d169      	bne.n	8007000 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f50:	e056      	b.n	8007000 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d11b      	bne.n	8006f98 <HAL_SPI_TransmitReceive+0x1aa>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d016      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x1aa>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d113      	bne.n	8006f98 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d11c      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x1f2>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	b292      	uxth	r2, r2
 8006fbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	1c9a      	adds	r2, r3, #2
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fe0:	f7fd f882 	bl	80040e8 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d807      	bhi.n	8007000 <HAL_SPI_TransmitReceive+0x212>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff6:	d003      	beq.n	8007000 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8006ffe:	e0fb      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1a3      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x164>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d19d      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x164>
 8007016:	e0df      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x23a>
 8007020:	8a7b      	ldrh	r3, [r7, #18]
 8007022:	2b01      	cmp	r3, #1
 8007024:	f040 80cb 	bne.w	80071be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b01      	cmp	r3, #1
 8007030:	d912      	bls.n	8007058 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	881a      	ldrh	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	1c9a      	adds	r2, r3, #2
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b02      	subs	r3, #2
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007056:	e0b2      	b.n	80071be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	330c      	adds	r3, #12
 8007062:	7812      	ldrb	r2, [r2, #0]
 8007064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707e:	e09e      	b.n	80071be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b02      	cmp	r3, #2
 800708c:	d134      	bne.n	80070f8 <HAL_SPI_TransmitReceive+0x30a>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d02f      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0x30a>
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	2b01      	cmp	r3, #1
 800709c:	d12c      	bne.n	80070f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d912      	bls.n	80070ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	1c9a      	adds	r2, r3, #2
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b02      	subs	r3, #2
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070cc:	e012      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	7812      	ldrb	r2, [r2, #0]
 80070da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b01      	cmp	r3, #1
 8007104:	d148      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x3aa>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d042      	beq.n	8007198 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d923      	bls.n	8007166 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007128:	b292      	uxth	r2, r2
 800712a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007130:	1c9a      	adds	r2, r3, #2
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b02      	subs	r3, #2
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	d81f      	bhi.n	8007194 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	e016      	b.n	8007194 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f103 020c 	add.w	r2, r3, #12
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007194:	2301      	movs	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007198:	f7fc ffa6 	bl	80040e8 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d803      	bhi.n	80071b0 <HAL_SPI_TransmitReceive+0x3c2>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d102      	bne.n	80071b6 <HAL_SPI_TransmitReceive+0x3c8>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80071bc:	e01c      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f47f af5b 	bne.w	8007080 <HAL_SPI_TransmitReceive+0x292>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f47f af54 	bne.w	8007080 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f945 	bl	800746c <SPI_EndRxTxTransaction>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2220      	movs	r2, #32
 80071f2:	661a      	str	r2, [r3, #96]	@ 0x60
 80071f4:	e000      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80071f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800720c:	4618      	mov	r0, r3
 800720e:	3728      	adds	r7, #40	@ 0x28
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007222:	b2db      	uxtb	r3, r3
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	4613      	mov	r3, r2
 800723e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007240:	f7fc ff52 	bl	80040e8 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4413      	add	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007250:	f7fc ff4a 	bl	80040e8 <HAL_GetTick>
 8007254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007256:	4b39      	ldr	r3, [pc, #228]	@ (800733c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	015b      	lsls	r3, r3, #5
 800725c:	0d1b      	lsrs	r3, r3, #20
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	fb02 f303 	mul.w	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007266:	e054      	b.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d050      	beq.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007270:	f7fc ff3a 	bl	80040e8 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	429a      	cmp	r2, r3
 800727e:	d902      	bls.n	8007286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d13d      	bne.n	8007302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800729e:	d111      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a8:	d004      	beq.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b2:	d107      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072cc:	d10f      	bne.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e017      	b.n	8007332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3b01      	subs	r3, #1
 8007310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	429a      	cmp	r2, r3
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	429a      	cmp	r2, r3
 800732e:	d19b      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000018 	.word	0x20000018

08007340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	@ 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007352:	f7fc fec9 	bl	80040e8 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	4413      	add	r3, r2
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007362:	f7fc fec1 	bl	80040e8 <HAL_GetTick>
 8007366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007370:	4b3d      	ldr	r3, [pc, #244]	@ (8007468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	00da      	lsls	r2, r3, #3
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	0d1b      	lsrs	r3, r3, #20
 8007380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007388:	e060      	b.n	800744c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007390:	d107      	bne.n	80073a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d050      	beq.n	800744c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073aa:	f7fc fe9d 	bl	80040e8 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d902      	bls.n	80073c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d13d      	bne.n	800743c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073d8:	d111      	bne.n	80073fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073e2:	d004      	beq.n	80073ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ec:	d107      	bne.n	80073fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007406:	d10f      	bne.n	8007428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e010      	b.n	800745e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3b01      	subs	r3, #1
 800744a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	4013      	ands	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d196      	bne.n	800738a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	@ 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000018 	.word	0x20000018

0800746c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2200      	movs	r2, #0
 8007480:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff ff5b 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	f043 0220 	orr.w	r2, r3, #32
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e027      	b.n	80074f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	2180      	movs	r1, #128	@ 0x80
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fec0 	bl	8007230 <SPI_WaitFlagStateUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e014      	b.n	80074f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff ff34 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e000      	b.n	80074f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e040      	b.n	800758c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f83a 	bl	8007594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	@ 0x24
 8007524:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8ca 	bl	80076d0 <UART_SetConfig>
 800753c:	4603      	mov	r3, r0
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e022      	b.n	800758c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb76 	bl	8007c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fbfd 	bl	8007d84 <UART_CheckIdleState>
 800758a:	4603      	mov	r3, r0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	@ 0x28
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075bc:	2b20      	cmp	r3, #32
 80075be:	f040 8081 	bne.w	80076c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_UART_Transmit+0x26>
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e079      	b.n	80076c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_UART_Transmit+0x38>
 80075dc:	2302      	movs	r3, #2
 80075de:	e072      	b.n	80076c6 <HAL_UART_Transmit+0x11e>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2221      	movs	r2, #33	@ 0x21
 80075f4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075f6:	f7fc fd77 	bl	80040e8 <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007614:	d108      	bne.n	8007628 <HAL_UART_Transmit+0x80>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e003      	b.n	8007630 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8007638:	e02c      	b.n	8007694 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2200      	movs	r2, #0
 8007642:	2180      	movs	r1, #128	@ 0x80
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 fbe6 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e038      	b.n	80076c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	881a      	ldrh	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007666:	b292      	uxth	r2, r2
 8007668:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	3302      	adds	r3, #2
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	e007      	b.n	8007682 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	3301      	adds	r3, #1
 8007680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1cc      	bne.n	800763a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2200      	movs	r2, #0
 80076a8:	2140      	movs	r1, #64	@ 0x40
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fbb3 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e005      	b.n	80076c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2220      	movs	r2, #32
 80076be:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3720      	adds	r7, #32
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b08a      	sub	sp, #40	@ 0x28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4ba4      	ldr	r3, [pc, #656]	@ (8007990 <UART_SetConfig+0x2c0>)
 8007700:	4013      	ands	r3, r2
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007708:	430b      	orrs	r3, r1
 800770a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a99      	ldr	r2, [pc, #612]	@ (8007994 <UART_SetConfig+0x2c4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007738:	4313      	orrs	r3, r2
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a90      	ldr	r2, [pc, #576]	@ (8007998 <UART_SetConfig+0x2c8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d126      	bne.n	80077a8 <UART_SetConfig+0xd8>
 800775a:	4b90      	ldr	r3, [pc, #576]	@ (800799c <UART_SetConfig+0x2cc>)
 800775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	2b03      	cmp	r3, #3
 8007766:	d81b      	bhi.n	80077a0 <UART_SetConfig+0xd0>
 8007768:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <UART_SetConfig+0xa0>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007781 	.word	0x08007781
 8007774:	08007791 	.word	0x08007791
 8007778:	08007789 	.word	0x08007789
 800777c:	08007799 	.word	0x08007799
 8007780:	2301      	movs	r3, #1
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007786:	e116      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007788:	2302      	movs	r3, #2
 800778a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778e:	e112      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007790:	2304      	movs	r3, #4
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007796:	e10e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007798:	2308      	movs	r3, #8
 800779a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779e:	e10a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80077a0:	2310      	movs	r3, #16
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a6:	e106      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a7c      	ldr	r2, [pc, #496]	@ (80079a0 <UART_SetConfig+0x2d0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d138      	bne.n	8007824 <UART_SetConfig+0x154>
 80077b2:	4b7a      	ldr	r3, [pc, #488]	@ (800799c <UART_SetConfig+0x2cc>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b8:	f003 030c 	and.w	r3, r3, #12
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	d82d      	bhi.n	800781c <UART_SetConfig+0x14c>
 80077c0:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <UART_SetConfig+0xf8>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	0800781d 	.word	0x0800781d
 80077d0:	0800781d 	.word	0x0800781d
 80077d4:	0800781d 	.word	0x0800781d
 80077d8:	0800780d 	.word	0x0800780d
 80077dc:	0800781d 	.word	0x0800781d
 80077e0:	0800781d 	.word	0x0800781d
 80077e4:	0800781d 	.word	0x0800781d
 80077e8:	08007805 	.word	0x08007805
 80077ec:	0800781d 	.word	0x0800781d
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007815 	.word	0x08007815
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e0d8      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007804:	2302      	movs	r3, #2
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e0d4      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800780c:	2304      	movs	r3, #4
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e0d0      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007814:	2308      	movs	r3, #8
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e0cc      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800781c:	2310      	movs	r3, #16
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007822:	e0c8      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a5e      	ldr	r2, [pc, #376]	@ (80079a4 <UART_SetConfig+0x2d4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d125      	bne.n	800787a <UART_SetConfig+0x1aa>
 800782e:	4b5b      	ldr	r3, [pc, #364]	@ (800799c <UART_SetConfig+0x2cc>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007834:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007838:	2b30      	cmp	r3, #48	@ 0x30
 800783a:	d016      	beq.n	800786a <UART_SetConfig+0x19a>
 800783c:	2b30      	cmp	r3, #48	@ 0x30
 800783e:	d818      	bhi.n	8007872 <UART_SetConfig+0x1a2>
 8007840:	2b20      	cmp	r3, #32
 8007842:	d00a      	beq.n	800785a <UART_SetConfig+0x18a>
 8007844:	2b20      	cmp	r3, #32
 8007846:	d814      	bhi.n	8007872 <UART_SetConfig+0x1a2>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <UART_SetConfig+0x182>
 800784c:	2b10      	cmp	r3, #16
 800784e:	d008      	beq.n	8007862 <UART_SetConfig+0x192>
 8007850:	e00f      	b.n	8007872 <UART_SetConfig+0x1a2>
 8007852:	2300      	movs	r3, #0
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007858:	e0ad      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800785a:	2302      	movs	r3, #2
 800785c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007860:	e0a9      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007862:	2304      	movs	r3, #4
 8007864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007868:	e0a5      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800786a:	2308      	movs	r3, #8
 800786c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007870:	e0a1      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007872:	2310      	movs	r3, #16
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007878:	e09d      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a4a      	ldr	r2, [pc, #296]	@ (80079a8 <UART_SetConfig+0x2d8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d125      	bne.n	80078d0 <UART_SetConfig+0x200>
 8007884:	4b45      	ldr	r3, [pc, #276]	@ (800799c <UART_SetConfig+0x2cc>)
 8007886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800788e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007890:	d016      	beq.n	80078c0 <UART_SetConfig+0x1f0>
 8007892:	2bc0      	cmp	r3, #192	@ 0xc0
 8007894:	d818      	bhi.n	80078c8 <UART_SetConfig+0x1f8>
 8007896:	2b80      	cmp	r3, #128	@ 0x80
 8007898:	d00a      	beq.n	80078b0 <UART_SetConfig+0x1e0>
 800789a:	2b80      	cmp	r3, #128	@ 0x80
 800789c:	d814      	bhi.n	80078c8 <UART_SetConfig+0x1f8>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <UART_SetConfig+0x1d8>
 80078a2:	2b40      	cmp	r3, #64	@ 0x40
 80078a4:	d008      	beq.n	80078b8 <UART_SetConfig+0x1e8>
 80078a6:	e00f      	b.n	80078c8 <UART_SetConfig+0x1f8>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ae:	e082      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078b0:	2302      	movs	r3, #2
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b6:	e07e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078b8:	2304      	movs	r3, #4
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078be:	e07a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078c0:	2308      	movs	r3, #8
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c6:	e076      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ce:	e072      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a35      	ldr	r2, [pc, #212]	@ (80079ac <UART_SetConfig+0x2dc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d12a      	bne.n	8007930 <UART_SetConfig+0x260>
 80078da:	4b30      	ldr	r3, [pc, #192]	@ (800799c <UART_SetConfig+0x2cc>)
 80078dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078e8:	d01a      	beq.n	8007920 <UART_SetConfig+0x250>
 80078ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ee:	d81b      	bhi.n	8007928 <UART_SetConfig+0x258>
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f4:	d00c      	beq.n	8007910 <UART_SetConfig+0x240>
 80078f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078fa:	d815      	bhi.n	8007928 <UART_SetConfig+0x258>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <UART_SetConfig+0x238>
 8007900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007904:	d008      	beq.n	8007918 <UART_SetConfig+0x248>
 8007906:	e00f      	b.n	8007928 <UART_SetConfig+0x258>
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800790e:	e052      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007910:	2302      	movs	r3, #2
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007916:	e04e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007918:	2304      	movs	r3, #4
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791e:	e04a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007920:	2308      	movs	r3, #8
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007926:	e046      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007928:	2310      	movs	r3, #16
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792e:	e042      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <UART_SetConfig+0x2c4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d13a      	bne.n	80079b0 <UART_SetConfig+0x2e0>
 800793a:	4b18      	ldr	r3, [pc, #96]	@ (800799c <UART_SetConfig+0x2cc>)
 800793c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007940:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007944:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007948:	d01a      	beq.n	8007980 <UART_SetConfig+0x2b0>
 800794a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800794e:	d81b      	bhi.n	8007988 <UART_SetConfig+0x2b8>
 8007950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007954:	d00c      	beq.n	8007970 <UART_SetConfig+0x2a0>
 8007956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800795a:	d815      	bhi.n	8007988 <UART_SetConfig+0x2b8>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <UART_SetConfig+0x298>
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007964:	d008      	beq.n	8007978 <UART_SetConfig+0x2a8>
 8007966:	e00f      	b.n	8007988 <UART_SetConfig+0x2b8>
 8007968:	2300      	movs	r3, #0
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796e:	e022      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007970:	2302      	movs	r3, #2
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007976:	e01e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007978:	2304      	movs	r3, #4
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797e:	e01a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007980:	2308      	movs	r3, #8
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007986:	e016      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007988:	2310      	movs	r3, #16
 800798a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798e:	e012      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007990:	efff69f3 	.word	0xefff69f3
 8007994:	40008000 	.word	0x40008000
 8007998:	40013800 	.word	0x40013800
 800799c:	40021000 	.word	0x40021000
 80079a0:	40004400 	.word	0x40004400
 80079a4:	40004800 	.word	0x40004800
 80079a8:	40004c00 	.word	0x40004c00
 80079ac:	40005000 	.word	0x40005000
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007c38 <UART_SetConfig+0x568>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d17a      	bne.n	8007ab6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d824      	bhi.n	8007a12 <UART_SetConfig+0x342>
 80079c8:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <UART_SetConfig+0x300>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	08007a13 	.word	0x08007a13
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	08007a13 	.word	0x08007a13
 80079e0:	08007a03 	.word	0x08007a03
 80079e4:	08007a13 	.word	0x08007a13
 80079e8:	08007a13 	.word	0x08007a13
 80079ec:	08007a13 	.word	0x08007a13
 80079f0:	08007a0b 	.word	0x08007a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fe fc06 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 80079f8:	61f8      	str	r0, [r7, #28]
        break;
 80079fa:	e010      	b.n	8007a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079fc:	4b8f      	ldr	r3, [pc, #572]	@ (8007c3c <UART_SetConfig+0x56c>)
 80079fe:	61fb      	str	r3, [r7, #28]
        break;
 8007a00:	e00d      	b.n	8007a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a02:	f7fe fb67 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8007a06:	61f8      	str	r0, [r7, #28]
        break;
 8007a08:	e009      	b.n	8007a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a0e:	61fb      	str	r3, [r7, #28]
        break;
 8007a10:	e005      	b.n	8007a1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80fb 	beq.w	8007c1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d305      	bcc.n	8007a42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d903      	bls.n	8007a4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a48:	e0e8      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	461c      	mov	r4, r3
 8007a50:	4615      	mov	r5, r2
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	022b      	lsls	r3, r5, #8
 8007a5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a60:	0222      	lsls	r2, r4, #8
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6849      	ldr	r1, [r1, #4]
 8007a66:	0849      	lsrs	r1, r1, #1
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4688      	mov	r8, r1
 8007a6c:	4681      	mov	r9, r0
 8007a6e:	eb12 0a08 	adds.w	sl, r2, r8
 8007a72:	eb43 0b09 	adc.w	fp, r3, r9
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a84:	4650      	mov	r0, sl
 8007a86:	4659      	mov	r1, fp
 8007a88:	f7f9 f88e 	bl	8000ba8 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4613      	mov	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a9a:	d308      	bcc.n	8007aae <UART_SetConfig+0x3de>
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aa2:	d204      	bcs.n	8007aae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	60da      	str	r2, [r3, #12]
 8007aac:	e0b6      	b.n	8007c1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ab4:	e0b2      	b.n	8007c1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007abe:	d15e      	bne.n	8007b7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d828      	bhi.n	8007b1a <UART_SetConfig+0x44a>
 8007ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad0 <UART_SetConfig+0x400>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007af5 	.word	0x08007af5
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	08007b1b 	.word	0x08007b1b
 8007ae0:	08007b0b 	.word	0x08007b0b
 8007ae4:	08007b1b 	.word	0x08007b1b
 8007ae8:	08007b1b 	.word	0x08007b1b
 8007aec:	08007b1b 	.word	0x08007b1b
 8007af0:	08007b13 	.word	0x08007b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007af4:	f7fe fb86 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 8007af8:	61f8      	str	r0, [r7, #28]
        break;
 8007afa:	e014      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007afc:	f7fe fb98 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 8007b00:	61f8      	str	r0, [r7, #28]
        break;
 8007b02:	e010      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b04:	4b4d      	ldr	r3, [pc, #308]	@ (8007c3c <UART_SetConfig+0x56c>)
 8007b06:	61fb      	str	r3, [r7, #28]
        break;
 8007b08:	e00d      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b0a:	f7fe fae3 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8007b0e:	61f8      	str	r0, [r7, #28]
        break;
 8007b10:	e009      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b16:	61fb      	str	r3, [r7, #28]
        break;
 8007b18:	e005      	b.n	8007b26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d077      	beq.n	8007c1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	005a      	lsls	r2, r3, #1
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	441a      	add	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b0f      	cmp	r3, #15
 8007b46:	d916      	bls.n	8007b76 <UART_SetConfig+0x4a6>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b4e:	d212      	bcs.n	8007b76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f023 030f 	bic.w	r3, r3, #15
 8007b58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	8afb      	ldrh	r3, [r7, #22]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	8afa      	ldrh	r2, [r7, #22]
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e052      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b7c:	e04e      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d827      	bhi.n	8007bd6 <UART_SetConfig+0x506>
 8007b86:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <UART_SetConfig+0x4bc>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	08007bd7 	.word	0x08007bd7
 8007b9c:	08007bc7 	.word	0x08007bc7
 8007ba0:	08007bd7 	.word	0x08007bd7
 8007ba4:	08007bd7 	.word	0x08007bd7
 8007ba8:	08007bd7 	.word	0x08007bd7
 8007bac:	08007bcf 	.word	0x08007bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fe fb28 	bl	8006204 <HAL_RCC_GetPCLK1Freq>
 8007bb4:	61f8      	str	r0, [r7, #28]
        break;
 8007bb6:	e014      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb8:	f7fe fb3a 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 8007bbc:	61f8      	str	r0, [r7, #28]
        break;
 8007bbe:	e010      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c3c <UART_SetConfig+0x56c>)
 8007bc2:	61fb      	str	r3, [r7, #28]
        break;
 8007bc4:	e00d      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bc6:	f7fe fa85 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8007bca:	61f8      	str	r0, [r7, #28]
        break;
 8007bcc:	e009      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd2:	61fb      	str	r3, [r7, #28]
        break;
 8007bd4:	e005      	b.n	8007be2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007be0:	bf00      	nop
    }

    if (pclk != 0U)
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	085a      	lsrs	r2, r3, #1
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b0f      	cmp	r3, #15
 8007c00:	d909      	bls.n	8007c16 <UART_SetConfig+0x546>
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c08:	d205      	bcs.n	8007c16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60da      	str	r2, [r3, #12]
 8007c14:	e002      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8007c28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	@ 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	40008000 	.word	0x40008000
 8007c3c:	00f42400 	.word	0x00f42400

08007c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01a      	beq.n	8007d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d3e:	d10a      	bne.n	8007d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d94:	f7fc f9a8 	bl	80040e8 <HAL_GetTick>
 8007d98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d10e      	bne.n	8007dc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007da8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f82d 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e023      	b.n	8007e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d10e      	bne.n	8007df2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f817 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e00d      	b.n	8007e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b09c      	sub	sp, #112	@ 0x70
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e26:	e0a5      	b.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	f000 80a1 	beq.w	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e32:	f7fc f959 	bl	80040e8 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d302      	bcc.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d13e      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e58:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e68:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	f023 0301 	bic.w	r3, r3, #1
 8007e90:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e9a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007e9c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e5      	bne.n	8007e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e067      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d04f      	beq.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ee2:	d147      	bne.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007eec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f40:	623a      	str	r2, [r7, #32]
 8007f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e010      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69da      	ldr	r2, [r3, #28]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	f43f af4a 	beq.w	8007e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3770      	adds	r7, #112	@ 0x70
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8007f9e:	b590      	push	{r4, r7, lr}
 8007fa0:	b087      	sub	sp, #28
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	460b      	mov	r3, r1
 8007fac:	72fb      	strb	r3, [r7, #11]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <hts221_read_reg+0x20>
  {
    return -1;
 8007fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbc:	e009      	b.n	8007fd2 <hts221_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685c      	ldr	r4, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68d8      	ldr	r0, [r3, #12]
 8007fc6:	893b      	ldrh	r3, [r7, #8]
 8007fc8:	7af9      	ldrb	r1, [r7, #11]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	47a0      	blx	r4
 8007fce:	6178      	str	r0, [r7, #20]

  return ret;
 8007fd0:	697b      	ldr	r3, [r7, #20]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}

08007fda <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                const uint8_t *data,
                                uint16_t len)
{
 8007fda:	b590      	push	{r4, r7, lr}
 8007fdc:	b087      	sub	sp, #28
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	72fb      	strb	r3, [r7, #11]
 8007fea:	4613      	mov	r3, r2
 8007fec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <hts221_write_reg+0x20>
  {
    return -1;
 8007ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff8:	e009      	b.n	800800e <hts221_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681c      	ldr	r4, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68d8      	ldr	r0, [r3, #12]
 8008002:	893b      	ldrh	r3, [r7, #8]
 8008004:	7af9      	ldrb	r1, [r7, #11]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	47a0      	blx	r4
 800800a:	6178      	str	r0, [r7, #20]

  return ret;
 800800c:	697b      	ldr	r3, [r7, #20]
}
 800800e:	4618      	mov	r0, r3
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	bd90      	pop	{r4, r7, pc}

08008016 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(const stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008022:	f107 0208 	add.w	r2, r7, #8
 8008026:	2301      	movs	r3, #1
 8008028:	2120      	movs	r1, #32
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff ffb7 	bl	8007f9e <hts221_read_reg>
 8008030:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10f      	bne.n	8008058 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	b2da      	uxtb	r2, r3
 8008040:	7a3b      	ldrb	r3, [r7, #8]
 8008042:	f362 0301 	bfi	r3, r2, #0, #2
 8008046:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008048:	f107 0208 	add.w	r2, r7, #8
 800804c:	2301      	movs	r3, #1
 800804e:	2120      	movs	r1, #32
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ffc2 	bl	8007fda <hts221_write_reg>
 8008056:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008058:	68fb      	ldr	r3, [r7, #12]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800806e:	f107 0208 	add.w	r2, r7, #8
 8008072:	2301      	movs	r3, #1
 8008074:	2120      	movs	r1, #32
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff ff91 	bl	8007f9e <hts221_read_reg>
 800807c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10f      	bne.n	80080a4 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	b2da      	uxtb	r2, r3
 800808c:	7a3b      	ldrb	r3, [r7, #8]
 800808e:	f362 0382 	bfi	r3, r2, #2, #1
 8008092:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008094:	f107 0208 	add.w	r2, r7, #8
 8008098:	2301      	movs	r3, #1
 800809a:	2120      	movs	r1, #32
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff ff9c 	bl	8007fda <hts221_write_reg>
 80080a2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80080a4:	68fb      	ldr	r3, [r7, #12]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80080b8:	f107 0208 	add.w	r2, r7, #8
 80080bc:	2302      	movs	r3, #2
 80080be:	2128      	movs	r1, #40	@ 0x28
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff ff6c 	bl	8007f9e <hts221_read_reg>
 80080c6:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80080c8:	7a7b      	ldrb	r3, [r7, #9]
 80080ca:	b21a      	sxth	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	b29b      	uxth	r3, r3
 80080dc:	7a3a      	ldrb	r2, [r7, #8]
 80080de:	4413      	add	r3, r2
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	b21a      	sxth	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80080e8:	68fb      	ldr	r3, [r7, #12]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80080fc:	2301      	movs	r3, #1
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	210f      	movs	r1, #15
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff4b 	bl	8007f9e <hts221_read_reg>
 8008108:	60f8      	str	r0, [r7, #12]

  return ret;
 800810a:	68fb      	ldr	r3, [r7, #12]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008120:	f107 0208 	add.w	r2, r7, #8
 8008124:	2301      	movs	r3, #1
 8008126:	2120      	movs	r1, #32
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff38 	bl	8007f9e <hts221_read_reg>
 800812e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10f      	bne.n	8008156 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8008136:	78fb      	ldrb	r3, [r7, #3]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	b2da      	uxtb	r2, r3
 800813e:	7a3b      	ldrb	r3, [r7, #8]
 8008140:	f362 13c7 	bfi	r3, r2, #7, #1
 8008144:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8008146:	f107 0208 	add.w	r2, r7, #8
 800814a:	2301      	movs	r3, #1
 800814c:	2120      	movs	r1, #32
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ff43 	bl	8007fda <hts221_write_reg>
 8008154:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(const stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 800816a:	2301      	movs	r3, #1
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	2127      	movs	r1, #39	@ 0x27
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff14 	bl	8007f9e <hts221_read_reg>
 8008176:	60f8      	str	r0, [r7, #12]

  return ret;
 8008178:	68fb      	ldr	r3, [r7, #12]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 800818c:	f107 020b 	add.w	r2, r7, #11
 8008190:	2301      	movs	r3, #1
 8008192:	2130      	movs	r1, #48	@ 0x30
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ff02 	bl	8007f9e <hts221_read_reg>
 800819a:	60f8      	str	r0, [r7, #12]
  *val = (float_t)coeff / 2.0f;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80081aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80081b4:	68fb      	ldr	r3, [r7, #12]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80081c8:	f107 020b 	add.w	r2, r7, #11
 80081cc:	2301      	movs	r3, #1
 80081ce:	2131      	movs	r1, #49	@ 0x31
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7ff fee4 	bl	8007f9e <hts221_read_reg>
 80081d6:	60f8      	str	r0, [r7, #12]
  *val = (float_t)coeff / 2.0f;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80081e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80081f0:	68fb      	ldr	r3, [r7, #12]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8008204:	f107 0208 	add.w	r2, r7, #8
 8008208:	2302      	movs	r3, #2
 800820a:	2136      	movs	r1, #54	@ 0x36
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff fec6 	bl	8007f9e <hts221_read_reg>
 8008212:	60f8      	str	r0, [r7, #12]
  coeff = ((int16_t)coeff_p[1] * 256) + (int16_t)coeff_p[0];
 8008214:	7a7b      	ldrb	r3, [r7, #9]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b29b      	uxth	r3, r3
 800821a:	7a3a      	ldrb	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	b29b      	uxth	r3, r3
 8008220:	817b      	strh	r3, [r7, #10]
  *val = (float_t)coeff * 1.0f;
 8008222:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8008234:	68fb      	ldr	r3, [r7, #12]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8008248:	f107 0208 	add.w	r2, r7, #8
 800824c:	2302      	movs	r3, #2
 800824e:	213a      	movs	r1, #58	@ 0x3a
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fea4 	bl	8007f9e <hts221_read_reg>
 8008256:	60f8      	str	r0, [r7, #12]
  coeff = ((int16_t)coeff_p[1] * 256) + (int16_t)coeff_p[0];
 8008258:	7a7b      	ldrb	r3, [r7, #9]
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	b29b      	uxth	r3, r3
 800825e:	7a3a      	ldrb	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	b29b      	uxth	r3, r3
 8008264:	817b      	strh	r3, [r7, #10]
  *val = (float_t)coeff * 1.0f;
 8008266:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8008278:	68fb      	ldr	r3, [r7, #12]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008282:	b590      	push	{r4, r7, lr}
 8008284:	b087      	sub	sp, #28
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	461a      	mov	r2, r3
 800828e:	460b      	mov	r3, r1
 8008290:	72fb      	strb	r3, [r7, #11]
 8008292:	4613      	mov	r3, r2
 8008294:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <lps22hh_read_reg+0x20>
  {
    return -1;
 800829c:	f04f 33ff 	mov.w	r3, #4294967295
 80082a0:	e009      	b.n	80082b6 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685c      	ldr	r4, [r3, #4]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	68d8      	ldr	r0, [r3, #12]
 80082aa:	893b      	ldrh	r3, [r7, #8]
 80082ac:	7af9      	ldrb	r1, [r7, #11]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	47a0      	blx	r4
 80082b2:	6178      	str	r0, [r7, #20]

  return ret;
 80082b4:	697b      	ldr	r3, [r7, #20]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd90      	pop	{r4, r7, pc}

080082be <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 const uint8_t *data,
                                 uint16_t len)
{
 80082be:	b590      	push	{r4, r7, lr}
 80082c0:	b087      	sub	sp, #28
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	461a      	mov	r2, r3
 80082ca:	460b      	mov	r3, r1
 80082cc:	72fb      	strb	r3, [r7, #11]
 80082ce:	4613      	mov	r3, r2
 80082d0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <lps22hh_write_reg+0x20>
  {
    return -1;
 80082d8:	f04f 33ff 	mov.w	r3, #4294967295
 80082dc:	e009      	b.n	80082f2 <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681c      	ldr	r4, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68d8      	ldr	r0, [r3, #12]
 80082e6:	893b      	ldrh	r3, [r7, #8]
 80082e8:	7af9      	ldrb	r1, [r7, #11]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	47a0      	blx	r4
 80082ee:	6178      	str	r0, [r7, #20]

  return ret;
 80082f0:	697b      	ldr	r3, [r7, #20]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd90      	pop	{r4, r7, pc}
	...

080082fc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8008328 <lps22hh_from_lsb_to_hpa+0x2c>
 8008312:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008316:	eef0 7a66 	vmov.f32	s15, s13
}
 800831a:	eeb0 0a67 	vmov.f32	s0, s15
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	49800000 	.word	0x49800000

0800832c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8008336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008342:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800835c <lps22hh_from_lsb_to_celsius+0x30>
 8008346:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800834a:	eef0 7a66 	vmov.f32	s15, s13
}
 800834e:	eeb0 0a67 	vmov.f32	s0, s15
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	42c80000 	.word	0x42c80000

08008360 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800836c:	f107 0208 	add.w	r2, r7, #8
 8008370:	2301      	movs	r3, #1
 8008372:	2110      	movs	r1, #16
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ff84 	bl	8008282 <lps22hh_read_reg>
 800837a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10f      	bne.n	80083a2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	b2da      	uxtb	r2, r3
 800838a:	7a3b      	ldrb	r3, [r7, #8]
 800838c:	f362 0341 	bfi	r3, r2, #1, #1
 8008390:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8008392:	f107 0208 	add.w	r2, r7, #8
 8008396:	2301      	movs	r3, #1
 8008398:	2110      	movs	r1, #16
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff ff8f 	bl	80082be <lps22hh_write_reg>
 80083a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80083a2:	68fb      	ldr	r3, [r7, #12]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80083b8:	f107 0210 	add.w	r2, r7, #16
 80083bc:	2301      	movs	r3, #1
 80083be:	2110      	movs	r1, #16
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff ff5e 	bl	8008282 <lps22hh_read_reg>
 80083c6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80083ce:	f107 020c 	add.w	r2, r7, #12
 80083d2:	2301      	movs	r3, #1
 80083d4:	2111      	movs	r1, #17
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff ff53 	bl	8008282 <lps22hh_read_reg>
 80083dc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10f      	bne.n	8008404 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	7c3b      	ldrb	r3, [r7, #16]
 80083ee:	f362 1306 	bfi	r3, r2, #4, #3
 80083f2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80083f4:	f107 0210 	add.w	r2, r7, #16
 80083f8:	2301      	movs	r3, #1
 80083fa:	2110      	movs	r1, #16
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ff5e 	bl	80082be <lps22hh_write_reg>
 8008402:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d119      	bne.n	800843e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	7b3b      	ldrb	r3, [r7, #12]
 8008416:	f362 0341 	bfi	r3, r2, #1, #1
 800841a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	08db      	lsrs	r3, r3, #3
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	b2da      	uxtb	r2, r3
 8008426:	7b3b      	ldrb	r3, [r7, #12]
 8008428:	f362 0300 	bfi	r3, r2, #0, #1
 800842c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800842e:	f107 020c 	add.w	r2, r7, #12
 8008432:	2301      	movs	r3, #1
 8008434:	2111      	movs	r1, #17
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff ff41 	bl	80082be <lps22hh_write_reg>
 800843c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800843e:	697b      	ldr	r3, [r7, #20]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8008452:	f107 0208 	add.w	r2, r7, #8
 8008456:	2303      	movs	r3, #3
 8008458:	2128      	movs	r1, #40	@ 0x28
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff ff11 	bl	8008282 <lps22hh_read_reg>
 8008460:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8008462:	7abb      	ldrb	r3, [r7, #10]
 8008464:	461a      	mov	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	7a7a      	ldrb	r2, [r7, #9]
 8008472:	441a      	add	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	7a3a      	ldrb	r2, [r7, #8]
 8008480:	441a      	add	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	601a      	str	r2, [r3, #0]

  return ret;
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80084a4:	f107 0208 	add.w	r2, r7, #8
 80084a8:	2302      	movs	r3, #2
 80084aa:	212b      	movs	r1, #43	@ 0x2b
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fee8 	bl	8008282 <lps22hh_read_reg>
 80084b2:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80084b4:	7a7b      	ldrb	r3, [r7, #9]
 80084b6:	b21a      	sxth	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	7a3a      	ldrb	r2, [r7, #8]
 80084ca:	4413      	add	r3, r2
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	b21a      	sxth	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	801a      	strh	r2, [r3, #0]

  return ret;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80084e8:	2301      	movs	r3, #1
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	210f      	movs	r1, #15
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fec7 	bl	8008282 <lps22hh_read_reg>
 80084f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80084f6:	68fb      	ldr	r3, [r7, #12]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800850c:	f107 0208 	add.w	r2, r7, #8
 8008510:	2301      	movs	r3, #1
 8008512:	2111      	movs	r1, #17
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff feb4 	bl	8008282 <lps22hh_read_reg>
 800851a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10f      	bne.n	8008542 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	7a3b      	ldrb	r3, [r7, #8]
 800852c:	f362 0382 	bfi	r3, r2, #2, #1
 8008530:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8008532:	f107 0208 	add.w	r2, r7, #8
 8008536:	2301      	movs	r3, #1
 8008538:	2111      	movs	r1, #17
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff febf 	bl	80082be <lps22hh_write_reg>
 8008540:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008542:	68fb      	ldr	r3, [r7, #12]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8008556:	f107 0208 	add.w	r2, r7, #8
 800855a:	2301      	movs	r3, #1
 800855c:	2111      	movs	r1, #17
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff fe8f 	bl	8008282 <lps22hh_read_reg>
 8008564:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8008566:	7a3b      	ldrb	r3, [r7, #8]
 8008568:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800856c:	b2db      	uxtb	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	701a      	strb	r2, [r3, #0]

  return ret;
 8008574:	68fb      	ldr	r3, [r7, #12]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800857e:	b5b0      	push	{r4, r5, r7, lr}
 8008580:	b0ce      	sub	sp, #312	@ 0x138
 8008582:	af00      	add	r7, sp, #0
 8008584:	4605      	mov	r5, r0
 8008586:	460c      	mov	r4, r1
 8008588:	4610      	mov	r0, r2
 800858a:	4619      	mov	r1, r3
 800858c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008590:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008594:	462a      	mov	r2, r5
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800859c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085a0:	4622      	mov	r2, r4
 80085a2:	801a      	strh	r2, [r3, #0]
 80085a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085a8:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80085ac:	4602      	mov	r2, r0
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085b4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80085b8:	460a      	mov	r2, r1
 80085ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80085bc:	f107 030c 	add.w	r3, r7, #12
 80085c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80085c4:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80085c8:	3308      	adds	r3, #8
 80085ca:	f107 020c 	add.w	r2, r7, #12
 80085ce:	4413      	add	r3, r2
 80085d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80085d4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80085d8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80085dc:	4413      	add	r3, r2
 80085de:	3309      	adds	r3, #9
 80085e0:	f107 020c 	add.w	r2, r7, #12
 80085e4:	4413      	add	r3, r2
 80085e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80085ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085ee:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80085fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008600:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008604:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800860c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008610:	3301      	adds	r3, #1
 8008612:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008616:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800861a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800861e:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008622:	8812      	ldrh	r2, [r2, #0]
 8008624:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008628:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800862c:	3302      	adds	r3, #2
 800862e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8008632:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008636:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800863a:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800863e:	8812      	ldrh	r2, [r2, #0]
 8008640:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008644:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008648:	3302      	adds	r3, #2
 800864a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800864e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008652:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008656:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800865a:	7812      	ldrb	r2, [r2, #0]
 800865c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800865e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008662:	3301      	adds	r3, #1
 8008664:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008668:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800866c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008670:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008672:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008676:	3301      	adds	r3, #1
 8008678:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800867c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008680:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008684:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008686:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800868a:	3301      	adds	r3, #1
 800868c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008690:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008694:	3308      	adds	r3, #8
 8008696:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800869a:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800869e:	4618      	mov	r0, r3
 80086a0:	f003 fc59 	bl	800bf56 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 80086a4:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80086a8:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80086ac:	4413      	add	r3, r2
 80086ae:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80086b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80086b6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80086ba:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80086bc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80086c0:	3301      	adds	r3, #1
 80086c2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80086c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80086ca:	3301      	adds	r3, #1
 80086cc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80086d0:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80086d4:	4618      	mov	r0, r3
 80086d6:	f003 fc3e 	bl	800bf56 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80086da:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80086de:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80086e2:	4413      	add	r3, r2
 80086e4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086ec:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80086f0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80086f2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80086f6:	3302      	adds	r3, #2
 80086f8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80086fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008700:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8008704:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008706:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800870a:	3302      	adds	r3, #2
 800870c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008710:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008714:	2218      	movs	r2, #24
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f003 fb9c 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 800871e:	233f      	movs	r3, #63	@ 0x3f
 8008720:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8008724:	2383      	movs	r3, #131	@ 0x83
 8008726:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008732:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008736:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800873a:	f107 030b 	add.w	r3, r7, #11
 800873e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008742:	2301      	movs	r3, #1
 8008744:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008748:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f002 fb1e 	bl	800ad90 <hci_send_req>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	da01      	bge.n	800875e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800875a:	23ff      	movs	r3, #255	@ 0xff
 800875c:	e00d      	b.n	800877a <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800875e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008762:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <aci_gap_set_discoverable+0x1fa>
    return status;
 800876c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008770:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	e000      	b.n	800877a <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008780:	46bd      	mov	sp, r7
 8008782:	bdb0      	pop	{r4, r5, r7, pc}

08008784 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b0cc      	sub	sp, #304	@ 0x130
 8008788:	af00      	add	r7, sp, #0
 800878a:	4605      	mov	r5, r0
 800878c:	460c      	mov	r4, r1
 800878e:	4610      	mov	r0, r2
 8008790:	4619      	mov	r1, r3
 8008792:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008796:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800879a:	462a      	mov	r2, r5
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80087a6:	4622      	mov	r2, r4
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087ae:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80087b2:	4602      	mov	r2, r0
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087be:	460a      	mov	r2, r1
 80087c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80087c2:	f107 030c 	add.w	r3, r7, #12
 80087c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80087ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087ce:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087e4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087ec:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80087f0:	3301      	adds	r3, #1
 80087f2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80087f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008802:	7812      	ldrb	r2, [r2, #0]
 8008804:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008806:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800880a:	3301      	adds	r3, #1
 800880c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 8008810:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008814:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008818:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800881c:	7812      	ldrb	r2, [r2, #0]
 800881e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008820:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008824:	3301      	adds	r3, #1
 8008826:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800882e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008832:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800883a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800883e:	3301      	adds	r3, #1
 8008840:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008848:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800884c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800884e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008852:	3301      	adds	r3, #1
 8008854:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800885c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8008860:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008862:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008866:	3301      	adds	r3, #1
 8008868:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800886c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008870:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008874:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008876:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800887a:	3301      	adds	r3, #1
 800887c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008884:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008888:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800888c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008890:	3304      	adds	r3, #4
 8008892:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800889a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800889e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80088a0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80088a4:	3301      	adds	r3, #1
 80088a6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088ae:	2218      	movs	r2, #24
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f003 facf 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 80088b8:	233f      	movs	r3, #63	@ 0x3f
 80088ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80088be:	2386      	movs	r3, #134	@ 0x86
 80088c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80088c4:	f107 030c 	add.w	r3, r7, #12
 80088c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80088cc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80088d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80088d4:	f107 030b 	add.w	r3, r7, #11
 80088d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80088dc:	2301      	movs	r3, #1
 80088de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80088e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f002 fa51 	bl	800ad90 <hci_send_req>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da01      	bge.n	80088f8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80088f4:	23ff      	movs	r3, #255	@ 0xff
 80088f6:	e00d      	b.n	8008914 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 80088f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088fc:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 8008906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800890a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	e000      	b.n	8008914 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800891a:	46bd      	mov	sp, r7
 800891c:	bdb0      	pop	{r4, r5, r7, pc}

0800891e <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800891e:	b590      	push	{r4, r7, lr}
 8008920:	b0cf      	sub	sp, #316	@ 0x13c
 8008922:	af00      	add	r7, sp, #0
 8008924:	4604      	mov	r4, r0
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800892e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008938:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800893c:	4622      	mov	r2, r4
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008944:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008948:	4602      	mov	r2, r0
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008950:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008954:	460a      	mov	r2, r1
 8008956:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008958:	f107 0314 	add.w	r3, r7, #20
 800895c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008960:	f107 030c 	add.w	r3, r7, #12
 8008964:	2207      	movs	r2, #7
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f003 fa74 	bl	800be56 <memset>
  uint8_t index_input = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 8008974:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008978:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800897c:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008980:	7812      	ldrb	r2, [r2, #0]
 8008982:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008984:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008988:	3301      	adds	r3, #1
 800898a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800898e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008992:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008996:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800899a:	7812      	ldrb	r2, [r2, #0]
 800899c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800899e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80089a2:	3301      	adds	r3, #1
 80089a4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80089a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80089b0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80089b8:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80089bc:	3301      	adds	r3, #1
 80089be:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80089c6:	2218      	movs	r2, #24
 80089c8:	2100      	movs	r1, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f003 fa43 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 80089d0:	233f      	movs	r3, #63	@ 0x3f
 80089d2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 80089d6:	238a      	movs	r3, #138	@ 0x8a
 80089d8:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80089e4:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80089e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80089ec:	f107 030c 	add.w	r3, r7, #12
 80089f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80089f4:	2307      	movs	r3, #7
 80089f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80089fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80089fe:	2100      	movs	r1, #0
 8008a00:	4618      	mov	r0, r3
 8008a02:	f002 f9c5 	bl	800ad90 <hci_send_req>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da01      	bge.n	8008a10 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008a0c:	23ff      	movs	r3, #255	@ 0xff
 8008a0e:	e02e      	b.n	8008a6e <aci_gap_init+0x150>
  if (resp.Status) {
 8008a10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <aci_gap_init+0x10c>
    return resp.Status;
 8008a1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	e021      	b.n	8008a6e <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008a2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a3c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a4c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008a56:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008a58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a60:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a6a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}

08008a78 <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b0cc      	sub	sp, #304	@ 0x130
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4602      	mov	r2, r0
 8008a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a84:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008a88:	6019      	str	r1, [r3, #0]
 8008a8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a8e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008a92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008a94:	f107 030c 	add.w	r3, r7, #12
 8008a98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008a9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008aa0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8008aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ab2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ab6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008abe:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 8008ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008acc:	1c58      	adds	r0, r3, #1
 8008ace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ad2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008adc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	f003 fa38 	bl	800bf56 <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 8008ae6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008aea:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008aee:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008afa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008afe:	2218      	movs	r2, #24
 8008b00:	2100      	movs	r1, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f003 f9a7 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8008b08:	233f      	movs	r3, #63	@ 0x3f
 8008b0a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008b0e:	238e      	movs	r3, #142	@ 0x8e
 8008b10:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b14:	f107 030c 	add.w	r3, r7, #12
 8008b18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b1c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008b20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008b24:	f107 030b 	add.w	r3, r7, #11
 8008b28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008b32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 f929 	bl	800ad90 <hci_send_req>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da01      	bge.n	8008b48 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008b44:	23ff      	movs	r3, #255	@ 0xff
 8008b46:	e00d      	b.n	8008b64 <aci_gap_update_adv_data+0xec>
  if (status) {
 8008b48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b4c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <aci_gap_update_adv_data+0xea>
    return status;
 8008b56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b5a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	e000      	b.n	8008b64 <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b088      	sub	sp, #32
 8008b72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b78:	f107 0308 	add.w	r3, r7, #8
 8008b7c:	2218      	movs	r2, #24
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f003 f968 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8008b86:	233f      	movs	r3, #63	@ 0x3f
 8008b88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008b8a:	f240 1301 	movw	r3, #257	@ 0x101
 8008b8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b90:	1dfb      	adds	r3, r7, #7
 8008b92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b94:	2301      	movs	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f002 f8f6 	bl	800ad90 <hci_send_req>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da01      	bge.n	8008bae <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008baa:	23ff      	movs	r3, #255	@ 0xff
 8008bac:	e005      	b.n	8008bba <aci_gatt_init+0x4c>
  if (status) {
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <aci_gatt_init+0x4a>
    return status;
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	e000      	b.n	8008bba <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008bc2:	b590      	push	{r4, r7, lr}
 8008bc4:	b0cf      	sub	sp, #316	@ 0x13c
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	4604      	mov	r4, r0
 8008bca:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8008bce:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008bd2:	6001      	str	r1, [r0, #0]
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bdc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008be0:	4622      	mov	r2, r4
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008be8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008bec:	4602      	mov	r2, r0
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bf4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008bfc:	f107 030c 	add.w	r3, r7, #12
 8008c00:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c08:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d00a      	beq.n	8008c28 <aci_gatt_add_service+0x66>
 8008c12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c16:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d101      	bne.n	8008c24 <aci_gatt_add_service+0x62>
 8008c20:	2311      	movs	r3, #17
 8008c22:	e002      	b.n	8008c2a <aci_gatt_add_service+0x68>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e000      	b.n	8008c2a <aci_gatt_add_service+0x68>
 8008c28:	2303      	movs	r3, #3
 8008c2a:	f107 020c 	add.w	r2, r7, #12
 8008c2e:	4413      	add	r3, r2
 8008c30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c34:	f107 0308 	add.w	r3, r7, #8
 8008c38:	2203      	movs	r2, #3
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f003 f90a 	bl	800be56 <memset>
  uint8_t index_input = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008c48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c4c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008c50:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008c54:	7812      	ldrb	r2, [r2, #0]
 8008c56:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c58:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8008c62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c66:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d002      	beq.n	8008c76 <aci_gatt_add_service+0xb4>
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d004      	beq.n	8008c7e <aci_gatt_add_service+0xbc>
 8008c74:	e007      	b.n	8008c86 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8008c76:	2302      	movs	r3, #2
 8008c78:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008c7c:	e005      	b.n	8008c8a <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008c7e:	2310      	movs	r3, #16
 8008c80:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008c84:	e001      	b.n	8008c8a <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008c86:	2347      	movs	r3, #71	@ 0x47
 8008c88:	e06c      	b.n	8008d64 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8008c8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c8e:	1c58      	adds	r0, r3, #1
 8008c90:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8008c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c98:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008c9c:	6819      	ldr	r1, [r3, #0]
 8008c9e:	f003 f95a 	bl	800bf56 <memcpy>
    index_input += size;
 8008ca2:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008ca6:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8008caa:	4413      	add	r3, r2
 8008cac:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8008cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008cb4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cb8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008cc0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8008cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008cce:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cd2:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008cda:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008cde:	3301      	adds	r3, #1
 8008ce0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ce8:	2218      	movs	r2, #24
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f003 f8b2 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8008cf2:	233f      	movs	r3, #63	@ 0x3f
 8008cf4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8008cf8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008cfc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008d00:	f107 030c 	add.w	r3, r7, #12
 8008d04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008d08:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008d0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008d10:	f107 0308 	add.w	r3, r7, #8
 8008d14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008d18:	2303      	movs	r3, #3
 8008d1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f002 f833 	bl	800ad90 <hci_send_req>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	da01      	bge.n	8008d34 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008d30:	23ff      	movs	r3, #255	@ 0xff
 8008d32:	e017      	b.n	8008d64 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8008d34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d38:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008d42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	e00a      	b.n	8008d64 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008d60:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd90      	pop	{r4, r7, pc}

08008d6e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8008d6e:	b590      	push	{r4, r7, lr}
 8008d70:	b0d1      	sub	sp, #324	@ 0x144
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008d7c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8008d80:	600a      	str	r2, [r1, #0]
 8008d82:	4619      	mov	r1, r3
 8008d84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008d88:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	801a      	strh	r2, [r3, #0]
 8008d90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008d94:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008d98:	4602      	mov	r2, r0
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008da0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8008da4:	460a      	mov	r2, r1
 8008da6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008db0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008db4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d00a      	beq.n	8008dd4 <aci_gatt_add_char+0x66>
 8008dbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008dc2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d101      	bne.n	8008dd0 <aci_gatt_add_char+0x62>
 8008dcc:	2313      	movs	r3, #19
 8008dce:	e002      	b.n	8008dd6 <aci_gatt_add_char+0x68>
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e000      	b.n	8008dd6 <aci_gatt_add_char+0x68>
 8008dd4:	2305      	movs	r3, #5
 8008dd6:	f107 0214 	add.w	r2, r7, #20
 8008dda:	4413      	add	r3, r2
 8008ddc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008de0:	f107 0310 	add.w	r3, r7, #16
 8008de4:	2203      	movs	r2, #3
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f003 f834 	bl	800be56 <memset>
  uint8_t index_input = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008df4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008df8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008dfc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008e00:	8812      	ldrh	r2, [r2, #0]
 8008e02:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e04:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008e08:	3302      	adds	r3, #2
 8008e0a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008e0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008e12:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008e16:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e1e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008e22:	3301      	adds	r3, #1
 8008e24:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8008e28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e2c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d002      	beq.n	8008e3c <aci_gatt_add_char+0xce>
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d004      	beq.n	8008e44 <aci_gatt_add_char+0xd6>
 8008e3a:	e007      	b.n	8008e4c <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008e42:	e005      	b.n	8008e50 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008e4a:	e001      	b.n	8008e50 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008e4c:	2347      	movs	r3, #71	@ 0x47
 8008e4e:	e091      	b.n	8008f74 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8008e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008e54:	1cd8      	adds	r0, r3, #3
 8008e56:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8008e5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	f003 f877 	bl	800bf56 <memcpy>
    index_input += size;
 8008e68:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8008e6c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008e70:	4413      	add	r3, r2
 8008e72:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8008e76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e7a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008e7e:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008e82:	8812      	ldrh	r2, [r2, #0]
 8008e84:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008e86:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008e8a:	3302      	adds	r3, #2
 8008e8c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e94:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008e98:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008e9a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8008ea4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ea8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008eac:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008eae:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8008eb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ebc:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8008ec0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008ec2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8008ecc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ed0:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8008ed4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008ed6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008eda:	3301      	adds	r3, #1
 8008edc:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8008ee0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ee4:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8008ee8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008eea:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008eee:	3301      	adds	r3, #1
 8008ef0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ef4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008ef8:	2218      	movs	r2, #24
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f002 ffaa 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8008f02:	233f      	movs	r3, #63	@ 0x3f
 8008f04:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008f08:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008f0c:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008f18:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008f1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008f20:	f107 0310 	add.w	r3, r7, #16
 8008f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008f28:	2303      	movs	r3, #3
 8008f2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008f2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008f32:	2100      	movs	r1, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 ff2b 	bl	800ad90 <hci_send_req>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da01      	bge.n	8008f44 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008f40:	23ff      	movs	r3, #255	@ 0xff
 8008f42:	e017      	b.n	8008f74 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 8008f44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f48:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008f52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	e00a      	b.n	8008f74 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8008f5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008f66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008f70:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd90      	pop	{r4, r7, pc}

08008f7e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8008f7e:	b5b0      	push	{r4, r5, r7, lr}
 8008f80:	b0cc      	sub	sp, #304	@ 0x130
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	4605      	mov	r5, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008f94:	462a      	mov	r2, r5
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fa8:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008fac:	4602      	mov	r2, r0
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fb4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008fb8:	460a      	mov	r2, r1
 8008fba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008fc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fc8:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008fcc:	2200      	movs	r2, #0
 8008fce:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fda:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008fde:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008fe2:	8812      	ldrh	r2, [r2, #0]
 8008fe4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008fe6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008fea:	3302      	adds	r3, #2
 8008fec:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ff4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ff8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008ffc:	8812      	ldrh	r2, [r2, #0]
 8008ffe:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009000:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009004:	3302      	adds	r3, #2
 8009006:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800900a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800900e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009012:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800901a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800901e:	3301      	adds	r3, #1
 8009020:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8009024:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009028:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800902c:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009034:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009038:	3301      	adds	r3, #1
 800903a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800903e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009042:	1d98      	adds	r0, r3, #6
 8009044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009048:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009054:	f002 ff7f 	bl	800bf56 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8009058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800905c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009060:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	4413      	add	r3, r2
 8009068:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800906c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009070:	2218      	movs	r2, #24
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f002 feee 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 800907a:	233f      	movs	r3, #63	@ 0x3f
 800907c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009080:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009084:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009088:	f107 030c 	add.w	r3, r7, #12
 800908c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009090:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009094:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009098:	f107 030b 	add.w	r3, r7, #11
 800909c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80090a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fe6f 	bl	800ad90 <hci_send_req>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	da01      	bge.n	80090bc <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80090b8:	23ff      	movs	r3, #255	@ 0xff
 80090ba:	e00d      	b.n	80090d8 <aci_gatt_update_char_value+0x15a>
  if (status) {
 80090bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090c0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <aci_gatt_update_char_value+0x158>
    return status;
 80090ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090ce:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	e000      	b.n	80090d8 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80090de:	46bd      	mov	sp, r7
 80090e0:	bdb0      	pop	{r4, r5, r7, pc}

080090e2 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b0cc      	sub	sp, #304	@ 0x130
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	4602      	mov	r2, r0
 80090ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80090f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80090f4:	f107 030c 	add.w	r3, r7, #12
 80090f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80090fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009100:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800910e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009112:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009116:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800911e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009122:	3302      	adds	r3, #2
 8009124:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009128:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800912c:	2218      	movs	r2, #24
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f002 fe90 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8009136:	233f      	movs	r3, #63	@ 0x3f
 8009138:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800913c:	f240 1327 	movw	r3, #295	@ 0x127
 8009140:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009144:	f107 030c 	add.w	r3, r7, #12
 8009148:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800914c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009150:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009154:	f107 030b 	add.w	r3, r7, #11
 8009158:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800915c:	2301      	movs	r3, #1
 800915e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fe11 	bl	800ad90 <hci_send_req>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	da01      	bge.n	8009178 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8009174:	23ff      	movs	r3, #255	@ 0xff
 8009176:	e00d      	b.n	8009194 <aci_gatt_allow_read+0xb2>
  if (status) {
 8009178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800917c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <aci_gatt_allow_read+0xb0>
    return status;
 8009186:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800918a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	e000      	b.n	8009194 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b0ee      	sub	sp, #440	@ 0x1b8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80091a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80091ac:	6019      	str	r1, [r3, #0]
 80091ae:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80091b2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80091bc:	f2a3 13a9 	subw	r3, r3, #425	@ 0x1a9
 80091c0:	4602      	mov	r2, r0
 80091c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 80091c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80091c8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80091cc:	f107 0314 	add.w	r3, r7, #20
 80091d0:	2280      	movs	r2, #128	@ 0x80
 80091d2:	2100      	movs	r1, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f002 fe3e 	bl	800be56 <memset>
  uint8_t index_input = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  cp0->Offset = htob(Offset, 1);
 80091e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80091e4:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80091e8:	f2a2 12a9 	subw	r2, r2, #425	@ 0x1a9
 80091ec:	7812      	ldrb	r2, [r2, #0]
 80091ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091f0:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80091f4:	3301      	adds	r3, #1
 80091f6:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091fa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80091fe:	2218      	movs	r2, #24
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f002 fe27 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8009208:	233f      	movs	r3, #63	@ 0x3f
 800920a:	f8a7 3198 	strh.w	r3, [r7, #408]	@ 0x198
  rq.ocf = 0x00d;
 800920e:	230d      	movs	r3, #13
 8009210:	f8a7 319a 	strh.w	r3, [r7, #410]	@ 0x19a
  rq.cparam = cmd_buffer;
 8009214:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009218:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  rq.clen = index_input;
 800921c:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 8009220:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  rq.rparam = &resp;
 8009224:	f107 0314 	add.w	r3, r7, #20
 8009228:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  rq.rlen = sizeof(resp);
 800922c:	2380      	movs	r3, #128	@ 0x80
 800922e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 8009232:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fda9 	bl	800ad90 <hci_send_req>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	da01      	bge.n	8009248 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 8009244:	23ff      	movs	r3, #255	@ 0xff
 8009246:	e029      	b.n	800929c <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 8009248:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800924c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8009256:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800925a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	e01c      	b.n	800929c <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8009262:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009266:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800926a:	785a      	ldrb	r2, [r3, #1]
 800926c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009270:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009278:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800927c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	f107 0314 	add.w	r3, r7, #20
 800928a:	1c99      	adds	r1, r3, #2
 800928c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009290:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	f002 fe5e 	bl	800bf56 <memcpy>
  return BLE_STATUS_SUCCESS;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b0cc      	sub	sp, #304	@ 0x130
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	4602      	mov	r2, r0
 80092ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092b2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092bc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80092c0:	460a      	mov	r2, r1
 80092c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80092c4:	f107 030c 	add.w	r3, r7, #12
 80092c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80092cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092d0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 80092de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092e6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092ee:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80092f2:	3301      	adds	r3, #1
 80092f4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 80092f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009300:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009304:	7812      	ldrb	r2, [r2, #0]
 8009306:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009308:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800930c:	3301      	adds	r3, #1
 800930e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009312:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009316:	2218      	movs	r2, #24
 8009318:	2100      	movs	r1, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f002 fd9b 	bl	800be56 <memset>
  rq.ogf = 0x3f;
 8009320:	233f      	movs	r3, #63	@ 0x3f
 8009322:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8009326:	230f      	movs	r3, #15
 8009328:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009334:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009338:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800933c:	f107 030b 	add.w	r3, r7, #11
 8009340:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009344:	2301      	movs	r3, #1
 8009346:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800934a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f001 fd1d 	bl	800ad90 <hci_send_req>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	da01      	bge.n	8009360 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800935c:	23ff      	movs	r3, #255	@ 0xff
 800935e:	e00d      	b.n	800937c <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8009360:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009364:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d005      	beq.n	800937a <aci_hal_set_tx_power_level+0xd4>
    return status;
 800936e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009372:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	e000      	b.n	800937c <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	7818      	ldrb	r0, [r3, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80093a0:	b299      	uxth	r1, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	78db      	ldrb	r3, [r3, #3]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f7f9 fa1c 	bl	80027e4 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	7818      	ldrb	r0, [r3, #0]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80093d0:	b299      	uxth	r1, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	78db      	ldrb	r3, [r3, #3]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f000 ffca 	bl	800a370 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80093e6:	b590      	push	{r4, r7, lr}
 80093e8:	b087      	sub	sp, #28
 80093ea:	af02      	add	r7, sp, #8
 80093ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	7818      	ldrb	r0, [r3, #0]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009400:	b299      	uxth	r1, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	78da      	ldrb	r2, [r3, #3]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	889b      	ldrh	r3, [r3, #4]
 800940a:	b29c      	uxth	r4, r3
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	88db      	ldrh	r3, [r3, #6]
 8009410:	b29b      	uxth	r3, r3
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	4623      	mov	r3, r4
 8009416:	f000 ffba 	bl	800a38e <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	bd90      	pop	{r4, r7, pc}

08009424 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 ffbc 	bl	800a3b6 <hci_hardware_error_event>

  return status;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b0a6      	sub	sp, #152	@ 0x98
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009450:	2300      	movs	r3, #0
 8009452:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800945c:	2301      	movs	r3, #1
 800945e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009462:	2300      	movs	r3, #0
 8009464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009468:	e02e      	b.n	80094c8 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800946a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800946e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800947a:	b29a      	uxth	r2, r3
 800947c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	3398      	adds	r3, #152	@ 0x98
 8009484:	443b      	add	r3, r7
 8009486:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800948a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800948e:	3302      	adds	r3, #2
 8009490:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009494:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	3398      	adds	r3, #152	@ 0x98
 80094ae:	443b      	add	r3, r7
 80094b0:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80094b4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80094b8:	3302      	adds	r3, #2
 80094ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80094be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094c2:	3301      	adds	r3, #1
 80094c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094d4:	4293      	cmp	r3, r2
 80094d6:	dbc8      	blt.n	800946a <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 80094d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f107 0208 	add.w	r2, r7, #8
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 ff71 	bl	800a3cc <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80094ea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3798      	adds	r7, #152	@ 0x98
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 ff6a 	bl	800a3e4 <hci_data_buffer_overflow_event>

  return status;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009534:	b29b      	uxth	r3, r3
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f000 ff5e 	bl	800a3fa <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f001 f9e6 	bl	800a92e <aci_blue_initialized_event>

  return status;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f9e0 	bl	800a944 <aci_blue_events_lost_event>

  return status;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800958e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009592:	b08d      	sub	sp, #52	@ 0x34
 8009594:	af08      	add	r7, sp, #32
 8009596:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f893 c000 	ldrb.w	ip, [r3]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f8d3 e001 	ldr.w	lr, [r3, #1]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f8d3 8005 	ldr.w	r8, [r3, #5]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f8d3 9009 	ldr.w	r9, [r3, #9]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	f8d1 1015 	ldr.w	r1, [r1, #21]
 80095cc:	68b8      	ldr	r0, [r7, #8]
 80095ce:	f8d0 0019 	ldr.w	r0, [r0, #25]
 80095d2:	68bc      	ldr	r4, [r7, #8]
 80095d4:	f8d4 401d 	ldr.w	r4, [r4, #29]
 80095d8:	68bd      	ldr	r5, [r7, #8]
 80095da:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 80095de:	68be      	ldr	r6, [r7, #8]
 80095e0:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 80095e8:	9307      	str	r3, [sp, #28]
 80095ea:	9606      	str	r6, [sp, #24]
 80095ec:	9505      	str	r5, [sp, #20]
 80095ee:	9404      	str	r4, [sp, #16]
 80095f0:	9003      	str	r0, [sp, #12]
 80095f2:	9102      	str	r1, [sp, #8]
 80095f4:	9201      	str	r2, [sp, #4]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	464b      	mov	r3, r9
 80095fc:	4642      	mov	r2, r8
 80095fe:	4671      	mov	r1, lr
 8009600:	4660      	mov	r0, ip
 8009602:	f001 f9a9 	bl	800a958 <aci_blue_crash_info_event>

  return status;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009612 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	7818      	ldrb	r0, [r3, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	7859      	ldrb	r1, [r3, #1]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009630:	461a      	mov	r2, r3
 8009632:	f001 f99f 	bl	800a974 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f993 0000 	ldrsb.w	r0, [r3]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800965e:	461a      	mov	r2, r3
 8009660:	f001 f996 	bl	800a990 <aci_hal_scan_req_report_event>

  return status;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	7818      	ldrb	r0, [r3, #0]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800968a:	461a      	mov	r2, r3
 800968c:	f001 f98e 	bl	800a9ac <aci_hal_fw_error_event>

  return status;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 80096a6:	f000 ff3e 	bl	800a526 <aci_gap_limited_discoverable_event>

  return status;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b298      	uxth	r0, r3
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	7899      	ldrb	r1, [r3, #2]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	78db      	ldrb	r3, [r3, #3]
 80096d2:	461a      	mov	r2, r3
 80096d4:	f000 ff2e 	bl	800a534 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 ff2a 	bl	800a552 <aci_gap_pass_key_req_event>

  return status;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	4618      	mov	r0, r3
 8009720:	f000 ff22 	bl	800a568 <aci_gap_authorization_req_event>

  return status;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 800973a:	f000 ff20 	bl	800a57e <aci_gap_slave_security_initiated_event>

  return status;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8009754:	f000 ff1a 	bl	800a58c <aci_gap_bond_lost_event>

  return status;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	7818      	ldrb	r0, [r3, #0]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	7859      	ldrb	r1, [r3, #1]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009782:	f000 ff0a 	bl	800a59a <aci_gap_proc_complete_event>

  return status;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 ff07 	bl	800a5ba <aci_gap_addr_not_resolved_event>

  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80097d2:	4619      	mov	r1, r3
 80097d4:	4610      	mov	r0, r2
 80097d6:	f000 fefb 	bl	800a5d0 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	789b      	ldrb	r3, [r3, #2]
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f000 fef1 	bl	800a5e8 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29a      	uxth	r2, r3
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	b29b      	uxth	r3, r3
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f001 f839 	bl	800a8a6 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b298      	uxth	r0, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800985c:	461a      	mov	r2, r3
 800985e:	f001 f830 	bl	800a8c2 <aci_l2cap_proc_timeout_event>

  return status;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986e:	b089      	sub	sp, #36	@ 0x24
 8009870:	af04      	add	r7, sp, #16
 8009872:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	b298      	uxth	r0, r3
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	789c      	ldrb	r4, [r3, #2]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800988c:	b29d      	uxth	r5, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009894:	b29e      	uxth	r6, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800989c:	b29b      	uxth	r3, r3
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80098a4:	b292      	uxth	r2, r2
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 80098ac:	b289      	uxth	r1, r1
 80098ae:	9102      	str	r1, [sp, #8]
 80098b0:	9201      	str	r2, [sp, #4]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4633      	mov	r3, r6
 80098b6:	462a      	mov	r2, r5
 80098b8:	4621      	mov	r1, r4
 80098ba:	f001 f810 	bl	800a8de <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098c8 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b298      	uxth	r0, r3
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	7899      	ldrb	r1, [r3, #2]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	4623      	mov	r3, r4
 80098f6:	f001 f806 	bl	800a906 <aci_l2cap_command_reject_event>

  return status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	bd90      	pop	{r4, r7, pc}

08009904 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8009904:	b590      	push	{r4, r7, lr}
 8009906:	b087      	sub	sp, #28
 8009908:	af02      	add	r7, sp, #8
 800990a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b298      	uxth	r0, r3
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	885b      	ldrh	r3, [r3, #2]
 800991e:	b299      	uxth	r1, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	889b      	ldrh	r3, [r3, #4]
 8009924:	b29a      	uxth	r2, r3
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	88db      	ldrh	r3, [r3, #6]
 800992a:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	4623      	mov	r3, r4
 8009934:	f000 fe66 	bl	800a604 <aci_gatt_attribute_modified_event>

  return status;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	bd90      	pop	{r4, r7, pc}

08009942 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fe67 	bl	800a62c <aci_gatt_proc_timeout_event>

  return status;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29a      	uxth	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	885b      	ldrh	r3, [r3, #2]
 8009982:	b29b      	uxth	r3, r3
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f000 fe5b 	bl	800a642 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b298      	uxth	r0, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	7899      	ldrb	r1, [r3, #2]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80099b8:	f000 fe51 	bl	800a65e <aci_att_find_info_resp_event>

  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b0a6      	sub	sp, #152	@ 0x98
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 80099da:	2303      	movs	r3, #3
 80099dc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80099e0:	2300      	movs	r3, #0
 80099e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099e6:	e02e      	b.n	8009a46 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80099e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80099ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	3398      	adds	r3, #152	@ 0x98
 8009a02:	443b      	add	r3, r7
 8009a04:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009a08:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009a0c:	3302      	adds	r3, #2
 8009a0e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8009a12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	3398      	adds	r3, #152	@ 0x98
 8009a2c:	443b      	add	r3, r7
 8009a2e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009a32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009a36:	3302      	adds	r3, #2
 8009a38:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a40:	3301      	adds	r3, #1
 8009a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a4a:	789b      	ldrb	r3, [r3, #2]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a52:	4293      	cmp	r3, r2
 8009a54:	dbc8      	blt.n	80099e8 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8009a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b298      	uxth	r0, r3
 8009a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a62:	789b      	ldrb	r3, [r3, #2]
 8009a64:	f107 0208 	add.w	r2, r7, #8
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f000 fe08 	bl	800a67e <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8009a6e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3798      	adds	r7, #152	@ 0x98
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	b298      	uxth	r0, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	7899      	ldrb	r1, [r3, #2]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009a9c:	f000 fdfd 	bl	800a69a <aci_att_read_by_type_resp_event>

  return status;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	b298      	uxth	r0, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009ac8:	461a      	mov	r2, r3
 8009aca:	f000 fdf6 	bl	800a6ba <aci_att_read_resp_event>

  return status;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	b298      	uxth	r0, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009af6:	461a      	mov	r2, r3
 8009af8:	f000 fded 	bl	800a6d6 <aci_att_read_blob_resp_event>

  return status;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	b298      	uxth	r0, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009b24:	461a      	mov	r2, r3
 8009b26:	f000 fde4 	bl	800a6f2 <aci_att_read_multiple_resp_event>

  return status;
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b298      	uxth	r0, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	7899      	ldrb	r1, [r3, #2]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009b56:	f000 fdda 	bl	800a70e <aci_att_read_by_group_type_resp_event>

  return status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	b298      	uxth	r0, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	885b      	ldrh	r3, [r3, #2]
 8009b7e:	b299      	uxth	r1, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	889b      	ldrh	r3, [r3, #4]
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	4623      	mov	r3, r4
 8009b92:	f000 fdcc 	bl	800a72e <aci_att_prepare_write_resp_event>

  return status;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd90      	pop	{r4, r7, pc}

08009ba0 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fdcd 	bl	800a756 <aci_att_exec_write_resp_event>

  return status;
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b298      	uxth	r0, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	885b      	ldrh	r3, [r3, #2]
 8009be0:	b299      	uxth	r1, r3
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009bea:	f000 fdbf 	bl	800a76c <aci_gatt_indication_event>

  return status;
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b298      	uxth	r0, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	885b      	ldrh	r3, [r3, #2]
 8009c12:	b299      	uxth	r1, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009c1c:	f000 fdb6 	bl	800a78c <aci_gatt_notification_event>

  return status;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c32:	2300      	movs	r3, #0
 8009c34:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	789b      	ldrb	r3, [r3, #2]
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	f000 fdb0 	bl	800a7ac <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b298      	uxth	r0, r3
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	7899      	ldrb	r1, [r3, #2]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	795b      	ldrb	r3, [r3, #5]
 8009c7c:	f000 fda4 	bl	800a7c8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	b298      	uxth	r0, r3
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	885b      	ldrh	r3, [r3, #2]
 8009ca4:	b299      	uxth	r1, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009cae:	f000 fd9f 	bl	800a7f0 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b298      	uxth	r0, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	885b      	ldrh	r3, [r3, #2]
 8009cd6:	b299      	uxth	r1, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009ce0:	f000 fd96 	bl	800a810 <aci_gatt_write_permit_req_event>

  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b298      	uxth	r0, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	885b      	ldrh	r3, [r3, #2]
 8009d08:	b299      	uxth	r1, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	889b      	ldrh	r3, [r3, #4]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	461a      	mov	r2, r3
 8009d12:	f7f8 fd87 	bl	8002824 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b0a6      	sub	sp, #152	@ 0x98
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 8009d34:	2303      	movs	r3, #3
 8009d36:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d40:	e019      	b.n	8009d76 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8009d42:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	3398      	adds	r3, #152	@ 0x98
 8009d5c:	443b      	add	r3, r7
 8009d5e:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009d62:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009d66:	3302      	adds	r3, #2
 8009d68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d70:	3301      	adds	r3, #1
 8009d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d7a:	789b      	ldrb	r3, [r3, #2]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d82:	4293      	cmp	r3, r2
 8009d84:	dbdd      	blt.n	8009d42 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8009d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b298      	uxth	r0, r3
 8009d8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d92:	789b      	ldrb	r3, [r3, #2]
 8009d94:	f107 0208 	add.w	r2, r7, #8
 8009d98:	4619      	mov	r1, r3
 8009d9a:	f000 fd49 	bl	800a830 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8009d9e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3798      	adds	r7, #152	@ 0x98
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	885b      	ldrh	r3, [r3, #2]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f000 fd3f 	bl	800a84c <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fd3a 	bl	800a868 <aci_gatt_server_confirmation_event>

  return status;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8009dfe:	b590      	push	{r4, r7, lr}
 8009e00:	b087      	sub	sp, #28
 8009e02:	af02      	add	r7, sp, #8
 8009e04:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b298      	uxth	r0, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	885b      	ldrh	r3, [r3, #2]
 8009e18:	b299      	uxth	r1, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	889b      	ldrh	r3, [r3, #4]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	f000 fd27 	bl	800a87e <aci_gatt_prepare_write_permit_req_event>

  return status;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd90      	pop	{r4, r7, pc}

08009e3a <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8009e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3c:	b08b      	sub	sp, #44	@ 0x2c
 8009e3e:	af06      	add	r7, sp, #24
 8009e40:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	781d      	ldrb	r5, [r3, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e54:	b29e      	uxth	r6, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f893 c003 	ldrb.w	ip, [r3, #3]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8009e6c:	b292      	uxth	r2, r2
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8009e74:	b289      	uxth	r1, r1
 8009e76:	68b8      	ldr	r0, [r7, #8]
 8009e78:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8009e7c:	b280      	uxth	r0, r0
 8009e7e:	68bc      	ldr	r4, [r7, #8]
 8009e80:	7c64      	ldrb	r4, [r4, #17]
 8009e82:	9404      	str	r4, [sp, #16]
 8009e84:	9003      	str	r0, [sp, #12]
 8009e86:	9102      	str	r1, [sp, #8]
 8009e88:	9201      	str	r2, [sp, #4]
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	4673      	mov	r3, lr
 8009e8e:	4662      	mov	r2, ip
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	f7f8 fc86 	bl	80027a4 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ea2 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b0a4      	sub	sp, #144	@ 0x90
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ec2:	e0b3      	b.n	800a02c <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8009ec4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009ec8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	4413      	add	r3, r2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	3301      	adds	r3, #1
 8009eda:	7819      	ldrb	r1, [r3, #0]
 8009edc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	3390      	adds	r3, #144	@ 0x90
 8009eea:	443b      	add	r3, r7
 8009eec:	3b88      	subs	r3, #136	@ 0x88
 8009eee:	460a      	mov	r2, r1
 8009ef0:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009ef2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8009efc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009f00:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	4413      	add	r3, r2
 8009f0e:	440b      	add	r3, r1
 8009f10:	3302      	adds	r3, #2
 8009f12:	7819      	ldrb	r1, [r3, #0]
 8009f14:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	3390      	adds	r3, #144	@ 0x90
 8009f22:	443b      	add	r3, r7
 8009f24:	3b87      	subs	r3, #135	@ 0x87
 8009f26:	460a      	mov	r2, r1
 8009f28:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009f2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8009f34:	f107 0108 	add.w	r1, r7, #8
 8009f38:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	440b      	add	r3, r1
 8009f46:	1c98      	adds	r0, r3, #2
 8009f48:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	005b      	lsls	r3, r3, #1
 8009f54:	4413      	add	r3, r2
 8009f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f5a:	4413      	add	r3, r2
 8009f5c:	3303      	adds	r3, #3
 8009f5e:	2206      	movs	r2, #6
 8009f60:	4619      	mov	r1, r3
 8009f62:	f001 fff8 	bl	800bf56 <memcpy>
    size += 6;
 8009f66:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009f6a:	3306      	adds	r3, #6
 8009f6c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8009f70:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009f74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	4413      	add	r3, r2
 8009f82:	440b      	add	r3, r1
 8009f84:	3309      	adds	r3, #9
 8009f86:	7819      	ldrb	r1, [r3, #0]
 8009f88:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	3390      	adds	r3, #144	@ 0x90
 8009f96:	443b      	add	r3, r7
 8009f98:	3b80      	subs	r3, #128	@ 0x80
 8009f9a:	460a      	mov	r2, r1
 8009f9c:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009f9e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8009fa8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fbc:	4413      	add	r3, r2
 8009fbe:	1c99      	adds	r1, r3, #2
 8009fc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	3390      	adds	r3, #144	@ 0x90
 8009fce:	443b      	add	r3, r7
 8009fd0:	3b7c      	subs	r3, #124	@ 0x7c
 8009fd2:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8009fd4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009fd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	4413      	add	r3, r2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3309      	adds	r3, #9
 8009fea:	781a      	ldrb	r2, [r3, #0]
 8009fec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8009ff6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	b259      	sxtb	r1, r3
 800a002:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	3390      	adds	r3, #144	@ 0x90
 800a010:	443b      	add	r3, r7
 800a012:	3b78      	subs	r3, #120	@ 0x78
 800a014:	460a      	mov	r2, r1
 800a016:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a018:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a01c:	3301      	adds	r3, #1
 800a01e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a022:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a026:	3301      	adds	r3, #1
 800a028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a02c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a038:	4293      	cmp	r3, r2
 800a03a:	f6ff af43 	blt.w	8009ec4 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800a03e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	f107 0208 	add.w	r2, r7, #8
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 f9e3 	bl	800a416 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800a050:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800a054:	4618      	mov	r0, r3
 800a056:	3790      	adds	r7, #144	@ 0x90
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b087      	sub	sp, #28
 800a060:	af02      	add	r7, sp, #8
 800a062:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	7818      	ldrb	r0, [r3, #0]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a076:	b299      	uxth	r1, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a086:	b29c      	uxth	r4, r3
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	4623      	mov	r3, r4
 800a094:	f000 f9cb 	bl	800a42e <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd90      	pop	{r4, r7, pc}

0800a0a2 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	7818      	ldrb	r0, [r3, #0]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0bc:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 f9c7 	bl	800a456 <hci_le_read_remote_used_features_complete_event>

  return status;
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	895b      	ldrh	r3, [r3, #10]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f000 f9bd 	bl	800a472 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800a102:	b590      	push	{r4, r7, lr}
 800a104:	b087      	sub	sp, #28
 800a106:	af02      	add	r7, sp, #8
 800a108:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b298      	uxth	r0, r3
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	885b      	ldrh	r3, [r3, #2]
 800a11c:	b299      	uxth	r1, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	889b      	ldrh	r3, [r3, #4]
 800a122:	b29a      	uxth	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	88db      	ldrh	r3, [r3, #6]
 800a128:	b29c      	uxth	r4, r3
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	891b      	ldrh	r3, [r3, #8]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4623      	mov	r3, r4
 800a134:	f000 f9ab 	bl	800a48e <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd90      	pop	{r4, r7, pc}

0800a142 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f000 f9aa 	bl	800a4b6 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a174:	2300      	movs	r3, #0
 800a176:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a184:	4619      	mov	r1, r3
 800a186:	4610      	mov	r0, r2
 800a188:	f000 f9a1 	bl	800a4ce <hci_le_generate_dhkey_complete_event>

  return status;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a19a:	b08d      	sub	sp, #52	@ 0x34
 800a19c:	af08      	add	r7, sp, #32
 800a19e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f893 c000 	ldrb.w	ip, [r3]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1b4:	fa1f fe83 	uxth.w	lr, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a1d0:	68b8      	ldr	r0, [r7, #8]
 800a1d2:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800a1d6:	b280      	uxth	r0, r0
 800a1d8:	68bc      	ldr	r4, [r7, #8]
 800a1da:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800a1de:	b2a4      	uxth	r4, r4
 800a1e0:	68bd      	ldr	r5, [r7, #8]
 800a1e2:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800a1e6:	b2ad      	uxth	r5, r5
 800a1e8:	68be      	ldr	r6, [r7, #8]
 800a1ea:	7f76      	ldrb	r6, [r6, #29]
 800a1ec:	9606      	str	r6, [sp, #24]
 800a1ee:	9505      	str	r5, [sp, #20]
 800a1f0:	9404      	str	r4, [sp, #16]
 800a1f2:	9003      	str	r0, [sp, #12]
 800a1f4:	9102      	str	r1, [sp, #8]
 800a1f6:	9201      	str	r2, [sp, #4]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	4671      	mov	r1, lr
 800a200:	4660      	mov	r0, ip
 800a202:	f000 f970 	bl	800a4e6 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800a206:	7bfb      	ldrb	r3, [r7, #15]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a212 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b0a6      	sub	sp, #152	@ 0x98
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a21a:	2300      	movs	r3, #0
 800a21c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a22c:	2300      	movs	r3, #0
 800a22e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a232:	e085      	b.n	800a340 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800a234:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a238:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	4413      	add	r3, r2
 800a240:	3301      	adds	r3, #1
 800a242:	781a      	ldrb	r2, [r3, #0]
 800a244:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	3398      	adds	r3, #152	@ 0x98
 800a24c:	443b      	add	r3, r7
 800a24e:	3b90      	subs	r3, #144	@ 0x90
 800a250:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a252:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a256:	3301      	adds	r3, #1
 800a258:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800a25c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a260:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	4413      	add	r3, r2
 800a268:	3302      	adds	r3, #2
 800a26a:	781a      	ldrb	r2, [r3, #0]
 800a26c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	3398      	adds	r3, #152	@ 0x98
 800a274:	443b      	add	r3, r7
 800a276:	3b8f      	subs	r3, #143	@ 0x8f
 800a278:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a27a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a27e:	3301      	adds	r3, #1
 800a280:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800a284:	f107 0208 	add.w	r2, r7, #8
 800a288:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	4413      	add	r3, r2
 800a290:	1c98      	adds	r0, r3, #2
 800a292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a29c:	4413      	add	r3, r2
 800a29e:	3303      	adds	r3, #3
 800a2a0:	2206      	movs	r2, #6
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	f001 fe57 	bl	800bf56 <memcpy>
    size += 6;
 800a2a8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a2ac:	3306      	adds	r3, #6
 800a2ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800a2b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a2b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	4413      	add	r3, r2
 800a2be:	3309      	adds	r3, #9
 800a2c0:	781a      	ldrb	r2, [r3, #0]
 800a2c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	3398      	adds	r3, #152	@ 0x98
 800a2ca:	443b      	add	r3, r7
 800a2cc:	3b88      	subs	r3, #136	@ 0x88
 800a2ce:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a2d0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800a2da:	f107 0208 	add.w	r2, r7, #8
 800a2de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2e2:	011b      	lsls	r3, r3, #4
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	4413      	add	r3, r2
 800a2e8:	1c58      	adds	r0, r3, #1
 800a2ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	2206      	movs	r2, #6
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	f001 fe2a 	bl	800bf56 <memcpy>
    size += 6;
 800a302:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a306:	3306      	adds	r3, #6
 800a308:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800a30c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a310:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a314:	011b      	lsls	r3, r3, #4
 800a316:	4413      	add	r3, r2
 800a318:	3310      	adds	r3, #16
 800a31a:	f993 2000 	ldrsb.w	r2, [r3]
 800a31e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	3398      	adds	r3, #152	@ 0x98
 800a326:	443b      	add	r3, r7
 800a328:	3b81      	subs	r3, #129	@ 0x81
 800a32a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a32c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a330:	3301      	adds	r3, #1
 800a332:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a336:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a33a:	3301      	adds	r3, #1
 800a33c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a34c:	4293      	cmp	r3, r2
 800a34e:	f6ff af71 	blt.w	800a234 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800a352:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f107 0208 	add.w	r2, r7, #8
 800a35c:	4611      	mov	r1, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f8d5 	bl	800a50e <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800a364:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3798      	adds	r7, #152	@ 0x98
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	71fb      	strb	r3, [r7, #7]
 800a37a:	460b      	mov	r3, r1
 800a37c:	80bb      	strh	r3, [r7, #4]
 800a37e:	4613      	mov	r3, r2
 800a380:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800a382:	bf00      	nop
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800a38e:	b490      	push	{r4, r7}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	461a      	mov	r2, r3
 800a39c:	4623      	mov	r3, r4
 800a39e:	71fb      	strb	r3, [r7, #7]
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	80bb      	strh	r3, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	71bb      	strb	r3, [r7, #6]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bc90      	pop	{r4, r7}
 800a3b4:	4770      	bx	lr

0800a3b6 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	4603      	mov	r3, r0
 800a3be:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6039      	str	r1, [r7, #0]
 800a3d6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	4603      	mov	r3, r0
 800a402:	460a      	mov	r2, r1
 800a404:	71fb      	strb	r3, [r7, #7]
 800a406:	4613      	mov	r3, r2
 800a408:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	4603      	mov	r3, r0
 800a41e:	6039      	str	r1, [r7, #0]
 800a420:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800a42e:	b490      	push	{r4, r7}
 800a430:	b082      	sub	sp, #8
 800a432:	af00      	add	r7, sp, #0
 800a434:	4604      	mov	r4, r0
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	461a      	mov	r2, r3
 800a43c:	4623      	mov	r3, r4
 800a43e:	71fb      	strb	r3, [r7, #7]
 800a440:	4603      	mov	r3, r0
 800a442:	80bb      	strh	r3, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	807b      	strh	r3, [r7, #2]
 800a448:	4613      	mov	r3, r2
 800a44a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bc90      	pop	{r4, r7}
 800a454:	4770      	bx	lr

0800a456 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	4603      	mov	r3, r0
 800a45e:	603a      	str	r2, [r7, #0]
 800a460:	71fb      	strb	r3, [r7, #7]
 800a462:	460b      	mov	r3, r1
 800a464:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	4603      	mov	r3, r0
 800a47a:	6039      	str	r1, [r7, #0]
 800a47c:	80fb      	strh	r3, [r7, #6]
 800a47e:	4613      	mov	r3, r2
 800a480:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800a48e:	b490      	push	{r4, r7}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	4604      	mov	r4, r0
 800a496:	4608      	mov	r0, r1
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	4623      	mov	r3, r4
 800a49e:	80fb      	strh	r3, [r7, #6]
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	80bb      	strh	r3, [r7, #4]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	807b      	strh	r3, [r7, #2]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc90      	pop	{r4, r7}
 800a4b4:	4770      	bx	lr

0800a4b6 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	4603      	mov	r3, r0
 800a4be:	6039      	str	r1, [r7, #0]
 800a4c0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	6039      	str	r1, [r7, #0]
 800a4d8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800a4e6:	b490      	push	{r4, r7}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	4623      	mov	r3, r4
 800a4f6:	71fb      	strb	r3, [r7, #7]
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	80bb      	strh	r3, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	71bb      	strb	r3, [r7, #6]
 800a500:	4613      	mov	r3, r2
 800a502:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc90      	pop	{r4, r7}
 800a50c:	4770      	bx	lr

0800a50e <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	4603      	mov	r3, r0
 800a516:	6039      	str	r1, [r7, #0]
 800a518:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800a526:	b480      	push	{r7}
 800a528:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800a52a:	bf00      	nop
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	80fb      	strh	r3, [r7, #6]
 800a53e:	460b      	mov	r3, r1
 800a540:	717b      	strb	r3, [r7, #5]
 800a542:	4613      	mov	r3, r2
 800a544:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	4603      	mov	r3, r0
 800a55a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800a57e:	b480      	push	{r7}
 800a580:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800a582:	bf00      	nop
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800a590:	bf00      	nop
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	603b      	str	r3, [r7, #0]
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	71fb      	strb	r3, [r7, #7]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	71bb      	strb	r3, [r7, #6]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	6039      	str	r1, [r7, #0]
 800a5da:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	460a      	mov	r2, r1
 800a5f2:	80fb      	strh	r3, [r7, #6]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 800a604:	b490      	push	{r4, r7}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	461a      	mov	r2, r3
 800a612:	4623      	mov	r3, r4
 800a614:	80fb      	strh	r3, [r7, #6]
 800a616:	4603      	mov	r3, r0
 800a618:	80bb      	strh	r3, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	807b      	strh	r3, [r7, #2]
 800a61e:	4613      	mov	r3, r2
 800a620:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bc90      	pop	{r4, r7}
 800a62a:	4770      	bx	lr

0800a62c <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	4603      	mov	r3, r0
 800a64a:	460a      	mov	r2, r1
 800a64c:	80fb      	strh	r3, [r7, #6]
 800a64e:	4613      	mov	r3, r2
 800a650:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800a652:	bf00      	nop
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	603b      	str	r3, [r7, #0]
 800a666:	4603      	mov	r3, r0
 800a668:	80fb      	strh	r3, [r7, #6]
 800a66a:	460b      	mov	r3, r1
 800a66c:	717b      	strb	r3, [r7, #5]
 800a66e:	4613      	mov	r3, r2
 800a670:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	4603      	mov	r3, r0
 800a686:	603a      	str	r2, [r7, #0]
 800a688:	80fb      	strh	r3, [r7, #6]
 800a68a:	460b      	mov	r3, r1
 800a68c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	603b      	str	r3, [r7, #0]
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	80fb      	strh	r3, [r7, #6]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	717b      	strb	r3, [r7, #5]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800a6ae:	bf00      	nop
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	603a      	str	r2, [r7, #0]
 800a6c4:	80fb      	strh	r3, [r7, #6]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	4603      	mov	r3, r0
 800a6de:	603a      	str	r2, [r7, #0]
 800a6e0:	80fb      	strh	r3, [r7, #6]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	603a      	str	r2, [r7, #0]
 800a6fc:	80fb      	strh	r3, [r7, #6]
 800a6fe:	460b      	mov	r3, r1
 800a700:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4603      	mov	r3, r0
 800a718:	80fb      	strh	r3, [r7, #6]
 800a71a:	460b      	mov	r3, r1
 800a71c:	717b      	strb	r3, [r7, #5]
 800a71e:	4613      	mov	r3, r2
 800a720:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800a72e:	b490      	push	{r4, r7}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	4604      	mov	r4, r0
 800a736:	4608      	mov	r0, r1
 800a738:	4611      	mov	r1, r2
 800a73a:	461a      	mov	r2, r3
 800a73c:	4623      	mov	r3, r4
 800a73e:	80fb      	strh	r3, [r7, #6]
 800a740:	4603      	mov	r3, r0
 800a742:	80bb      	strh	r3, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	807b      	strh	r3, [r7, #2]
 800a748:	4613      	mov	r3, r2
 800a74a:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bc90      	pop	{r4, r7}
 800a754:	4770      	bx	lr

0800a756 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	4603      	mov	r3, r0
 800a75e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	607b      	str	r3, [r7, #4]
 800a774:	4603      	mov	r3, r0
 800a776:	81fb      	strh	r3, [r7, #14]
 800a778:	460b      	mov	r3, r1
 800a77a:	81bb      	strh	r3, [r7, #12]
 800a77c:	4613      	mov	r3, r2
 800a77e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800a780:	bf00      	nop
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	4603      	mov	r3, r0
 800a796:	81fb      	strh	r3, [r7, #14]
 800a798:	460b      	mov	r3, r1
 800a79a:	81bb      	strh	r3, [r7, #12]
 800a79c:	4613      	mov	r3, r2
 800a79e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	460a      	mov	r2, r1
 800a7b6:	80fb      	strh	r3, [r7, #6]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800a7c8:	b490      	push	{r4, r7}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4623      	mov	r3, r4
 800a7d8:	80fb      	strh	r3, [r7, #6]
 800a7da:	4603      	mov	r3, r0
 800a7dc:	717b      	strb	r3, [r7, #5]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	807b      	strh	r3, [r7, #2]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bc90      	pop	{r4, r7}
 800a7ee:	4770      	bx	lr

0800a7f0 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	607b      	str	r3, [r7, #4]
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	81fb      	strh	r3, [r7, #14]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	81bb      	strh	r3, [r7, #12]
 800a800:	4613      	mov	r3, r2
 800a802:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	4603      	mov	r3, r0
 800a81a:	81fb      	strh	r3, [r7, #14]
 800a81c:	460b      	mov	r3, r1
 800a81e:	81bb      	strh	r3, [r7, #12]
 800a820:	4613      	mov	r3, r2
 800a822:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800a824:	bf00      	nop
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	603a      	str	r2, [r7, #0]
 800a83a:	80fb      	strh	r3, [r7, #6]
 800a83c:	460b      	mov	r3, r1
 800a83e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	460a      	mov	r2, r1
 800a856:	80fb      	strh	r3, [r7, #6]
 800a858:	4613      	mov	r3, r2
 800a85a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800a87e:	b490      	push	{r4, r7}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	4604      	mov	r4, r0
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	461a      	mov	r2, r3
 800a88c:	4623      	mov	r3, r4
 800a88e:	80fb      	strh	r3, [r7, #6]
 800a890:	4603      	mov	r3, r0
 800a892:	80bb      	strh	r3, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	807b      	strh	r3, [r7, #2]
 800a898:	4613      	mov	r3, r2
 800a89a:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800a89c:	bf00      	nop
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bc90      	pop	{r4, r7}
 800a8a4:	4770      	bx	lr

0800a8a6 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	460a      	mov	r2, r1
 800a8b0:	80fb      	strh	r3, [r7, #6]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800a8b6:	bf00      	nop
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b083      	sub	sp, #12
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	603a      	str	r2, [r7, #0]
 800a8cc:	80fb      	strh	r3, [r7, #6]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800a8de:	b490      	push	{r4, r7}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	80fb      	strh	r3, [r7, #6]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	717b      	strb	r3, [r7, #5]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	807b      	strh	r3, [r7, #2]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bc90      	pop	{r4, r7}
 800a904:	4770      	bx	lr

0800a906 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800a906:	b490      	push	{r4, r7}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	461a      	mov	r2, r3
 800a914:	4623      	mov	r3, r4
 800a916:	80fb      	strh	r3, [r7, #6]
 800a918:	4603      	mov	r3, r0
 800a91a:	717b      	strb	r3, [r7, #5]
 800a91c:	460b      	mov	r3, r1
 800a91e:	807b      	strh	r3, [r7, #2]
 800a920:	4613      	mov	r3, r2
 800a922:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bc90      	pop	{r4, r7}
 800a92c:	4770      	bx	lr

0800a92e <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	4603      	mov	r3, r0
 800a936:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	607a      	str	r2, [r7, #4]
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800a968:	bf00      	nop
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	603a      	str	r2, [r7, #0]
 800a97e:	71fb      	strb	r3, [r7, #7]
 800a980:	460b      	mov	r3, r1
 800a982:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	603a      	str	r2, [r7, #0]
 800a99a:	71fb      	strb	r3, [r7, #7]
 800a99c:	460b      	mov	r3, r1
 800a99e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	603a      	str	r2, [r7, #0]
 800a9b6:	71fb      	strb	r3, [r7, #7]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	2218      	movs	r2, #24
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 fa3b 	bl	800be56 <memset>
  rq.ogf = 0x03;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a9e8:	1dfb      	adds	r3, r7, #7
 800a9ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a9f0:	f107 0308 	add.w	r3, r7, #8
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f9ca 	bl	800ad90 <hci_send_req>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da01      	bge.n	800aa06 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800aa02:	23ff      	movs	r3, #255	@ 0xff
 800aa04:	e005      	b.n	800aa12 <hci_reset+0x4a>
  if (status) {
 800aa06:	79fb      	ldrb	r3, [r7, #7]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <hci_reset+0x48>
    return status;
 800aa0c:	79fb      	ldrb	r3, [r7, #7]
 800aa0e:	e000      	b.n	800aa12 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3720      	adds	r7, #32
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b08e      	sub	sp, #56	@ 0x38
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	607a      	str	r2, [r7, #4]
 800aa26:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800aa28:	f107 0314 	add.w	r3, r7, #20
 800aa2c:	2209      	movs	r2, #9
 800aa2e:	2100      	movs	r1, #0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f001 fa10 	bl	800be56 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aa36:	f107 0320 	add.w	r3, r7, #32
 800aa3a:	2218      	movs	r2, #24
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 fa09 	bl	800be56 <memset>
  rq.ogf = 0x04;
 800aa44:	2304      	movs	r3, #4
 800aa46:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.rparam = &resp;
 800aa4c:	f107 0314 	add.w	r3, r7, #20
 800aa50:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 800aa52:	2309      	movs	r3, #9
 800aa54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800aa56:	f107 0320 	add.w	r3, r7, #32
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 f997 	bl	800ad90 <hci_send_req>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	da01      	bge.n	800aa6c <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800aa68:	23ff      	movs	r3, #255	@ 0xff
 800aa6a:	e018      	b.n	800aa9e <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800aa6c:	7d3b      	ldrb	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <hci_read_local_version_information+0x5c>
    return resp.Status;
 800aa72:	7d3b      	ldrb	r3, [r7, #20]
 800aa74:	e013      	b.n	800aa9e <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800aa76:	7d7a      	ldrb	r2, [r7, #21]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800aa7c:	8afa      	ldrh	r2, [r7, #22]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800aa82:	7e3a      	ldrb	r2, [r7, #24]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800aa88:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800aa92:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa9a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3738      	adds	r7, #56	@ 0x38
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b0cc      	sub	sp, #304	@ 0x130
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	4602      	mov	r2, r0
 800aaae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aab2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800aab6:	6019      	str	r1, [r3, #0]
 800aab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aabc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800aac0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800aac2:	f107 030c 	add.w	r3, r7, #12
 800aac6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800aaca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aace:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800aadc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aae0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aae4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800aae8:	7812      	ldrb	r2, [r2, #0]
 800aaea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aaec:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800aaf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aafa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800ab04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab08:	1c58      	adds	r0, r3, #1
 800ab0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab12:	221f      	movs	r2, #31
 800ab14:	6819      	ldr	r1, [r3, #0]
 800ab16:	f001 fa1e 	bl	800bf56 <memcpy>
  }
  index_input += 31;
 800ab1a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ab1e:	331f      	adds	r3, #31
 800ab20:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab28:	2218      	movs	r2, #24
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 f992 	bl	800be56 <memset>
  rq.ogf = 0x08;
 800ab32:	2308      	movs	r3, #8
 800ab34:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 800ab38:	2309      	movs	r3, #9
 800ab3a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ab3e:	f107 030c 	add.w	r3, r7, #12
 800ab42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ab46:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800ab4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ab4e:	f107 030b 	add.w	r3, r7, #11
 800ab52:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ab5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab60:	2100      	movs	r1, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 f914 	bl	800ad90 <hci_send_req>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da01      	bge.n	800ab72 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 800ab6e:	23ff      	movs	r3, #255	@ 0xff
 800ab70:	e00d      	b.n	800ab8e <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800ab72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab76:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d005      	beq.n	800ab8c <hci_le_set_scan_response_data+0xe6>
    return status;
 800ab80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab84:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	e000      	b.n	800ab8e <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3308      	adds	r3, #8
 800aba4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d001      	beq.n	800abb2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800abae:	2301      	movs	r3, #1
 800abb0:	e00c      	b.n	800abcc <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3302      	adds	r3, #2
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800abc0:	3b03      	subs	r3, #3
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d001      	beq.n	800abca <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800abc6:	2302      	movs	r3, #2
 800abc8:	e000      	b.n	800abcc <verify_packet+0x34>
  
  return 0;      
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b0a6      	sub	sp, #152	@ 0x98
 800abdc:	af00      	add	r7, sp, #0
 800abde:	607b      	str	r3, [r7, #4]
 800abe0:	4603      	mov	r3, r0
 800abe2:	81fb      	strh	r3, [r7, #14]
 800abe4:	460b      	mov	r3, r1
 800abe6:	81bb      	strh	r3, [r7, #12]
 800abe8:	4613      	mov	r3, r2
 800abea:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800abec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abf4:	b21a      	sxth	r2, r3
 800abf6:	89fb      	ldrh	r3, [r7, #14]
 800abf8:	029b      	lsls	r3, r3, #10
 800abfa:	b21b      	sxth	r3, r3
 800abfc:	4313      	orrs	r3, r2
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800ac0c:	f107 0318 	add.w	r3, r7, #24
 800ac10:	3301      	adds	r3, #1
 800ac12:	461a      	mov	r2, r3
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	8819      	ldrh	r1, [r3, #0]
 800ac1a:	789b      	ldrb	r3, [r3, #2]
 800ac1c:	8011      	strh	r1, [r2, #0]
 800ac1e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ac20:	f107 0318 	add.w	r3, r7, #24
 800ac24:	3304      	adds	r3, #4
 800ac26:	7afa      	ldrb	r2, [r7, #11]
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 f993 	bl	800bf56 <memcpy>
  
  if (hciContext.io.Send)
 800ac30:	4b08      	ldr	r3, [pc, #32]	@ (800ac54 <send_cmd+0x7c>)
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d009      	beq.n	800ac4c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800ac38:	4b06      	ldr	r3, [pc, #24]	@ (800ac54 <send_cmd+0x7c>)
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	7afa      	ldrb	r2, [r7, #11]
 800ac3e:	b292      	uxth	r2, r2
 800ac40:	3204      	adds	r2, #4
 800ac42:	b291      	uxth	r1, r2
 800ac44:	f107 0218 	add.w	r2, r7, #24
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4798      	blx	r3
  }
}
 800ac4c:	bf00      	nop
 800ac4e:	3798      	adds	r7, #152	@ 0x98
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000a54 	.word	0x20000a54

0800ac58 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800ac62:	e00a      	b.n	800ac7a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800ac64:	f107 030c 	add.w	r3, r7, #12
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6838      	ldr	r0, [r7, #0]
 800ac6c:	f000 fae8 	bl	800b240 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fa4f 	bl	800b118 <list_insert_head>
  while (!list_is_empty(src_list))
 800ac7a:	6838      	ldr	r0, [r7, #0]
 800ac7c:	f000 fa2a 	bl	800b0d4 <list_is_empty>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d0ee      	beq.n	800ac64 <move_list+0xc>
  }
}
 800ac86:	bf00      	nop
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ac96:	e009      	b.n	800acac <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ac98:	1d3b      	adds	r3, r7, #4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4809      	ldr	r0, [pc, #36]	@ (800acc4 <free_event_list+0x34>)
 800ac9e:	f000 faa8 	bl	800b1f2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4619      	mov	r1, r3
 800aca6:	4808      	ldr	r0, [pc, #32]	@ (800acc8 <free_event_list+0x38>)
 800aca8:	f000 fa5c 	bl	800b164 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800acac:	4806      	ldr	r0, [pc, #24]	@ (800acc8 <free_event_list+0x38>)
 800acae:	f000 faee 	bl	800b28e <list_get_size>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	ddef      	ble.n	800ac98 <free_event_list+0x8>
  }
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	200004d4 	.word	0x200004d4
 800acc8:	200004cc 	.word	0x200004cc

0800accc <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800acdc:	4a18      	ldr	r2, [pc, #96]	@ (800ad40 <hci_init+0x74>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ace2:	4818      	ldr	r0, [pc, #96]	@ (800ad44 <hci_init+0x78>)
 800ace4:	f000 f9e6 	bl	800b0b4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ace8:	4817      	ldr	r0, [pc, #92]	@ (800ad48 <hci_init+0x7c>)
 800acea:	f000 f9e3 	bl	800b0b4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800acee:	f7f8 fa71 	bl	80031d4 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
 800acf6:	e00c      	b.n	800ad12 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	228c      	movs	r2, #140	@ 0x8c
 800acfc:	fb02 f303 	mul.w	r3, r2, r3
 800ad00:	4a12      	ldr	r2, [pc, #72]	@ (800ad4c <hci_init+0x80>)
 800ad02:	4413      	add	r3, r2
 800ad04:	4619      	mov	r1, r3
 800ad06:	480f      	ldr	r0, [pc, #60]	@ (800ad44 <hci_init+0x78>)
 800ad08:	f000 fa2c 	bl	800b164 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	73fb      	strb	r3, [r7, #15]
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	2b09      	cmp	r3, #9
 800ad16:	d9ef      	bls.n	800acf8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800ad18:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <hci_init+0x74>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <hci_init+0x5c>
 800ad20:	4b07      	ldr	r3, [pc, #28]	@ (800ad40 <hci_init+0x74>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2000      	movs	r0, #0
 800ad26:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800ad28:	4b05      	ldr	r3, [pc, #20]	@ (800ad40 <hci_init+0x74>)
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <hci_init+0x6a>
 800ad30:	4b03      	ldr	r3, [pc, #12]	@ (800ad40 <hci_init+0x74>)
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4798      	blx	r3
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000a54 	.word	0x20000a54
 800ad44:	200004cc 	.word	0x200004cc
 800ad48:	200004d4 	.word	0x200004d4
 800ad4c:	200004dc 	.word	0x200004dc

0800ad50 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a0b      	ldr	r2, [pc, #44]	@ (800ad8c <hci_register_io_bus+0x3c>)
 800ad5e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	4a09      	ldr	r2, [pc, #36]	@ (800ad8c <hci_register_io_bus+0x3c>)
 800ad66:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	4a07      	ldr	r2, [pc, #28]	@ (800ad8c <hci_register_io_bus+0x3c>)
 800ad6e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	4a05      	ldr	r2, [pc, #20]	@ (800ad8c <hci_register_io_bus+0x3c>)
 800ad76:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	4a03      	ldr	r2, [pc, #12]	@ (800ad8c <hci_register_io_bus+0x3c>)
 800ad7e:	6093      	str	r3, [r2, #8]
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20000a54 	.word	0x20000a54

0800ad90 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08e      	sub	sp, #56	@ 0x38
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	885b      	ldrh	r3, [r3, #2]
 800ada0:	b21b      	sxth	r3, r3
 800ada2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ada6:	b21a      	sxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	029b      	lsls	r3, r3, #10
 800adae:	b21b      	sxth	r3, r3
 800adb0:	4313      	orrs	r3, r2
 800adb2:	b21b      	sxth	r3, r3
 800adb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800adba:	f107 0308 	add.w	r3, r7, #8
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 f978 	bl	800b0b4 <list_init_head>

  free_event_list();
 800adc4:	f7ff ff64 	bl	800ac90 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	8818      	ldrh	r0, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8859      	ldrh	r1, [r3, #2]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	b2da      	uxtb	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f7ff fefd 	bl	800abd8 <send_cmd>
  
  if (async)
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <hci_send_req+0x58>
  {
    return 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	e0e2      	b.n	800afae <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800ade8:	f7f9 f97e 	bl	80040e8 <HAL_GetTick>
 800adec:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800adee:	f7f9 f97b 	bl	80040e8 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800adfc:	f200 80b3 	bhi.w	800af66 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ae00:	486d      	ldr	r0, [pc, #436]	@ (800afb8 <hci_send_req+0x228>)
 800ae02:	f000 f967 	bl	800b0d4 <list_is_empty>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d000      	beq.n	800ae0e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ae0c:	e7ef      	b.n	800adee <hci_send_req+0x5e>
      {
        break;
 800ae0e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ae10:	f107 0310 	add.w	r3, r7, #16
 800ae14:	4619      	mov	r1, r3
 800ae16:	4868      	ldr	r0, [pc, #416]	@ (800afb8 <hci_send_req+0x228>)
 800ae18:	f000 f9eb 	bl	800b1f2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800ae22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	d17f      	bne.n	800af2a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	3308      	adds	r3, #8
 800ae34:	3303      	adds	r3, #3
 800ae36:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ae3e:	3b03      	subs	r3, #3
 800ae40:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae48:	d04c      	beq.n	800aee4 <hci_send_req+0x154>
 800ae4a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae4c:	dc68      	bgt.n	800af20 <hci_send_req+0x190>
 800ae4e:	2b10      	cmp	r3, #16
 800ae50:	f000 808b 	beq.w	800af6a <hci_send_req+0x1da>
 800ae54:	2b10      	cmp	r3, #16
 800ae56:	dc63      	bgt.n	800af20 <hci_send_req+0x190>
 800ae58:	2b0e      	cmp	r3, #14
 800ae5a:	d023      	beq.n	800aea4 <hci_send_req+0x114>
 800ae5c:	2b0f      	cmp	r3, #15
 800ae5e:	d15f      	bne.n	800af20 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	885b      	ldrh	r3, [r3, #2]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d17e      	bne.n	800af6e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	2b0f      	cmp	r3, #15
 800ae76:	d004      	beq.n	800ae82 <hci_send_req+0xf2>
          if (cs->status) {
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d051      	beq.n	800af24 <hci_send_req+0x194>
            goto failed;
 800ae80:	e078      	b.n	800af74 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695a      	ldr	r2, [r3, #20]
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	bf28      	it	cs
 800ae8c:	461a      	movcs	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6918      	ldr	r0, [r3, #16]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae9e:	f001 f85a 	bl	800bf56 <memcpy>
        goto done;
 800aea2:	e078      	b.n	800af96 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d15d      	bne.n	800af72 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb8:	3303      	adds	r3, #3
 800aeba:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	3b03      	subs	r3, #3
 800aec0:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695a      	ldr	r2, [r3, #20]
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	bf28      	it	cs
 800aecc:	461a      	movcs	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6918      	ldr	r0, [r3, #16]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	461a      	mov	r2, r3
 800aedc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aede:	f001 f83a 	bl	800bf56 <memcpy>
        goto done;
 800aee2:	e058      	b.n	800af96 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee6:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d118      	bne.n	800af28 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	695a      	ldr	r2, [r3, #20]
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	429a      	cmp	r2, r3
 800af04:	bf28      	it	cs
 800af06:	461a      	movcs	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6918      	ldr	r0, [r3, #16]
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	1c59      	adds	r1, r3, #1
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	461a      	mov	r2, r3
 800af1a:	f001 f81c 	bl	800bf56 <memcpy>
        goto done;
 800af1e:	e03a      	b.n	800af96 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800af20:	bf00      	nop
 800af22:	e002      	b.n	800af2a <hci_send_req+0x19a>
          break;
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <hci_send_req+0x19a>
          break;
 800af28:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800af2a:	4824      	ldr	r0, [pc, #144]	@ (800afbc <hci_send_req+0x22c>)
 800af2c:	f000 f8d2 	bl	800b0d4 <list_is_empty>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00d      	beq.n	800af52 <hci_send_req+0x1c2>
 800af36:	4820      	ldr	r0, [pc, #128]	@ (800afb8 <hci_send_req+0x228>)
 800af38:	f000 f8cc 	bl	800b0d4 <list_is_empty>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d007      	beq.n	800af52 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	4619      	mov	r1, r3
 800af46:	481d      	ldr	r0, [pc, #116]	@ (800afbc <hci_send_req+0x22c>)
 800af48:	f000 f90c 	bl	800b164 <list_insert_tail>
      hciReadPacket=NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	e008      	b.n	800af64 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	f107 0308 	add.w	r3, r7, #8
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 f902 	bl	800b164 <list_insert_tail>
      hciReadPacket=NULL;
 800af60:	2300      	movs	r3, #0
 800af62:	613b      	str	r3, [r7, #16]
  {
 800af64:	e740      	b.n	800ade8 <hci_send_req+0x58>
        goto failed;
 800af66:	bf00      	nop
 800af68:	e004      	b.n	800af74 <hci_send_req+0x1e4>
        goto failed;
 800af6a:	bf00      	nop
 800af6c:	e002      	b.n	800af74 <hci_send_req+0x1e4>
          goto failed;
 800af6e:	bf00      	nop
 800af70:	e000      	b.n	800af74 <hci_send_req+0x1e4>
          goto failed;
 800af72:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d004      	beq.n	800af84 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	4619      	mov	r1, r3
 800af7e:	480f      	ldr	r0, [pc, #60]	@ (800afbc <hci_send_req+0x22c>)
 800af80:	f000 f8ca 	bl	800b118 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	4619      	mov	r1, r3
 800af8a:	480b      	ldr	r0, [pc, #44]	@ (800afb8 <hci_send_req+0x228>)
 800af8c:	f7ff fe64 	bl	800ac58 <move_list>

  return -1;
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	e00b      	b.n	800afae <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	4619      	mov	r1, r3
 800af9a:	4808      	ldr	r0, [pc, #32]	@ (800afbc <hci_send_req+0x22c>)
 800af9c:	f000 f8bc 	bl	800b118 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800afa0:	f107 0308 	add.w	r3, r7, #8
 800afa4:	4619      	mov	r1, r3
 800afa6:	4804      	ldr	r0, [pc, #16]	@ (800afb8 <hci_send_req+0x228>)
 800afa8:	f7ff fe56 	bl	800ac58 <move_list>

  return 0;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3738      	adds	r7, #56	@ 0x38
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	200004d4 	.word	0x200004d4
 800afbc:	200004cc 	.word	0x200004cc

0800afc0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800afca:	e013      	b.n	800aff4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800afcc:	1d3b      	adds	r3, r7, #4
 800afce:	4619      	mov	r1, r3
 800afd0:	480e      	ldr	r0, [pc, #56]	@ (800b00c <hci_user_evt_proc+0x4c>)
 800afd2:	f000 f90e 	bl	800b1f2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800afd6:	4b0e      	ldr	r3, [pc, #56]	@ (800b010 <hci_user_evt_proc+0x50>)
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d005      	beq.n	800afea <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800afde:	4b0c      	ldr	r3, [pc, #48]	@ (800b010 <hci_user_evt_proc+0x50>)
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	3208      	adds	r2, #8
 800afe6:	4610      	mov	r0, r2
 800afe8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4619      	mov	r1, r3
 800afee:	4809      	ldr	r0, [pc, #36]	@ (800b014 <hci_user_evt_proc+0x54>)
 800aff0:	f000 f8b8 	bl	800b164 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800aff4:	4805      	ldr	r0, [pc, #20]	@ (800b00c <hci_user_evt_proc+0x4c>)
 800aff6:	f000 f86d 	bl	800b0d4 <list_is_empty>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0e5      	beq.n	800afcc <hci_user_evt_proc+0xc>
  }
}
 800b000:	bf00      	nop
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	200004d4 	.word	0x200004d4
 800b010:	20000a54 	.word	0x20000a54
 800b014:	200004cc 	.word	0x200004cc

0800b018 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b028:	481f      	ldr	r0, [pc, #124]	@ (800b0a8 <hci_notify_asynch_evt+0x90>)
 800b02a:	f000 f853 	bl	800b0d4 <list_is_empty>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d132      	bne.n	800b09a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	4619      	mov	r1, r3
 800b03a:	481b      	ldr	r0, [pc, #108]	@ (800b0a8 <hci_notify_asynch_evt+0x90>)
 800b03c:	f000 f8d9 	bl	800b1f2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800b040:	4b1a      	ldr	r3, [pc, #104]	@ (800b0ac <hci_notify_asynch_evt+0x94>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d02a      	beq.n	800b09e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b048:	4b18      	ldr	r3, [pc, #96]	@ (800b0ac <hci_notify_asynch_evt+0x94>)
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	3208      	adds	r2, #8
 800b050:	2180      	movs	r1, #128	@ 0x80
 800b052:	4610      	mov	r0, r2
 800b054:	4798      	blx	r3
 800b056:	4603      	mov	r3, r0
 800b058:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800b05a:	7cfb      	ldrb	r3, [r7, #19]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d016      	beq.n	800b08e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	7cfa      	ldrb	r2, [r7, #19]
 800b064:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fd94 	bl	800ab98 <verify_packet>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d105      	bne.n	800b082 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	4619      	mov	r1, r3
 800b07a:	480d      	ldr	r0, [pc, #52]	@ (800b0b0 <hci_notify_asynch_evt+0x98>)
 800b07c:	f000 f872 	bl	800b164 <list_insert_tail>
 800b080:	e00d      	b.n	800b09e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4619      	mov	r1, r3
 800b086:	4808      	ldr	r0, [pc, #32]	@ (800b0a8 <hci_notify_asynch_evt+0x90>)
 800b088:	f000 f846 	bl	800b118 <list_insert_head>
 800b08c:	e007      	b.n	800b09e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4619      	mov	r1, r3
 800b092:	4805      	ldr	r0, [pc, #20]	@ (800b0a8 <hci_notify_asynch_evt+0x90>)
 800b094:	f000 f840 	bl	800b118 <list_insert_head>
 800b098:	e001      	b.n	800b09e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800b09a:	2301      	movs	r3, #1
 800b09c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800b09e:	697b      	ldr	r3, [r7, #20]
  
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200004cc 	.word	0x200004cc
 800b0ac:	20000a54 	.word	0x20000a54
 800b0b0:	200004d4 	.word	0x200004d4

0800b0b4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	605a      	str	r2, [r3, #4]
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b0e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b0e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0e6:	b672      	cpsid	i
}
 800b0e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d102      	bne.n	800b0fa <list_is_empty+0x26>
  {
    return_value = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	75fb      	strb	r3, [r7, #23]
 800b0f8:	e001      	b.n	800b0fe <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	75fb      	strb	r3, [r7, #23]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f383 8810 	msr	PRIMASK, r3
}
 800b108:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	371c      	adds	r7, #28
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b122:	f3ef 8310 	mrs	r3, PRIMASK
 800b126:	60fb      	str	r3, [r7, #12]
  return(result);
 800b128:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b12a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b12c:	b672      	cpsid	i
}
 800b12e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	605a      	str	r2, [r3, #4]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f383 8810 	msr	PRIMASK, r3
}
 800b156:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b158:	bf00      	nop
 800b15a:	371c      	adds	r7, #28
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b16e:	f3ef 8310 	mrs	r3, PRIMASK
 800b172:	60fb      	str	r3, [r7, #12]
  return(result);
 800b174:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b178:	b672      	cpsid	i
}
 800b17a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f383 8810 	msr	PRIMASK, r3
}
 800b1a2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b1a4:	bf00      	nop
 800b1a6:	371c      	adds	r7, #28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b1bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1be:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1c2:	b672      	cpsid	i
}
 800b1c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6852      	ldr	r2, [r2, #4]
 800b1d8:	605a      	str	r2, [r3, #4]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f383 8810 	msr	PRIMASK, r3
}
 800b1e4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b1e6:	bf00      	nop
 800b1e8:	371c      	adds	r7, #28
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b086      	sub	sp, #24
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b200:	60fb      	str	r3, [r7, #12]
  return(result);
 800b202:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b206:	b672      	cpsid	i
}
 800b208:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff ffca 	bl	800b1b0 <list_remove_node>
  (*node)->next = NULL;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2200      	movs	r2, #0
 800b22a:	605a      	str	r2, [r3, #4]
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f383 8810 	msr	PRIMASK, r3
}
 800b236:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b238:	bf00      	nop
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b24a:	f3ef 8310 	mrs	r3, PRIMASK
 800b24e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b250:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b254:	b672      	cpsid	i
}
 800b256:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff ffa3 	bl	800b1b0 <list_remove_node>
  (*node)->next = NULL;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2200      	movs	r2, #0
 800b278:	605a      	str	r2, [r3, #4]
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f383 8810 	msr	PRIMASK, r3
}
 800b284:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b286:	bf00      	nop
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b28e:	b480      	push	{r7}
 800b290:	b089      	sub	sp, #36	@ 0x24
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  int size = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b29a:	f3ef 8310 	mrs	r3, PRIMASK
 800b29e:	613b      	str	r3, [r7, #16]
  return(result);
 800b2a0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2a4:	b672      	cpsid	i
}
 800b2a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b2ae:	e005      	b.n	800b2bc <list_get_size+0x2e>
  {
    size++;
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d1f5      	bne.n	800b2b0 <list_get_size+0x22>
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f383 8810 	msr	PRIMASK, r3
}
 800b2ce:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800b2d0:	69fb      	ldr	r3, [r7, #28]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3724      	adds	r7, #36	@ 0x24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <rand>:
 800b2e0:	4b16      	ldr	r3, [pc, #88]	@ (800b33c <rand+0x5c>)
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	681c      	ldr	r4, [r3, #0]
 800b2e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b2e8:	b9b3      	cbnz	r3, 800b318 <rand+0x38>
 800b2ea:	2018      	movs	r0, #24
 800b2ec:	f001 fcf6 	bl	800ccdc <malloc>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	6320      	str	r0, [r4, #48]	@ 0x30
 800b2f4:	b920      	cbnz	r0, 800b300 <rand+0x20>
 800b2f6:	4b12      	ldr	r3, [pc, #72]	@ (800b340 <rand+0x60>)
 800b2f8:	4812      	ldr	r0, [pc, #72]	@ (800b344 <rand+0x64>)
 800b2fa:	2152      	movs	r1, #82	@ 0x52
 800b2fc:	f000 fe3a 	bl	800bf74 <__assert_func>
 800b300:	4911      	ldr	r1, [pc, #68]	@ (800b348 <rand+0x68>)
 800b302:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <rand+0x6c>)
 800b304:	e9c0 1300 	strd	r1, r3, [r0]
 800b308:	4b11      	ldr	r3, [pc, #68]	@ (800b350 <rand+0x70>)
 800b30a:	6083      	str	r3, [r0, #8]
 800b30c:	230b      	movs	r3, #11
 800b30e:	8183      	strh	r3, [r0, #12]
 800b310:	2100      	movs	r1, #0
 800b312:	2001      	movs	r0, #1
 800b314:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b318:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b31a:	480e      	ldr	r0, [pc, #56]	@ (800b354 <rand+0x74>)
 800b31c:	690b      	ldr	r3, [r1, #16]
 800b31e:	694c      	ldr	r4, [r1, #20]
 800b320:	4a0d      	ldr	r2, [pc, #52]	@ (800b358 <rand+0x78>)
 800b322:	4358      	muls	r0, r3
 800b324:	fb02 0004 	mla	r0, r2, r4, r0
 800b328:	fba3 3202 	umull	r3, r2, r3, r2
 800b32c:	3301      	adds	r3, #1
 800b32e:	eb40 0002 	adc.w	r0, r0, r2
 800b332:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b336:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b33a:	bd10      	pop	{r4, pc}
 800b33c:	20000030 	.word	0x20000030
 800b340:	0800e284 	.word	0x0800e284
 800b344:	0800e29b 	.word	0x0800e29b
 800b348:	abcd330e 	.word	0xabcd330e
 800b34c:	e66d1234 	.word	0xe66d1234
 800b350:	0005deec 	.word	0x0005deec
 800b354:	5851f42d 	.word	0x5851f42d
 800b358:	4c957f2d 	.word	0x4c957f2d

0800b35c <__cvt>:
 800b35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	ec57 6b10 	vmov	r6, r7, d0
 800b364:	2f00      	cmp	r7, #0
 800b366:	460c      	mov	r4, r1
 800b368:	4619      	mov	r1, r3
 800b36a:	463b      	mov	r3, r7
 800b36c:	bfbb      	ittet	lt
 800b36e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b372:	461f      	movlt	r7, r3
 800b374:	2300      	movge	r3, #0
 800b376:	232d      	movlt	r3, #45	@ 0x2d
 800b378:	700b      	strb	r3, [r1, #0]
 800b37a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b37c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b380:	4691      	mov	r9, r2
 800b382:	f023 0820 	bic.w	r8, r3, #32
 800b386:	bfbc      	itt	lt
 800b388:	4632      	movlt	r2, r6
 800b38a:	4616      	movlt	r6, r2
 800b38c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b390:	d005      	beq.n	800b39e <__cvt+0x42>
 800b392:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b396:	d100      	bne.n	800b39a <__cvt+0x3e>
 800b398:	3401      	adds	r4, #1
 800b39a:	2102      	movs	r1, #2
 800b39c:	e000      	b.n	800b3a0 <__cvt+0x44>
 800b39e:	2103      	movs	r1, #3
 800b3a0:	ab03      	add	r3, sp, #12
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	ab02      	add	r3, sp, #8
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	ec47 6b10 	vmov	d0, r6, r7
 800b3ac:	4653      	mov	r3, sl
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	f000 fe86 	bl	800c0c0 <_dtoa_r>
 800b3b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	d119      	bne.n	800b3f0 <__cvt+0x94>
 800b3bc:	f019 0f01 	tst.w	r9, #1
 800b3c0:	d00e      	beq.n	800b3e0 <__cvt+0x84>
 800b3c2:	eb00 0904 	add.w	r9, r0, r4
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	f7f5 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3d2:	b108      	cbz	r0, 800b3d8 <__cvt+0x7c>
 800b3d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3d8:	2230      	movs	r2, #48	@ 0x30
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	454b      	cmp	r3, r9
 800b3de:	d31e      	bcc.n	800b41e <__cvt+0xc2>
 800b3e0:	9b03      	ldr	r3, [sp, #12]
 800b3e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3e4:	1b5b      	subs	r3, r3, r5
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	b004      	add	sp, #16
 800b3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3f4:	eb00 0904 	add.w	r9, r0, r4
 800b3f8:	d1e5      	bne.n	800b3c6 <__cvt+0x6a>
 800b3fa:	7803      	ldrb	r3, [r0, #0]
 800b3fc:	2b30      	cmp	r3, #48	@ 0x30
 800b3fe:	d10a      	bne.n	800b416 <__cvt+0xba>
 800b400:	2200      	movs	r2, #0
 800b402:	2300      	movs	r3, #0
 800b404:	4630      	mov	r0, r6
 800b406:	4639      	mov	r1, r7
 800b408:	f7f5 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b40c:	b918      	cbnz	r0, 800b416 <__cvt+0xba>
 800b40e:	f1c4 0401 	rsb	r4, r4, #1
 800b412:	f8ca 4000 	str.w	r4, [sl]
 800b416:	f8da 3000 	ldr.w	r3, [sl]
 800b41a:	4499      	add	r9, r3
 800b41c:	e7d3      	b.n	800b3c6 <__cvt+0x6a>
 800b41e:	1c59      	adds	r1, r3, #1
 800b420:	9103      	str	r1, [sp, #12]
 800b422:	701a      	strb	r2, [r3, #0]
 800b424:	e7d9      	b.n	800b3da <__cvt+0x7e>

0800b426 <__exponent>:
 800b426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b428:	2900      	cmp	r1, #0
 800b42a:	bfba      	itte	lt
 800b42c:	4249      	neglt	r1, r1
 800b42e:	232d      	movlt	r3, #45	@ 0x2d
 800b430:	232b      	movge	r3, #43	@ 0x2b
 800b432:	2909      	cmp	r1, #9
 800b434:	7002      	strb	r2, [r0, #0]
 800b436:	7043      	strb	r3, [r0, #1]
 800b438:	dd29      	ble.n	800b48e <__exponent+0x68>
 800b43a:	f10d 0307 	add.w	r3, sp, #7
 800b43e:	461d      	mov	r5, r3
 800b440:	270a      	movs	r7, #10
 800b442:	461a      	mov	r2, r3
 800b444:	fbb1 f6f7 	udiv	r6, r1, r7
 800b448:	fb07 1416 	mls	r4, r7, r6, r1
 800b44c:	3430      	adds	r4, #48	@ 0x30
 800b44e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b452:	460c      	mov	r4, r1
 800b454:	2c63      	cmp	r4, #99	@ 0x63
 800b456:	f103 33ff 	add.w	r3, r3, #4294967295
 800b45a:	4631      	mov	r1, r6
 800b45c:	dcf1      	bgt.n	800b442 <__exponent+0x1c>
 800b45e:	3130      	adds	r1, #48	@ 0x30
 800b460:	1e94      	subs	r4, r2, #2
 800b462:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b466:	1c41      	adds	r1, r0, #1
 800b468:	4623      	mov	r3, r4
 800b46a:	42ab      	cmp	r3, r5
 800b46c:	d30a      	bcc.n	800b484 <__exponent+0x5e>
 800b46e:	f10d 0309 	add.w	r3, sp, #9
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	42ac      	cmp	r4, r5
 800b476:	bf88      	it	hi
 800b478:	2300      	movhi	r3, #0
 800b47a:	3302      	adds	r3, #2
 800b47c:	4403      	add	r3, r0
 800b47e:	1a18      	subs	r0, r3, r0
 800b480:	b003      	add	sp, #12
 800b482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b484:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b488:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b48c:	e7ed      	b.n	800b46a <__exponent+0x44>
 800b48e:	2330      	movs	r3, #48	@ 0x30
 800b490:	3130      	adds	r1, #48	@ 0x30
 800b492:	7083      	strb	r3, [r0, #2]
 800b494:	70c1      	strb	r1, [r0, #3]
 800b496:	1d03      	adds	r3, r0, #4
 800b498:	e7f1      	b.n	800b47e <__exponent+0x58>
	...

0800b49c <_printf_float>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	b08d      	sub	sp, #52	@ 0x34
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b4a8:	4616      	mov	r6, r2
 800b4aa:	461f      	mov	r7, r3
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	f000 fcdb 	bl	800be68 <_localeconv_r>
 800b4b2:	6803      	ldr	r3, [r0, #0]
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7f4 feda 	bl	8000270 <strlen>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4c4:	9005      	str	r0, [sp, #20]
 800b4c6:	3307      	adds	r3, #7
 800b4c8:	f023 0307 	bic.w	r3, r3, #7
 800b4cc:	f103 0208 	add.w	r2, r3, #8
 800b4d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b4d4:	f8d4 b000 	ldr.w	fp, [r4]
 800b4d8:	f8c8 2000 	str.w	r2, [r8]
 800b4dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b4ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4f2:	4b9c      	ldr	r3, [pc, #624]	@ (800b764 <_printf_float+0x2c8>)
 800b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f8:	f7f5 fb18 	bl	8000b2c <__aeabi_dcmpun>
 800b4fc:	bb70      	cbnz	r0, 800b55c <_printf_float+0xc0>
 800b4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b502:	4b98      	ldr	r3, [pc, #608]	@ (800b764 <_printf_float+0x2c8>)
 800b504:	f04f 32ff 	mov.w	r2, #4294967295
 800b508:	f7f5 faf2 	bl	8000af0 <__aeabi_dcmple>
 800b50c:	bb30      	cbnz	r0, 800b55c <_printf_float+0xc0>
 800b50e:	2200      	movs	r2, #0
 800b510:	2300      	movs	r3, #0
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	f7f5 fae1 	bl	8000adc <__aeabi_dcmplt>
 800b51a:	b110      	cbz	r0, 800b522 <_printf_float+0x86>
 800b51c:	232d      	movs	r3, #45	@ 0x2d
 800b51e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b522:	4a91      	ldr	r2, [pc, #580]	@ (800b768 <_printf_float+0x2cc>)
 800b524:	4b91      	ldr	r3, [pc, #580]	@ (800b76c <_printf_float+0x2d0>)
 800b526:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b52a:	bf94      	ite	ls
 800b52c:	4690      	movls	r8, r2
 800b52e:	4698      	movhi	r8, r3
 800b530:	2303      	movs	r3, #3
 800b532:	6123      	str	r3, [r4, #16]
 800b534:	f02b 0304 	bic.w	r3, fp, #4
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	f04f 0900 	mov.w	r9, #0
 800b53e:	9700      	str	r7, [sp, #0]
 800b540:	4633      	mov	r3, r6
 800b542:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b544:	4621      	mov	r1, r4
 800b546:	4628      	mov	r0, r5
 800b548:	f000 f9d2 	bl	800b8f0 <_printf_common>
 800b54c:	3001      	adds	r0, #1
 800b54e:	f040 808d 	bne.w	800b66c <_printf_float+0x1d0>
 800b552:	f04f 30ff 	mov.w	r0, #4294967295
 800b556:	b00d      	add	sp, #52	@ 0x34
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55c:	4642      	mov	r2, r8
 800b55e:	464b      	mov	r3, r9
 800b560:	4640      	mov	r0, r8
 800b562:	4649      	mov	r1, r9
 800b564:	f7f5 fae2 	bl	8000b2c <__aeabi_dcmpun>
 800b568:	b140      	cbz	r0, 800b57c <_printf_float+0xe0>
 800b56a:	464b      	mov	r3, r9
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	bfbc      	itt	lt
 800b570:	232d      	movlt	r3, #45	@ 0x2d
 800b572:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b576:	4a7e      	ldr	r2, [pc, #504]	@ (800b770 <_printf_float+0x2d4>)
 800b578:	4b7e      	ldr	r3, [pc, #504]	@ (800b774 <_printf_float+0x2d8>)
 800b57a:	e7d4      	b.n	800b526 <_printf_float+0x8a>
 800b57c:	6863      	ldr	r3, [r4, #4]
 800b57e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b582:	9206      	str	r2, [sp, #24]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	d13b      	bne.n	800b600 <_printf_float+0x164>
 800b588:	2306      	movs	r3, #6
 800b58a:	6063      	str	r3, [r4, #4]
 800b58c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b590:	2300      	movs	r3, #0
 800b592:	6022      	str	r2, [r4, #0]
 800b594:	9303      	str	r3, [sp, #12]
 800b596:	ab0a      	add	r3, sp, #40	@ 0x28
 800b598:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b59c:	ab09      	add	r3, sp, #36	@ 0x24
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	6861      	ldr	r1, [r4, #4]
 800b5a2:	ec49 8b10 	vmov	d0, r8, r9
 800b5a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7ff fed6 	bl	800b35c <__cvt>
 800b5b0:	9b06      	ldr	r3, [sp, #24]
 800b5b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5b4:	2b47      	cmp	r3, #71	@ 0x47
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	d129      	bne.n	800b60e <_printf_float+0x172>
 800b5ba:	1cc8      	adds	r0, r1, #3
 800b5bc:	db02      	blt.n	800b5c4 <_printf_float+0x128>
 800b5be:	6863      	ldr	r3, [r4, #4]
 800b5c0:	4299      	cmp	r1, r3
 800b5c2:	dd41      	ble.n	800b648 <_printf_float+0x1ac>
 800b5c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b5c8:	fa5f fa8a 	uxtb.w	sl, sl
 800b5cc:	3901      	subs	r1, #1
 800b5ce:	4652      	mov	r2, sl
 800b5d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b5d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5d6:	f7ff ff26 	bl	800b426 <__exponent>
 800b5da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5dc:	1813      	adds	r3, r2, r0
 800b5de:	2a01      	cmp	r2, #1
 800b5e0:	4681      	mov	r9, r0
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	dc02      	bgt.n	800b5ec <_printf_float+0x150>
 800b5e6:	6822      	ldr	r2, [r4, #0]
 800b5e8:	07d2      	lsls	r2, r2, #31
 800b5ea:	d501      	bpl.n	800b5f0 <_printf_float+0x154>
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0a2      	beq.n	800b53e <_printf_float+0xa2>
 800b5f8:	232d      	movs	r3, #45	@ 0x2d
 800b5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5fe:	e79e      	b.n	800b53e <_printf_float+0xa2>
 800b600:	9a06      	ldr	r2, [sp, #24]
 800b602:	2a47      	cmp	r2, #71	@ 0x47
 800b604:	d1c2      	bne.n	800b58c <_printf_float+0xf0>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1c0      	bne.n	800b58c <_printf_float+0xf0>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e7bd      	b.n	800b58a <_printf_float+0xee>
 800b60e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b612:	d9db      	bls.n	800b5cc <_printf_float+0x130>
 800b614:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b618:	d118      	bne.n	800b64c <_printf_float+0x1b0>
 800b61a:	2900      	cmp	r1, #0
 800b61c:	6863      	ldr	r3, [r4, #4]
 800b61e:	dd0b      	ble.n	800b638 <_printf_float+0x19c>
 800b620:	6121      	str	r1, [r4, #16]
 800b622:	b913      	cbnz	r3, 800b62a <_printf_float+0x18e>
 800b624:	6822      	ldr	r2, [r4, #0]
 800b626:	07d0      	lsls	r0, r2, #31
 800b628:	d502      	bpl.n	800b630 <_printf_float+0x194>
 800b62a:	3301      	adds	r3, #1
 800b62c:	440b      	add	r3, r1
 800b62e:	6123      	str	r3, [r4, #16]
 800b630:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b632:	f04f 0900 	mov.w	r9, #0
 800b636:	e7db      	b.n	800b5f0 <_printf_float+0x154>
 800b638:	b913      	cbnz	r3, 800b640 <_printf_float+0x1a4>
 800b63a:	6822      	ldr	r2, [r4, #0]
 800b63c:	07d2      	lsls	r2, r2, #31
 800b63e:	d501      	bpl.n	800b644 <_printf_float+0x1a8>
 800b640:	3302      	adds	r3, #2
 800b642:	e7f4      	b.n	800b62e <_printf_float+0x192>
 800b644:	2301      	movs	r3, #1
 800b646:	e7f2      	b.n	800b62e <_printf_float+0x192>
 800b648:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b64e:	4299      	cmp	r1, r3
 800b650:	db05      	blt.n	800b65e <_printf_float+0x1c2>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	6121      	str	r1, [r4, #16]
 800b656:	07d8      	lsls	r0, r3, #31
 800b658:	d5ea      	bpl.n	800b630 <_printf_float+0x194>
 800b65a:	1c4b      	adds	r3, r1, #1
 800b65c:	e7e7      	b.n	800b62e <_printf_float+0x192>
 800b65e:	2900      	cmp	r1, #0
 800b660:	bfd4      	ite	le
 800b662:	f1c1 0202 	rsble	r2, r1, #2
 800b666:	2201      	movgt	r2, #1
 800b668:	4413      	add	r3, r2
 800b66a:	e7e0      	b.n	800b62e <_printf_float+0x192>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	055a      	lsls	r2, r3, #21
 800b670:	d407      	bmi.n	800b682 <_printf_float+0x1e6>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	4642      	mov	r2, r8
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	47b8      	blx	r7
 800b67c:	3001      	adds	r0, #1
 800b67e:	d12b      	bne.n	800b6d8 <_printf_float+0x23c>
 800b680:	e767      	b.n	800b552 <_printf_float+0xb6>
 800b682:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b686:	f240 80dd 	bls.w	800b844 <_printf_float+0x3a8>
 800b68a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	f7f5 fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b696:	2800      	cmp	r0, #0
 800b698:	d033      	beq.n	800b702 <_printf_float+0x266>
 800b69a:	4a37      	ldr	r2, [pc, #220]	@ (800b778 <_printf_float+0x2dc>)
 800b69c:	2301      	movs	r3, #1
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	f43f af54 	beq.w	800b552 <_printf_float+0xb6>
 800b6aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b6ae:	4543      	cmp	r3, r8
 800b6b0:	db02      	blt.n	800b6b8 <_printf_float+0x21c>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	07d8      	lsls	r0, r3, #31
 800b6b6:	d50f      	bpl.n	800b6d8 <_printf_float+0x23c>
 800b6b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4628      	mov	r0, r5
 800b6c0:	47b8      	blx	r7
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	f43f af45 	beq.w	800b552 <_printf_float+0xb6>
 800b6c8:	f04f 0900 	mov.w	r9, #0
 800b6cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6d0:	f104 0a1a 	add.w	sl, r4, #26
 800b6d4:	45c8      	cmp	r8, r9
 800b6d6:	dc09      	bgt.n	800b6ec <_printf_float+0x250>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	079b      	lsls	r3, r3, #30
 800b6dc:	f100 8103 	bmi.w	800b8e6 <_printf_float+0x44a>
 800b6e0:	68e0      	ldr	r0, [r4, #12]
 800b6e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	bfb8      	it	lt
 800b6e8:	4618      	movlt	r0, r3
 800b6ea:	e734      	b.n	800b556 <_printf_float+0xba>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4652      	mov	r2, sl
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f af2b 	beq.w	800b552 <_printf_float+0xb6>
 800b6fc:	f109 0901 	add.w	r9, r9, #1
 800b700:	e7e8      	b.n	800b6d4 <_printf_float+0x238>
 800b702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	dc39      	bgt.n	800b77c <_printf_float+0x2e0>
 800b708:	4a1b      	ldr	r2, [pc, #108]	@ (800b778 <_printf_float+0x2dc>)
 800b70a:	2301      	movs	r3, #1
 800b70c:	4631      	mov	r1, r6
 800b70e:	4628      	mov	r0, r5
 800b710:	47b8      	blx	r7
 800b712:	3001      	adds	r0, #1
 800b714:	f43f af1d 	beq.w	800b552 <_printf_float+0xb6>
 800b718:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b71c:	ea59 0303 	orrs.w	r3, r9, r3
 800b720:	d102      	bne.n	800b728 <_printf_float+0x28c>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	07d9      	lsls	r1, r3, #31
 800b726:	d5d7      	bpl.n	800b6d8 <_printf_float+0x23c>
 800b728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b72c:	4631      	mov	r1, r6
 800b72e:	4628      	mov	r0, r5
 800b730:	47b8      	blx	r7
 800b732:	3001      	adds	r0, #1
 800b734:	f43f af0d 	beq.w	800b552 <_printf_float+0xb6>
 800b738:	f04f 0a00 	mov.w	sl, #0
 800b73c:	f104 0b1a 	add.w	fp, r4, #26
 800b740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b742:	425b      	negs	r3, r3
 800b744:	4553      	cmp	r3, sl
 800b746:	dc01      	bgt.n	800b74c <_printf_float+0x2b0>
 800b748:	464b      	mov	r3, r9
 800b74a:	e793      	b.n	800b674 <_printf_float+0x1d8>
 800b74c:	2301      	movs	r3, #1
 800b74e:	465a      	mov	r2, fp
 800b750:	4631      	mov	r1, r6
 800b752:	4628      	mov	r0, r5
 800b754:	47b8      	blx	r7
 800b756:	3001      	adds	r0, #1
 800b758:	f43f aefb 	beq.w	800b552 <_printf_float+0xb6>
 800b75c:	f10a 0a01 	add.w	sl, sl, #1
 800b760:	e7ee      	b.n	800b740 <_printf_float+0x2a4>
 800b762:	bf00      	nop
 800b764:	7fefffff 	.word	0x7fefffff
 800b768:	0800e2f3 	.word	0x0800e2f3
 800b76c:	0800e2f7 	.word	0x0800e2f7
 800b770:	0800e2fb 	.word	0x0800e2fb
 800b774:	0800e2ff 	.word	0x0800e2ff
 800b778:	0800e303 	.word	0x0800e303
 800b77c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b77e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b782:	4553      	cmp	r3, sl
 800b784:	bfa8      	it	ge
 800b786:	4653      	movge	r3, sl
 800b788:	2b00      	cmp	r3, #0
 800b78a:	4699      	mov	r9, r3
 800b78c:	dc36      	bgt.n	800b7fc <_printf_float+0x360>
 800b78e:	f04f 0b00 	mov.w	fp, #0
 800b792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b796:	f104 021a 	add.w	r2, r4, #26
 800b79a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b79c:	9306      	str	r3, [sp, #24]
 800b79e:	eba3 0309 	sub.w	r3, r3, r9
 800b7a2:	455b      	cmp	r3, fp
 800b7a4:	dc31      	bgt.n	800b80a <_printf_float+0x36e>
 800b7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a8:	459a      	cmp	sl, r3
 800b7aa:	dc3a      	bgt.n	800b822 <_printf_float+0x386>
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	07da      	lsls	r2, r3, #31
 800b7b0:	d437      	bmi.n	800b822 <_printf_float+0x386>
 800b7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b4:	ebaa 0903 	sub.w	r9, sl, r3
 800b7b8:	9b06      	ldr	r3, [sp, #24]
 800b7ba:	ebaa 0303 	sub.w	r3, sl, r3
 800b7be:	4599      	cmp	r9, r3
 800b7c0:	bfa8      	it	ge
 800b7c2:	4699      	movge	r9, r3
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	dc33      	bgt.n	800b832 <_printf_float+0x396>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7d2:	f104 0b1a 	add.w	fp, r4, #26
 800b7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d8:	ebaa 0303 	sub.w	r3, sl, r3
 800b7dc:	eba3 0309 	sub.w	r3, r3, r9
 800b7e0:	4543      	cmp	r3, r8
 800b7e2:	f77f af79 	ble.w	800b6d8 <_printf_float+0x23c>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	465a      	mov	r2, fp
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b8      	blx	r7
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	f43f aeae 	beq.w	800b552 <_printf_float+0xb6>
 800b7f6:	f108 0801 	add.w	r8, r8, #1
 800b7fa:	e7ec      	b.n	800b7d6 <_printf_float+0x33a>
 800b7fc:	4642      	mov	r2, r8
 800b7fe:	4631      	mov	r1, r6
 800b800:	4628      	mov	r0, r5
 800b802:	47b8      	blx	r7
 800b804:	3001      	adds	r0, #1
 800b806:	d1c2      	bne.n	800b78e <_printf_float+0x2f2>
 800b808:	e6a3      	b.n	800b552 <_printf_float+0xb6>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4631      	mov	r1, r6
 800b80e:	4628      	mov	r0, r5
 800b810:	9206      	str	r2, [sp, #24]
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	f43f ae9c 	beq.w	800b552 <_printf_float+0xb6>
 800b81a:	9a06      	ldr	r2, [sp, #24]
 800b81c:	f10b 0b01 	add.w	fp, fp, #1
 800b820:	e7bb      	b.n	800b79a <_printf_float+0x2fe>
 800b822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b826:	4631      	mov	r1, r6
 800b828:	4628      	mov	r0, r5
 800b82a:	47b8      	blx	r7
 800b82c:	3001      	adds	r0, #1
 800b82e:	d1c0      	bne.n	800b7b2 <_printf_float+0x316>
 800b830:	e68f      	b.n	800b552 <_printf_float+0xb6>
 800b832:	9a06      	ldr	r2, [sp, #24]
 800b834:	464b      	mov	r3, r9
 800b836:	4442      	add	r2, r8
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	d1c3      	bne.n	800b7ca <_printf_float+0x32e>
 800b842:	e686      	b.n	800b552 <_printf_float+0xb6>
 800b844:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b848:	f1ba 0f01 	cmp.w	sl, #1
 800b84c:	dc01      	bgt.n	800b852 <_printf_float+0x3b6>
 800b84e:	07db      	lsls	r3, r3, #31
 800b850:	d536      	bpl.n	800b8c0 <_printf_float+0x424>
 800b852:	2301      	movs	r3, #1
 800b854:	4642      	mov	r2, r8
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	f43f ae78 	beq.w	800b552 <_printf_float+0xb6>
 800b862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b866:	4631      	mov	r1, r6
 800b868:	4628      	mov	r0, r5
 800b86a:	47b8      	blx	r7
 800b86c:	3001      	adds	r0, #1
 800b86e:	f43f ae70 	beq.w	800b552 <_printf_float+0xb6>
 800b872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b876:	2200      	movs	r2, #0
 800b878:	2300      	movs	r3, #0
 800b87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b87e:	f7f5 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 800b882:	b9c0      	cbnz	r0, 800b8b6 <_printf_float+0x41a>
 800b884:	4653      	mov	r3, sl
 800b886:	f108 0201 	add.w	r2, r8, #1
 800b88a:	4631      	mov	r1, r6
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b8      	blx	r7
 800b890:	3001      	adds	r0, #1
 800b892:	d10c      	bne.n	800b8ae <_printf_float+0x412>
 800b894:	e65d      	b.n	800b552 <_printf_float+0xb6>
 800b896:	2301      	movs	r3, #1
 800b898:	465a      	mov	r2, fp
 800b89a:	4631      	mov	r1, r6
 800b89c:	4628      	mov	r0, r5
 800b89e:	47b8      	blx	r7
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	f43f ae56 	beq.w	800b552 <_printf_float+0xb6>
 800b8a6:	f108 0801 	add.w	r8, r8, #1
 800b8aa:	45d0      	cmp	r8, sl
 800b8ac:	dbf3      	blt.n	800b896 <_printf_float+0x3fa>
 800b8ae:	464b      	mov	r3, r9
 800b8b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b8b4:	e6df      	b.n	800b676 <_printf_float+0x1da>
 800b8b6:	f04f 0800 	mov.w	r8, #0
 800b8ba:	f104 0b1a 	add.w	fp, r4, #26
 800b8be:	e7f4      	b.n	800b8aa <_printf_float+0x40e>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	4642      	mov	r2, r8
 800b8c4:	e7e1      	b.n	800b88a <_printf_float+0x3ee>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	464a      	mov	r2, r9
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	47b8      	blx	r7
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	f43f ae3e 	beq.w	800b552 <_printf_float+0xb6>
 800b8d6:	f108 0801 	add.w	r8, r8, #1
 800b8da:	68e3      	ldr	r3, [r4, #12]
 800b8dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8de:	1a5b      	subs	r3, r3, r1
 800b8e0:	4543      	cmp	r3, r8
 800b8e2:	dcf0      	bgt.n	800b8c6 <_printf_float+0x42a>
 800b8e4:	e6fc      	b.n	800b6e0 <_printf_float+0x244>
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	f104 0919 	add.w	r9, r4, #25
 800b8ee:	e7f4      	b.n	800b8da <_printf_float+0x43e>

0800b8f0 <_printf_common>:
 800b8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	4698      	mov	r8, r3
 800b8f8:	688a      	ldr	r2, [r1, #8]
 800b8fa:	690b      	ldr	r3, [r1, #16]
 800b8fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b900:	4293      	cmp	r3, r2
 800b902:	bfb8      	it	lt
 800b904:	4613      	movlt	r3, r2
 800b906:	6033      	str	r3, [r6, #0]
 800b908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b90c:	4607      	mov	r7, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b10a      	cbz	r2, 800b916 <_printf_common+0x26>
 800b912:	3301      	adds	r3, #1
 800b914:	6033      	str	r3, [r6, #0]
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	0699      	lsls	r1, r3, #26
 800b91a:	bf42      	ittt	mi
 800b91c:	6833      	ldrmi	r3, [r6, #0]
 800b91e:	3302      	addmi	r3, #2
 800b920:	6033      	strmi	r3, [r6, #0]
 800b922:	6825      	ldr	r5, [r4, #0]
 800b924:	f015 0506 	ands.w	r5, r5, #6
 800b928:	d106      	bne.n	800b938 <_printf_common+0x48>
 800b92a:	f104 0a19 	add.w	sl, r4, #25
 800b92e:	68e3      	ldr	r3, [r4, #12]
 800b930:	6832      	ldr	r2, [r6, #0]
 800b932:	1a9b      	subs	r3, r3, r2
 800b934:	42ab      	cmp	r3, r5
 800b936:	dc26      	bgt.n	800b986 <_printf_common+0x96>
 800b938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	3b00      	subs	r3, #0
 800b940:	bf18      	it	ne
 800b942:	2301      	movne	r3, #1
 800b944:	0692      	lsls	r2, r2, #26
 800b946:	d42b      	bmi.n	800b9a0 <_printf_common+0xb0>
 800b948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b94c:	4641      	mov	r1, r8
 800b94e:	4638      	mov	r0, r7
 800b950:	47c8      	blx	r9
 800b952:	3001      	adds	r0, #1
 800b954:	d01e      	beq.n	800b994 <_printf_common+0xa4>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	6922      	ldr	r2, [r4, #16]
 800b95a:	f003 0306 	and.w	r3, r3, #6
 800b95e:	2b04      	cmp	r3, #4
 800b960:	bf02      	ittt	eq
 800b962:	68e5      	ldreq	r5, [r4, #12]
 800b964:	6833      	ldreq	r3, [r6, #0]
 800b966:	1aed      	subeq	r5, r5, r3
 800b968:	68a3      	ldr	r3, [r4, #8]
 800b96a:	bf0c      	ite	eq
 800b96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b970:	2500      	movne	r5, #0
 800b972:	4293      	cmp	r3, r2
 800b974:	bfc4      	itt	gt
 800b976:	1a9b      	subgt	r3, r3, r2
 800b978:	18ed      	addgt	r5, r5, r3
 800b97a:	2600      	movs	r6, #0
 800b97c:	341a      	adds	r4, #26
 800b97e:	42b5      	cmp	r5, r6
 800b980:	d11a      	bne.n	800b9b8 <_printf_common+0xc8>
 800b982:	2000      	movs	r0, #0
 800b984:	e008      	b.n	800b998 <_printf_common+0xa8>
 800b986:	2301      	movs	r3, #1
 800b988:	4652      	mov	r2, sl
 800b98a:	4641      	mov	r1, r8
 800b98c:	4638      	mov	r0, r7
 800b98e:	47c8      	blx	r9
 800b990:	3001      	adds	r0, #1
 800b992:	d103      	bne.n	800b99c <_printf_common+0xac>
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99c:	3501      	adds	r5, #1
 800b99e:	e7c6      	b.n	800b92e <_printf_common+0x3e>
 800b9a0:	18e1      	adds	r1, r4, r3
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	2030      	movs	r0, #48	@ 0x30
 800b9a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9aa:	4422      	add	r2, r4
 800b9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9b4:	3302      	adds	r3, #2
 800b9b6:	e7c7      	b.n	800b948 <_printf_common+0x58>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	4641      	mov	r1, r8
 800b9be:	4638      	mov	r0, r7
 800b9c0:	47c8      	blx	r9
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d0e6      	beq.n	800b994 <_printf_common+0xa4>
 800b9c6:	3601      	adds	r6, #1
 800b9c8:	e7d9      	b.n	800b97e <_printf_common+0x8e>
	...

0800b9cc <_printf_i>:
 800b9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	7e0f      	ldrb	r7, [r1, #24]
 800b9d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9d4:	2f78      	cmp	r7, #120	@ 0x78
 800b9d6:	4691      	mov	r9, r2
 800b9d8:	4680      	mov	r8, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	469a      	mov	sl, r3
 800b9de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9e2:	d807      	bhi.n	800b9f4 <_printf_i+0x28>
 800b9e4:	2f62      	cmp	r7, #98	@ 0x62
 800b9e6:	d80a      	bhi.n	800b9fe <_printf_i+0x32>
 800b9e8:	2f00      	cmp	r7, #0
 800b9ea:	f000 80d2 	beq.w	800bb92 <_printf_i+0x1c6>
 800b9ee:	2f58      	cmp	r7, #88	@ 0x58
 800b9f0:	f000 80b9 	beq.w	800bb66 <_printf_i+0x19a>
 800b9f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9fc:	e03a      	b.n	800ba74 <_printf_i+0xa8>
 800b9fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba02:	2b15      	cmp	r3, #21
 800ba04:	d8f6      	bhi.n	800b9f4 <_printf_i+0x28>
 800ba06:	a101      	add	r1, pc, #4	@ (adr r1, 800ba0c <_printf_i+0x40>)
 800ba08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba0c:	0800ba65 	.word	0x0800ba65
 800ba10:	0800ba79 	.word	0x0800ba79
 800ba14:	0800b9f5 	.word	0x0800b9f5
 800ba18:	0800b9f5 	.word	0x0800b9f5
 800ba1c:	0800b9f5 	.word	0x0800b9f5
 800ba20:	0800b9f5 	.word	0x0800b9f5
 800ba24:	0800ba79 	.word	0x0800ba79
 800ba28:	0800b9f5 	.word	0x0800b9f5
 800ba2c:	0800b9f5 	.word	0x0800b9f5
 800ba30:	0800b9f5 	.word	0x0800b9f5
 800ba34:	0800b9f5 	.word	0x0800b9f5
 800ba38:	0800bb79 	.word	0x0800bb79
 800ba3c:	0800baa3 	.word	0x0800baa3
 800ba40:	0800bb33 	.word	0x0800bb33
 800ba44:	0800b9f5 	.word	0x0800b9f5
 800ba48:	0800b9f5 	.word	0x0800b9f5
 800ba4c:	0800bb9b 	.word	0x0800bb9b
 800ba50:	0800b9f5 	.word	0x0800b9f5
 800ba54:	0800baa3 	.word	0x0800baa3
 800ba58:	0800b9f5 	.word	0x0800b9f5
 800ba5c:	0800b9f5 	.word	0x0800b9f5
 800ba60:	0800bb3b 	.word	0x0800bb3b
 800ba64:	6833      	ldr	r3, [r6, #0]
 800ba66:	1d1a      	adds	r2, r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6032      	str	r2, [r6, #0]
 800ba6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba74:	2301      	movs	r3, #1
 800ba76:	e09d      	b.n	800bbb4 <_printf_i+0x1e8>
 800ba78:	6833      	ldr	r3, [r6, #0]
 800ba7a:	6820      	ldr	r0, [r4, #0]
 800ba7c:	1d19      	adds	r1, r3, #4
 800ba7e:	6031      	str	r1, [r6, #0]
 800ba80:	0606      	lsls	r6, r0, #24
 800ba82:	d501      	bpl.n	800ba88 <_printf_i+0xbc>
 800ba84:	681d      	ldr	r5, [r3, #0]
 800ba86:	e003      	b.n	800ba90 <_printf_i+0xc4>
 800ba88:	0645      	lsls	r5, r0, #25
 800ba8a:	d5fb      	bpl.n	800ba84 <_printf_i+0xb8>
 800ba8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba90:	2d00      	cmp	r5, #0
 800ba92:	da03      	bge.n	800ba9c <_printf_i+0xd0>
 800ba94:	232d      	movs	r3, #45	@ 0x2d
 800ba96:	426d      	negs	r5, r5
 800ba98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba9c:	4859      	ldr	r0, [pc, #356]	@ (800bc04 <_printf_i+0x238>)
 800ba9e:	230a      	movs	r3, #10
 800baa0:	e011      	b.n	800bac6 <_printf_i+0xfa>
 800baa2:	6821      	ldr	r1, [r4, #0]
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	0608      	lsls	r0, r1, #24
 800baa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800baac:	d402      	bmi.n	800bab4 <_printf_i+0xe8>
 800baae:	0649      	lsls	r1, r1, #25
 800bab0:	bf48      	it	mi
 800bab2:	b2ad      	uxthmi	r5, r5
 800bab4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bab6:	4853      	ldr	r0, [pc, #332]	@ (800bc04 <_printf_i+0x238>)
 800bab8:	6033      	str	r3, [r6, #0]
 800baba:	bf14      	ite	ne
 800babc:	230a      	movne	r3, #10
 800babe:	2308      	moveq	r3, #8
 800bac0:	2100      	movs	r1, #0
 800bac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bac6:	6866      	ldr	r6, [r4, #4]
 800bac8:	60a6      	str	r6, [r4, #8]
 800baca:	2e00      	cmp	r6, #0
 800bacc:	bfa2      	ittt	ge
 800bace:	6821      	ldrge	r1, [r4, #0]
 800bad0:	f021 0104 	bicge.w	r1, r1, #4
 800bad4:	6021      	strge	r1, [r4, #0]
 800bad6:	b90d      	cbnz	r5, 800badc <_printf_i+0x110>
 800bad8:	2e00      	cmp	r6, #0
 800bada:	d04b      	beq.n	800bb74 <_printf_i+0x1a8>
 800badc:	4616      	mov	r6, r2
 800bade:	fbb5 f1f3 	udiv	r1, r5, r3
 800bae2:	fb03 5711 	mls	r7, r3, r1, r5
 800bae6:	5dc7      	ldrb	r7, [r0, r7]
 800bae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800baec:	462f      	mov	r7, r5
 800baee:	42bb      	cmp	r3, r7
 800baf0:	460d      	mov	r5, r1
 800baf2:	d9f4      	bls.n	800bade <_printf_i+0x112>
 800baf4:	2b08      	cmp	r3, #8
 800baf6:	d10b      	bne.n	800bb10 <_printf_i+0x144>
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	07df      	lsls	r7, r3, #31
 800bafc:	d508      	bpl.n	800bb10 <_printf_i+0x144>
 800bafe:	6923      	ldr	r3, [r4, #16]
 800bb00:	6861      	ldr	r1, [r4, #4]
 800bb02:	4299      	cmp	r1, r3
 800bb04:	bfde      	ittt	le
 800bb06:	2330      	movle	r3, #48	@ 0x30
 800bb08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb10:	1b92      	subs	r2, r2, r6
 800bb12:	6122      	str	r2, [r4, #16]
 800bb14:	f8cd a000 	str.w	sl, [sp]
 800bb18:	464b      	mov	r3, r9
 800bb1a:	aa03      	add	r2, sp, #12
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4640      	mov	r0, r8
 800bb20:	f7ff fee6 	bl	800b8f0 <_printf_common>
 800bb24:	3001      	adds	r0, #1
 800bb26:	d14a      	bne.n	800bbbe <_printf_i+0x1f2>
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2c:	b004      	add	sp, #16
 800bb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	f043 0320 	orr.w	r3, r3, #32
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	4833      	ldr	r0, [pc, #204]	@ (800bc08 <_printf_i+0x23c>)
 800bb3c:	2778      	movs	r7, #120	@ 0x78
 800bb3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	6831      	ldr	r1, [r6, #0]
 800bb46:	061f      	lsls	r7, r3, #24
 800bb48:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb4c:	d402      	bmi.n	800bb54 <_printf_i+0x188>
 800bb4e:	065f      	lsls	r7, r3, #25
 800bb50:	bf48      	it	mi
 800bb52:	b2ad      	uxthmi	r5, r5
 800bb54:	6031      	str	r1, [r6, #0]
 800bb56:	07d9      	lsls	r1, r3, #31
 800bb58:	bf44      	itt	mi
 800bb5a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb5e:	6023      	strmi	r3, [r4, #0]
 800bb60:	b11d      	cbz	r5, 800bb6a <_printf_i+0x19e>
 800bb62:	2310      	movs	r3, #16
 800bb64:	e7ac      	b.n	800bac0 <_printf_i+0xf4>
 800bb66:	4827      	ldr	r0, [pc, #156]	@ (800bc04 <_printf_i+0x238>)
 800bb68:	e7e9      	b.n	800bb3e <_printf_i+0x172>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	f023 0320 	bic.w	r3, r3, #32
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	e7f6      	b.n	800bb62 <_printf_i+0x196>
 800bb74:	4616      	mov	r6, r2
 800bb76:	e7bd      	b.n	800baf4 <_printf_i+0x128>
 800bb78:	6833      	ldr	r3, [r6, #0]
 800bb7a:	6825      	ldr	r5, [r4, #0]
 800bb7c:	6961      	ldr	r1, [r4, #20]
 800bb7e:	1d18      	adds	r0, r3, #4
 800bb80:	6030      	str	r0, [r6, #0]
 800bb82:	062e      	lsls	r6, r5, #24
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	d501      	bpl.n	800bb8c <_printf_i+0x1c0>
 800bb88:	6019      	str	r1, [r3, #0]
 800bb8a:	e002      	b.n	800bb92 <_printf_i+0x1c6>
 800bb8c:	0668      	lsls	r0, r5, #25
 800bb8e:	d5fb      	bpl.n	800bb88 <_printf_i+0x1bc>
 800bb90:	8019      	strh	r1, [r3, #0]
 800bb92:	2300      	movs	r3, #0
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	4616      	mov	r6, r2
 800bb98:	e7bc      	b.n	800bb14 <_printf_i+0x148>
 800bb9a:	6833      	ldr	r3, [r6, #0]
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	6032      	str	r2, [r6, #0]
 800bba0:	681e      	ldr	r6, [r3, #0]
 800bba2:	6862      	ldr	r2, [r4, #4]
 800bba4:	2100      	movs	r1, #0
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7f4 fb12 	bl	80001d0 <memchr>
 800bbac:	b108      	cbz	r0, 800bbb2 <_printf_i+0x1e6>
 800bbae:	1b80      	subs	r0, r0, r6
 800bbb0:	6060      	str	r0, [r4, #4]
 800bbb2:	6863      	ldr	r3, [r4, #4]
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbbc:	e7aa      	b.n	800bb14 <_printf_i+0x148>
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	47d0      	blx	sl
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d0ad      	beq.n	800bb28 <_printf_i+0x15c>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	079b      	lsls	r3, r3, #30
 800bbd0:	d413      	bmi.n	800bbfa <_printf_i+0x22e>
 800bbd2:	68e0      	ldr	r0, [r4, #12]
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	4298      	cmp	r0, r3
 800bbd8:	bfb8      	it	lt
 800bbda:	4618      	movlt	r0, r3
 800bbdc:	e7a6      	b.n	800bb2c <_printf_i+0x160>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	47d0      	blx	sl
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d09d      	beq.n	800bb28 <_printf_i+0x15c>
 800bbec:	3501      	adds	r5, #1
 800bbee:	68e3      	ldr	r3, [r4, #12]
 800bbf0:	9903      	ldr	r1, [sp, #12]
 800bbf2:	1a5b      	subs	r3, r3, r1
 800bbf4:	42ab      	cmp	r3, r5
 800bbf6:	dcf2      	bgt.n	800bbde <_printf_i+0x212>
 800bbf8:	e7eb      	b.n	800bbd2 <_printf_i+0x206>
 800bbfa:	2500      	movs	r5, #0
 800bbfc:	f104 0619 	add.w	r6, r4, #25
 800bc00:	e7f5      	b.n	800bbee <_printf_i+0x222>
 800bc02:	bf00      	nop
 800bc04:	0800e305 	.word	0x0800e305
 800bc08:	0800e316 	.word	0x0800e316

0800bc0c <std>:
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	e9c0 3300 	strd	r3, r3, [r0]
 800bc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1a:	6083      	str	r3, [r0, #8]
 800bc1c:	8181      	strh	r1, [r0, #12]
 800bc1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc20:	81c2      	strh	r2, [r0, #14]
 800bc22:	6183      	str	r3, [r0, #24]
 800bc24:	4619      	mov	r1, r3
 800bc26:	2208      	movs	r2, #8
 800bc28:	305c      	adds	r0, #92	@ 0x5c
 800bc2a:	f000 f914 	bl	800be56 <memset>
 800bc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc64 <std+0x58>)
 800bc30:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc32:	4b0d      	ldr	r3, [pc, #52]	@ (800bc68 <std+0x5c>)
 800bc34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc36:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <std+0x60>)
 800bc38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc70 <std+0x64>)
 800bc3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <std+0x68>)
 800bc40:	6224      	str	r4, [r4, #32]
 800bc42:	429c      	cmp	r4, r3
 800bc44:	d006      	beq.n	800bc54 <std+0x48>
 800bc46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc4a:	4294      	cmp	r4, r2
 800bc4c:	d002      	beq.n	800bc54 <std+0x48>
 800bc4e:	33d0      	adds	r3, #208	@ 0xd0
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d105      	bne.n	800bc60 <std+0x54>
 800bc54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc5c:	f000 b978 	b.w	800bf50 <__retarget_lock_init_recursive>
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop
 800bc64:	0800bdd1 	.word	0x0800bdd1
 800bc68:	0800bdf3 	.word	0x0800bdf3
 800bc6c:	0800be2b 	.word	0x0800be2b
 800bc70:	0800be4f 	.word	0x0800be4f
 800bc74:	20000a74 	.word	0x20000a74

0800bc78 <stdio_exit_handler>:
 800bc78:	4a02      	ldr	r2, [pc, #8]	@ (800bc84 <stdio_exit_handler+0xc>)
 800bc7a:	4903      	ldr	r1, [pc, #12]	@ (800bc88 <stdio_exit_handler+0x10>)
 800bc7c:	4803      	ldr	r0, [pc, #12]	@ (800bc8c <stdio_exit_handler+0x14>)
 800bc7e:	f000 b869 	b.w	800bd54 <_fwalk_sglue>
 800bc82:	bf00      	nop
 800bc84:	20000024 	.word	0x20000024
 800bc88:	0800d905 	.word	0x0800d905
 800bc8c:	20000034 	.word	0x20000034

0800bc90 <cleanup_stdio>:
 800bc90:	6841      	ldr	r1, [r0, #4]
 800bc92:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc4 <cleanup_stdio+0x34>)
 800bc94:	4299      	cmp	r1, r3
 800bc96:	b510      	push	{r4, lr}
 800bc98:	4604      	mov	r4, r0
 800bc9a:	d001      	beq.n	800bca0 <cleanup_stdio+0x10>
 800bc9c:	f001 fe32 	bl	800d904 <_fflush_r>
 800bca0:	68a1      	ldr	r1, [r4, #8]
 800bca2:	4b09      	ldr	r3, [pc, #36]	@ (800bcc8 <cleanup_stdio+0x38>)
 800bca4:	4299      	cmp	r1, r3
 800bca6:	d002      	beq.n	800bcae <cleanup_stdio+0x1e>
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f001 fe2b 	bl	800d904 <_fflush_r>
 800bcae:	68e1      	ldr	r1, [r4, #12]
 800bcb0:	4b06      	ldr	r3, [pc, #24]	@ (800bccc <cleanup_stdio+0x3c>)
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	d004      	beq.n	800bcc0 <cleanup_stdio+0x30>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcbc:	f001 be22 	b.w	800d904 <_fflush_r>
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20000a74 	.word	0x20000a74
 800bcc8:	20000adc 	.word	0x20000adc
 800bccc:	20000b44 	.word	0x20000b44

0800bcd0 <global_stdio_init.part.0>:
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <global_stdio_init.part.0+0x30>)
 800bcd4:	4c0b      	ldr	r4, [pc, #44]	@ (800bd04 <global_stdio_init.part.0+0x34>)
 800bcd6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd08 <global_stdio_init.part.0+0x38>)
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	4620      	mov	r0, r4
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2104      	movs	r1, #4
 800bce0:	f7ff ff94 	bl	800bc0c <std>
 800bce4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bce8:	2201      	movs	r2, #1
 800bcea:	2109      	movs	r1, #9
 800bcec:	f7ff ff8e 	bl	800bc0c <std>
 800bcf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcfa:	2112      	movs	r1, #18
 800bcfc:	f7ff bf86 	b.w	800bc0c <std>
 800bd00:	20000bac 	.word	0x20000bac
 800bd04:	20000a74 	.word	0x20000a74
 800bd08:	0800bc79 	.word	0x0800bc79

0800bd0c <__sfp_lock_acquire>:
 800bd0c:	4801      	ldr	r0, [pc, #4]	@ (800bd14 <__sfp_lock_acquire+0x8>)
 800bd0e:	f000 b920 	b.w	800bf52 <__retarget_lock_acquire_recursive>
 800bd12:	bf00      	nop
 800bd14:	20000bb5 	.word	0x20000bb5

0800bd18 <__sfp_lock_release>:
 800bd18:	4801      	ldr	r0, [pc, #4]	@ (800bd20 <__sfp_lock_release+0x8>)
 800bd1a:	f000 b91b 	b.w	800bf54 <__retarget_lock_release_recursive>
 800bd1e:	bf00      	nop
 800bd20:	20000bb5 	.word	0x20000bb5

0800bd24 <__sinit>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4604      	mov	r4, r0
 800bd28:	f7ff fff0 	bl	800bd0c <__sfp_lock_acquire>
 800bd2c:	6a23      	ldr	r3, [r4, #32]
 800bd2e:	b11b      	cbz	r3, 800bd38 <__sinit+0x14>
 800bd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd34:	f7ff bff0 	b.w	800bd18 <__sfp_lock_release>
 800bd38:	4b04      	ldr	r3, [pc, #16]	@ (800bd4c <__sinit+0x28>)
 800bd3a:	6223      	str	r3, [r4, #32]
 800bd3c:	4b04      	ldr	r3, [pc, #16]	@ (800bd50 <__sinit+0x2c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1f5      	bne.n	800bd30 <__sinit+0xc>
 800bd44:	f7ff ffc4 	bl	800bcd0 <global_stdio_init.part.0>
 800bd48:	e7f2      	b.n	800bd30 <__sinit+0xc>
 800bd4a:	bf00      	nop
 800bd4c:	0800bc91 	.word	0x0800bc91
 800bd50:	20000bac 	.word	0x20000bac

0800bd54 <_fwalk_sglue>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	4607      	mov	r7, r0
 800bd5a:	4688      	mov	r8, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	2600      	movs	r6, #0
 800bd60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd64:	f1b9 0901 	subs.w	r9, r9, #1
 800bd68:	d505      	bpl.n	800bd76 <_fwalk_sglue+0x22>
 800bd6a:	6824      	ldr	r4, [r4, #0]
 800bd6c:	2c00      	cmp	r4, #0
 800bd6e:	d1f7      	bne.n	800bd60 <_fwalk_sglue+0xc>
 800bd70:	4630      	mov	r0, r6
 800bd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd76:	89ab      	ldrh	r3, [r5, #12]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d907      	bls.n	800bd8c <_fwalk_sglue+0x38>
 800bd7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd80:	3301      	adds	r3, #1
 800bd82:	d003      	beq.n	800bd8c <_fwalk_sglue+0x38>
 800bd84:	4629      	mov	r1, r5
 800bd86:	4638      	mov	r0, r7
 800bd88:	47c0      	blx	r8
 800bd8a:	4306      	orrs	r6, r0
 800bd8c:	3568      	adds	r5, #104	@ 0x68
 800bd8e:	e7e9      	b.n	800bd64 <_fwalk_sglue+0x10>

0800bd90 <siprintf>:
 800bd90:	b40e      	push	{r1, r2, r3}
 800bd92:	b500      	push	{lr}
 800bd94:	b09c      	sub	sp, #112	@ 0x70
 800bd96:	ab1d      	add	r3, sp, #116	@ 0x74
 800bd98:	9002      	str	r0, [sp, #8]
 800bd9a:	9006      	str	r0, [sp, #24]
 800bd9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bda0:	4809      	ldr	r0, [pc, #36]	@ (800bdc8 <siprintf+0x38>)
 800bda2:	9107      	str	r1, [sp, #28]
 800bda4:	9104      	str	r1, [sp, #16]
 800bda6:	4909      	ldr	r1, [pc, #36]	@ (800bdcc <siprintf+0x3c>)
 800bda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdac:	9105      	str	r1, [sp, #20]
 800bdae:	6800      	ldr	r0, [r0, #0]
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	a902      	add	r1, sp, #8
 800bdb4:	f001 fc26 	bl	800d604 <_svfiprintf_r>
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	b01c      	add	sp, #112	@ 0x70
 800bdc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc4:	b003      	add	sp, #12
 800bdc6:	4770      	bx	lr
 800bdc8:	20000030 	.word	0x20000030
 800bdcc:	ffff0208 	.word	0xffff0208

0800bdd0 <__sread>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd8:	f000 f86c 	bl	800beb4 <_read_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	bfab      	itete	ge
 800bde0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bde2:	89a3      	ldrhlt	r3, [r4, #12]
 800bde4:	181b      	addge	r3, r3, r0
 800bde6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bdea:	bfac      	ite	ge
 800bdec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bdee:	81a3      	strhlt	r3, [r4, #12]
 800bdf0:	bd10      	pop	{r4, pc}

0800bdf2 <__swrite>:
 800bdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf6:	461f      	mov	r7, r3
 800bdf8:	898b      	ldrh	r3, [r1, #12]
 800bdfa:	05db      	lsls	r3, r3, #23
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	4616      	mov	r6, r2
 800be02:	d505      	bpl.n	800be10 <__swrite+0x1e>
 800be04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be08:	2302      	movs	r3, #2
 800be0a:	2200      	movs	r2, #0
 800be0c:	f000 f840 	bl	800be90 <_lseek_r>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	4632      	mov	r2, r6
 800be1e:	463b      	mov	r3, r7
 800be20:	4628      	mov	r0, r5
 800be22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be26:	f000 b857 	b.w	800bed8 <_write_r>

0800be2a <__sseek>:
 800be2a:	b510      	push	{r4, lr}
 800be2c:	460c      	mov	r4, r1
 800be2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be32:	f000 f82d 	bl	800be90 <_lseek_r>
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	bf15      	itete	ne
 800be3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800be3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800be42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800be46:	81a3      	strheq	r3, [r4, #12]
 800be48:	bf18      	it	ne
 800be4a:	81a3      	strhne	r3, [r4, #12]
 800be4c:	bd10      	pop	{r4, pc}

0800be4e <__sclose>:
 800be4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be52:	f000 b80d 	b.w	800be70 <_close_r>

0800be56 <memset>:
 800be56:	4402      	add	r2, r0
 800be58:	4603      	mov	r3, r0
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d100      	bne.n	800be60 <memset+0xa>
 800be5e:	4770      	bx	lr
 800be60:	f803 1b01 	strb.w	r1, [r3], #1
 800be64:	e7f9      	b.n	800be5a <memset+0x4>
	...

0800be68 <_localeconv_r>:
 800be68:	4800      	ldr	r0, [pc, #0]	@ (800be6c <_localeconv_r+0x4>)
 800be6a:	4770      	bx	lr
 800be6c:	20000170 	.word	0x20000170

0800be70 <_close_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d06      	ldr	r5, [pc, #24]	@ (800be8c <_close_r+0x1c>)
 800be74:	2300      	movs	r3, #0
 800be76:	4604      	mov	r4, r0
 800be78:	4608      	mov	r0, r1
 800be7a:	602b      	str	r3, [r5, #0]
 800be7c:	f7f7 fe82 	bl	8003b84 <_close>
 800be80:	1c43      	adds	r3, r0, #1
 800be82:	d102      	bne.n	800be8a <_close_r+0x1a>
 800be84:	682b      	ldr	r3, [r5, #0]
 800be86:	b103      	cbz	r3, 800be8a <_close_r+0x1a>
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	bd38      	pop	{r3, r4, r5, pc}
 800be8c:	20000bb0 	.word	0x20000bb0

0800be90 <_lseek_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d07      	ldr	r5, [pc, #28]	@ (800beb0 <_lseek_r+0x20>)
 800be94:	4604      	mov	r4, r0
 800be96:	4608      	mov	r0, r1
 800be98:	4611      	mov	r1, r2
 800be9a:	2200      	movs	r2, #0
 800be9c:	602a      	str	r2, [r5, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	f7f7 fe97 	bl	8003bd2 <_lseek>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_lseek_r+0x1e>
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	b103      	cbz	r3, 800beae <_lseek_r+0x1e>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	20000bb0 	.word	0x20000bb0

0800beb4 <_read_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4d07      	ldr	r5, [pc, #28]	@ (800bed4 <_read_r+0x20>)
 800beb8:	4604      	mov	r4, r0
 800beba:	4608      	mov	r0, r1
 800bebc:	4611      	mov	r1, r2
 800bebe:	2200      	movs	r2, #0
 800bec0:	602a      	str	r2, [r5, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	f7f7 fe25 	bl	8003b12 <_read>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	d102      	bne.n	800bed2 <_read_r+0x1e>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b103      	cbz	r3, 800bed2 <_read_r+0x1e>
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	20000bb0 	.word	0x20000bb0

0800bed8 <_write_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d07      	ldr	r5, [pc, #28]	@ (800bef8 <_write_r+0x20>)
 800bedc:	4604      	mov	r4, r0
 800bede:	4608      	mov	r0, r1
 800bee0:	4611      	mov	r1, r2
 800bee2:	2200      	movs	r2, #0
 800bee4:	602a      	str	r2, [r5, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	f7f7 fe30 	bl	8003b4c <_write>
 800beec:	1c43      	adds	r3, r0, #1
 800beee:	d102      	bne.n	800bef6 <_write_r+0x1e>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	b103      	cbz	r3, 800bef6 <_write_r+0x1e>
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	20000bb0 	.word	0x20000bb0

0800befc <__errno>:
 800befc:	4b01      	ldr	r3, [pc, #4]	@ (800bf04 <__errno+0x8>)
 800befe:	6818      	ldr	r0, [r3, #0]
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20000030 	.word	0x20000030

0800bf08 <__libc_init_array>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	4d0d      	ldr	r5, [pc, #52]	@ (800bf40 <__libc_init_array+0x38>)
 800bf0c:	4c0d      	ldr	r4, [pc, #52]	@ (800bf44 <__libc_init_array+0x3c>)
 800bf0e:	1b64      	subs	r4, r4, r5
 800bf10:	10a4      	asrs	r4, r4, #2
 800bf12:	2600      	movs	r6, #0
 800bf14:	42a6      	cmp	r6, r4
 800bf16:	d109      	bne.n	800bf2c <__libc_init_array+0x24>
 800bf18:	4d0b      	ldr	r5, [pc, #44]	@ (800bf48 <__libc_init_array+0x40>)
 800bf1a:	4c0c      	ldr	r4, [pc, #48]	@ (800bf4c <__libc_init_array+0x44>)
 800bf1c:	f002 f864 	bl	800dfe8 <_init>
 800bf20:	1b64      	subs	r4, r4, r5
 800bf22:	10a4      	asrs	r4, r4, #2
 800bf24:	2600      	movs	r6, #0
 800bf26:	42a6      	cmp	r6, r4
 800bf28:	d105      	bne.n	800bf36 <__libc_init_array+0x2e>
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf30:	4798      	blx	r3
 800bf32:	3601      	adds	r6, #1
 800bf34:	e7ee      	b.n	800bf14 <__libc_init_array+0xc>
 800bf36:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf3a:	4798      	blx	r3
 800bf3c:	3601      	adds	r6, #1
 800bf3e:	e7f2      	b.n	800bf26 <__libc_init_array+0x1e>
 800bf40:	0800e654 	.word	0x0800e654
 800bf44:	0800e654 	.word	0x0800e654
 800bf48:	0800e654 	.word	0x0800e654
 800bf4c:	0800e658 	.word	0x0800e658

0800bf50 <__retarget_lock_init_recursive>:
 800bf50:	4770      	bx	lr

0800bf52 <__retarget_lock_acquire_recursive>:
 800bf52:	4770      	bx	lr

0800bf54 <__retarget_lock_release_recursive>:
 800bf54:	4770      	bx	lr

0800bf56 <memcpy>:
 800bf56:	440a      	add	r2, r1
 800bf58:	4291      	cmp	r1, r2
 800bf5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf5e:	d100      	bne.n	800bf62 <memcpy+0xc>
 800bf60:	4770      	bx	lr
 800bf62:	b510      	push	{r4, lr}
 800bf64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf6c:	4291      	cmp	r1, r2
 800bf6e:	d1f9      	bne.n	800bf64 <memcpy+0xe>
 800bf70:	bd10      	pop	{r4, pc}
	...

0800bf74 <__assert_func>:
 800bf74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf76:	4614      	mov	r4, r2
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4b09      	ldr	r3, [pc, #36]	@ (800bfa0 <__assert_func+0x2c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4605      	mov	r5, r0
 800bf80:	68d8      	ldr	r0, [r3, #12]
 800bf82:	b954      	cbnz	r4, 800bf9a <__assert_func+0x26>
 800bf84:	4b07      	ldr	r3, [pc, #28]	@ (800bfa4 <__assert_func+0x30>)
 800bf86:	461c      	mov	r4, r3
 800bf88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf8c:	9100      	str	r1, [sp, #0]
 800bf8e:	462b      	mov	r3, r5
 800bf90:	4905      	ldr	r1, [pc, #20]	@ (800bfa8 <__assert_func+0x34>)
 800bf92:	f001 fcdf 	bl	800d954 <fiprintf>
 800bf96:	f001 fd19 	bl	800d9cc <abort>
 800bf9a:	4b04      	ldr	r3, [pc, #16]	@ (800bfac <__assert_func+0x38>)
 800bf9c:	e7f4      	b.n	800bf88 <__assert_func+0x14>
 800bf9e:	bf00      	nop
 800bfa0:	20000030 	.word	0x20000030
 800bfa4:	0800e362 	.word	0x0800e362
 800bfa8:	0800e334 	.word	0x0800e334
 800bfac:	0800e327 	.word	0x0800e327

0800bfb0 <quorem>:
 800bfb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	6903      	ldr	r3, [r0, #16]
 800bfb6:	690c      	ldr	r4, [r1, #16]
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	4607      	mov	r7, r0
 800bfbc:	db7e      	blt.n	800c0bc <quorem+0x10c>
 800bfbe:	3c01      	subs	r4, #1
 800bfc0:	f101 0814 	add.w	r8, r1, #20
 800bfc4:	00a3      	lsls	r3, r4, #2
 800bfc6:	f100 0514 	add.w	r5, r0, #20
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfe2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfe6:	d32e      	bcc.n	800c046 <quorem+0x96>
 800bfe8:	f04f 0a00 	mov.w	sl, #0
 800bfec:	46c4      	mov	ip, r8
 800bfee:	46ae      	mov	lr, r5
 800bff0:	46d3      	mov	fp, sl
 800bff2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bff6:	b298      	uxth	r0, r3
 800bff8:	fb06 a000 	mla	r0, r6, r0, sl
 800bffc:	0c02      	lsrs	r2, r0, #16
 800bffe:	0c1b      	lsrs	r3, r3, #16
 800c000:	fb06 2303 	mla	r3, r6, r3, r2
 800c004:	f8de 2000 	ldr.w	r2, [lr]
 800c008:	b280      	uxth	r0, r0
 800c00a:	b292      	uxth	r2, r2
 800c00c:	1a12      	subs	r2, r2, r0
 800c00e:	445a      	add	r2, fp
 800c010:	f8de 0000 	ldr.w	r0, [lr]
 800c014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c018:	b29b      	uxth	r3, r3
 800c01a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c01e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c022:	b292      	uxth	r2, r2
 800c024:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c028:	45e1      	cmp	r9, ip
 800c02a:	f84e 2b04 	str.w	r2, [lr], #4
 800c02e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c032:	d2de      	bcs.n	800bff2 <quorem+0x42>
 800c034:	9b00      	ldr	r3, [sp, #0]
 800c036:	58eb      	ldr	r3, [r5, r3]
 800c038:	b92b      	cbnz	r3, 800c046 <quorem+0x96>
 800c03a:	9b01      	ldr	r3, [sp, #4]
 800c03c:	3b04      	subs	r3, #4
 800c03e:	429d      	cmp	r5, r3
 800c040:	461a      	mov	r2, r3
 800c042:	d32f      	bcc.n	800c0a4 <quorem+0xf4>
 800c044:	613c      	str	r4, [r7, #16]
 800c046:	4638      	mov	r0, r7
 800c048:	f001 f978 	bl	800d33c <__mcmp>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	db25      	blt.n	800c09c <quorem+0xec>
 800c050:	4629      	mov	r1, r5
 800c052:	2000      	movs	r0, #0
 800c054:	f858 2b04 	ldr.w	r2, [r8], #4
 800c058:	f8d1 c000 	ldr.w	ip, [r1]
 800c05c:	fa1f fe82 	uxth.w	lr, r2
 800c060:	fa1f f38c 	uxth.w	r3, ip
 800c064:	eba3 030e 	sub.w	r3, r3, lr
 800c068:	4403      	add	r3, r0
 800c06a:	0c12      	lsrs	r2, r2, #16
 800c06c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c070:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c07a:	45c1      	cmp	r9, r8
 800c07c:	f841 3b04 	str.w	r3, [r1], #4
 800c080:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c084:	d2e6      	bcs.n	800c054 <quorem+0xa4>
 800c086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c08e:	b922      	cbnz	r2, 800c09a <quorem+0xea>
 800c090:	3b04      	subs	r3, #4
 800c092:	429d      	cmp	r5, r3
 800c094:	461a      	mov	r2, r3
 800c096:	d30b      	bcc.n	800c0b0 <quorem+0x100>
 800c098:	613c      	str	r4, [r7, #16]
 800c09a:	3601      	adds	r6, #1
 800c09c:	4630      	mov	r0, r6
 800c09e:	b003      	add	sp, #12
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	6812      	ldr	r2, [r2, #0]
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	d1cb      	bne.n	800c044 <quorem+0x94>
 800c0ac:	3c01      	subs	r4, #1
 800c0ae:	e7c6      	b.n	800c03e <quorem+0x8e>
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	3b04      	subs	r3, #4
 800c0b4:	2a00      	cmp	r2, #0
 800c0b6:	d1ef      	bne.n	800c098 <quorem+0xe8>
 800c0b8:	3c01      	subs	r4, #1
 800c0ba:	e7ea      	b.n	800c092 <quorem+0xe2>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7ee      	b.n	800c09e <quorem+0xee>

0800c0c0 <_dtoa_r>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	69c7      	ldr	r7, [r0, #28]
 800c0c6:	b099      	sub	sp, #100	@ 0x64
 800c0c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c0cc:	ec55 4b10 	vmov	r4, r5, d0
 800c0d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c0d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0d4:	4683      	mov	fp, r0
 800c0d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0da:	b97f      	cbnz	r7, 800c0fc <_dtoa_r+0x3c>
 800c0dc:	2010      	movs	r0, #16
 800c0de:	f000 fdfd 	bl	800ccdc <malloc>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c0e8:	b920      	cbnz	r0, 800c0f4 <_dtoa_r+0x34>
 800c0ea:	4ba7      	ldr	r3, [pc, #668]	@ (800c388 <_dtoa_r+0x2c8>)
 800c0ec:	21ef      	movs	r1, #239	@ 0xef
 800c0ee:	48a7      	ldr	r0, [pc, #668]	@ (800c38c <_dtoa_r+0x2cc>)
 800c0f0:	f7ff ff40 	bl	800bf74 <__assert_func>
 800c0f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0f8:	6007      	str	r7, [r0, #0]
 800c0fa:	60c7      	str	r7, [r0, #12]
 800c0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c100:	6819      	ldr	r1, [r3, #0]
 800c102:	b159      	cbz	r1, 800c11c <_dtoa_r+0x5c>
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	604a      	str	r2, [r1, #4]
 800c108:	2301      	movs	r3, #1
 800c10a:	4093      	lsls	r3, r2
 800c10c:	608b      	str	r3, [r1, #8]
 800c10e:	4658      	mov	r0, fp
 800c110:	f000 feda 	bl	800cec8 <_Bfree>
 800c114:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	1e2b      	subs	r3, r5, #0
 800c11e:	bfb9      	ittee	lt
 800c120:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c124:	9303      	strlt	r3, [sp, #12]
 800c126:	2300      	movge	r3, #0
 800c128:	6033      	strge	r3, [r6, #0]
 800c12a:	9f03      	ldr	r7, [sp, #12]
 800c12c:	4b98      	ldr	r3, [pc, #608]	@ (800c390 <_dtoa_r+0x2d0>)
 800c12e:	bfbc      	itt	lt
 800c130:	2201      	movlt	r2, #1
 800c132:	6032      	strlt	r2, [r6, #0]
 800c134:	43bb      	bics	r3, r7
 800c136:	d112      	bne.n	800c15e <_dtoa_r+0x9e>
 800c138:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c13a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c13e:	6013      	str	r3, [r2, #0]
 800c140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c144:	4323      	orrs	r3, r4
 800c146:	f000 854d 	beq.w	800cbe4 <_dtoa_r+0xb24>
 800c14a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c14c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c3a4 <_dtoa_r+0x2e4>
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 854f 	beq.w	800cbf4 <_dtoa_r+0xb34>
 800c156:	f10a 0303 	add.w	r3, sl, #3
 800c15a:	f000 bd49 	b.w	800cbf0 <_dtoa_r+0xb30>
 800c15e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c162:	2200      	movs	r2, #0
 800c164:	ec51 0b17 	vmov	r0, r1, d7
 800c168:	2300      	movs	r3, #0
 800c16a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c16e:	f7f4 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 800c172:	4680      	mov	r8, r0
 800c174:	b158      	cbz	r0, 800c18e <_dtoa_r+0xce>
 800c176:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c178:	2301      	movs	r3, #1
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c17e:	b113      	cbz	r3, 800c186 <_dtoa_r+0xc6>
 800c180:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c182:	4b84      	ldr	r3, [pc, #528]	@ (800c394 <_dtoa_r+0x2d4>)
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c3a8 <_dtoa_r+0x2e8>
 800c18a:	f000 bd33 	b.w	800cbf4 <_dtoa_r+0xb34>
 800c18e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c192:	aa16      	add	r2, sp, #88	@ 0x58
 800c194:	a917      	add	r1, sp, #92	@ 0x5c
 800c196:	4658      	mov	r0, fp
 800c198:	f001 f980 	bl	800d49c <__d2b>
 800c19c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c1a0:	4681      	mov	r9, r0
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	d077      	beq.n	800c296 <_dtoa_r+0x1d6>
 800c1a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c1b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c1bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	4b74      	ldr	r3, [pc, #464]	@ (800c398 <_dtoa_r+0x2d8>)
 800c1c6:	f7f4 f85f 	bl	8000288 <__aeabi_dsub>
 800c1ca:	a369      	add	r3, pc, #420	@ (adr r3, 800c370 <_dtoa_r+0x2b0>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 fa12 	bl	80005f8 <__aeabi_dmul>
 800c1d4:	a368      	add	r3, pc, #416	@ (adr r3, 800c378 <_dtoa_r+0x2b8>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f4 f857 	bl	800028c <__adddf3>
 800c1de:	4604      	mov	r4, r0
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	f7f4 f99e 	bl	8000524 <__aeabi_i2d>
 800c1e8:	a365      	add	r3, pc, #404	@ (adr r3, 800c380 <_dtoa_r+0x2c0>)
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	f7f4 fa03 	bl	80005f8 <__aeabi_dmul>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 f847 	bl	800028c <__adddf3>
 800c1fe:	4604      	mov	r4, r0
 800c200:	460d      	mov	r5, r1
 800c202:	f7f4 fca9 	bl	8000b58 <__aeabi_d2iz>
 800c206:	2200      	movs	r2, #0
 800c208:	4607      	mov	r7, r0
 800c20a:	2300      	movs	r3, #0
 800c20c:	4620      	mov	r0, r4
 800c20e:	4629      	mov	r1, r5
 800c210:	f7f4 fc64 	bl	8000adc <__aeabi_dcmplt>
 800c214:	b140      	cbz	r0, 800c228 <_dtoa_r+0x168>
 800c216:	4638      	mov	r0, r7
 800c218:	f7f4 f984 	bl	8000524 <__aeabi_i2d>
 800c21c:	4622      	mov	r2, r4
 800c21e:	462b      	mov	r3, r5
 800c220:	f7f4 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 800c224:	b900      	cbnz	r0, 800c228 <_dtoa_r+0x168>
 800c226:	3f01      	subs	r7, #1
 800c228:	2f16      	cmp	r7, #22
 800c22a:	d851      	bhi.n	800c2d0 <_dtoa_r+0x210>
 800c22c:	4b5b      	ldr	r3, [pc, #364]	@ (800c39c <_dtoa_r+0x2dc>)
 800c22e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c23a:	f7f4 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d048      	beq.n	800c2d4 <_dtoa_r+0x214>
 800c242:	3f01      	subs	r7, #1
 800c244:	2300      	movs	r3, #0
 800c246:	9312      	str	r3, [sp, #72]	@ 0x48
 800c248:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c24a:	1b9b      	subs	r3, r3, r6
 800c24c:	1e5a      	subs	r2, r3, #1
 800c24e:	bf44      	itt	mi
 800c250:	f1c3 0801 	rsbmi	r8, r3, #1
 800c254:	2300      	movmi	r3, #0
 800c256:	9208      	str	r2, [sp, #32]
 800c258:	bf54      	ite	pl
 800c25a:	f04f 0800 	movpl.w	r8, #0
 800c25e:	9308      	strmi	r3, [sp, #32]
 800c260:	2f00      	cmp	r7, #0
 800c262:	db39      	blt.n	800c2d8 <_dtoa_r+0x218>
 800c264:	9b08      	ldr	r3, [sp, #32]
 800c266:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c268:	443b      	add	r3, r7
 800c26a:	9308      	str	r3, [sp, #32]
 800c26c:	2300      	movs	r3, #0
 800c26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c272:	2b09      	cmp	r3, #9
 800c274:	d864      	bhi.n	800c340 <_dtoa_r+0x280>
 800c276:	2b05      	cmp	r3, #5
 800c278:	bfc4      	itt	gt
 800c27a:	3b04      	subgt	r3, #4
 800c27c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c280:	f1a3 0302 	sub.w	r3, r3, #2
 800c284:	bfcc      	ite	gt
 800c286:	2400      	movgt	r4, #0
 800c288:	2401      	movle	r4, #1
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d863      	bhi.n	800c356 <_dtoa_r+0x296>
 800c28e:	e8df f003 	tbb	[pc, r3]
 800c292:	372a      	.short	0x372a
 800c294:	5535      	.short	0x5535
 800c296:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c29a:	441e      	add	r6, r3
 800c29c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c2a0:	2b20      	cmp	r3, #32
 800c2a2:	bfc1      	itttt	gt
 800c2a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c2a8:	409f      	lslgt	r7, r3
 800c2aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c2ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c2b2:	bfd6      	itet	le
 800c2b4:	f1c3 0320 	rsble	r3, r3, #32
 800c2b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c2bc:	fa04 f003 	lslle.w	r0, r4, r3
 800c2c0:	f7f4 f920 	bl	8000504 <__aeabi_ui2d>
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2ca:	3e01      	subs	r6, #1
 800c2cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800c2ce:	e777      	b.n	800c1c0 <_dtoa_r+0x100>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e7b8      	b.n	800c246 <_dtoa_r+0x186>
 800c2d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c2d6:	e7b7      	b.n	800c248 <_dtoa_r+0x188>
 800c2d8:	427b      	negs	r3, r7
 800c2da:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2dc:	2300      	movs	r3, #0
 800c2de:	eba8 0807 	sub.w	r8, r8, r7
 800c2e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2e4:	e7c4      	b.n	800c270 <_dtoa_r+0x1b0>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	dc35      	bgt.n	800c35c <_dtoa_r+0x29c>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	9307      	str	r3, [sp, #28]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2fa:	e00b      	b.n	800c314 <_dtoa_r+0x254>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e7f3      	b.n	800c2e8 <_dtoa_r+0x228>
 800c300:	2300      	movs	r3, #0
 800c302:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c306:	18fb      	adds	r3, r7, r3
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	9307      	str	r3, [sp, #28]
 800c310:	bfb8      	it	lt
 800c312:	2301      	movlt	r3, #1
 800c314:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c318:	2100      	movs	r1, #0
 800c31a:	2204      	movs	r2, #4
 800c31c:	f102 0514 	add.w	r5, r2, #20
 800c320:	429d      	cmp	r5, r3
 800c322:	d91f      	bls.n	800c364 <_dtoa_r+0x2a4>
 800c324:	6041      	str	r1, [r0, #4]
 800c326:	4658      	mov	r0, fp
 800c328:	f000 fd8e 	bl	800ce48 <_Balloc>
 800c32c:	4682      	mov	sl, r0
 800c32e:	2800      	cmp	r0, #0
 800c330:	d13c      	bne.n	800c3ac <_dtoa_r+0x2ec>
 800c332:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a0 <_dtoa_r+0x2e0>)
 800c334:	4602      	mov	r2, r0
 800c336:	f240 11af 	movw	r1, #431	@ 0x1af
 800c33a:	e6d8      	b.n	800c0ee <_dtoa_r+0x2e>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e7e0      	b.n	800c302 <_dtoa_r+0x242>
 800c340:	2401      	movs	r4, #1
 800c342:	2300      	movs	r3, #0
 800c344:	9309      	str	r3, [sp, #36]	@ 0x24
 800c346:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	2200      	movs	r2, #0
 800c352:	2312      	movs	r3, #18
 800c354:	e7d0      	b.n	800c2f8 <_dtoa_r+0x238>
 800c356:	2301      	movs	r3, #1
 800c358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c35a:	e7f5      	b.n	800c348 <_dtoa_r+0x288>
 800c35c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	9307      	str	r3, [sp, #28]
 800c362:	e7d7      	b.n	800c314 <_dtoa_r+0x254>
 800c364:	3101      	adds	r1, #1
 800c366:	0052      	lsls	r2, r2, #1
 800c368:	e7d8      	b.n	800c31c <_dtoa_r+0x25c>
 800c36a:	bf00      	nop
 800c36c:	f3af 8000 	nop.w
 800c370:	636f4361 	.word	0x636f4361
 800c374:	3fd287a7 	.word	0x3fd287a7
 800c378:	8b60c8b3 	.word	0x8b60c8b3
 800c37c:	3fc68a28 	.word	0x3fc68a28
 800c380:	509f79fb 	.word	0x509f79fb
 800c384:	3fd34413 	.word	0x3fd34413
 800c388:	0800e284 	.word	0x0800e284
 800c38c:	0800e370 	.word	0x0800e370
 800c390:	7ff00000 	.word	0x7ff00000
 800c394:	0800e304 	.word	0x0800e304
 800c398:	3ff80000 	.word	0x3ff80000
 800c39c:	0800e468 	.word	0x0800e468
 800c3a0:	0800e3c8 	.word	0x0800e3c8
 800c3a4:	0800e36c 	.word	0x0800e36c
 800c3a8:	0800e303 	.word	0x0800e303
 800c3ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3b0:	6018      	str	r0, [r3, #0]
 800c3b2:	9b07      	ldr	r3, [sp, #28]
 800c3b4:	2b0e      	cmp	r3, #14
 800c3b6:	f200 80a4 	bhi.w	800c502 <_dtoa_r+0x442>
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	f000 80a1 	beq.w	800c502 <_dtoa_r+0x442>
 800c3c0:	2f00      	cmp	r7, #0
 800c3c2:	dd33      	ble.n	800c42c <_dtoa_r+0x36c>
 800c3c4:	4bad      	ldr	r3, [pc, #692]	@ (800c67c <_dtoa_r+0x5bc>)
 800c3c6:	f007 020f 	and.w	r2, r7, #15
 800c3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ce:	ed93 7b00 	vldr	d7, [r3]
 800c3d2:	05f8      	lsls	r0, r7, #23
 800c3d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c3d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c3dc:	d516      	bpl.n	800c40c <_dtoa_r+0x34c>
 800c3de:	4ba8      	ldr	r3, [pc, #672]	@ (800c680 <_dtoa_r+0x5c0>)
 800c3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3e8:	f7f4 fa30 	bl	800084c <__aeabi_ddiv>
 800c3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f0:	f004 040f 	and.w	r4, r4, #15
 800c3f4:	2603      	movs	r6, #3
 800c3f6:	4da2      	ldr	r5, [pc, #648]	@ (800c680 <_dtoa_r+0x5c0>)
 800c3f8:	b954      	cbnz	r4, 800c410 <_dtoa_r+0x350>
 800c3fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c402:	f7f4 fa23 	bl	800084c <__aeabi_ddiv>
 800c406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c40a:	e028      	b.n	800c45e <_dtoa_r+0x39e>
 800c40c:	2602      	movs	r6, #2
 800c40e:	e7f2      	b.n	800c3f6 <_dtoa_r+0x336>
 800c410:	07e1      	lsls	r1, r4, #31
 800c412:	d508      	bpl.n	800c426 <_dtoa_r+0x366>
 800c414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c41c:	f7f4 f8ec 	bl	80005f8 <__aeabi_dmul>
 800c420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c424:	3601      	adds	r6, #1
 800c426:	1064      	asrs	r4, r4, #1
 800c428:	3508      	adds	r5, #8
 800c42a:	e7e5      	b.n	800c3f8 <_dtoa_r+0x338>
 800c42c:	f000 80d2 	beq.w	800c5d4 <_dtoa_r+0x514>
 800c430:	427c      	negs	r4, r7
 800c432:	4b92      	ldr	r3, [pc, #584]	@ (800c67c <_dtoa_r+0x5bc>)
 800c434:	4d92      	ldr	r5, [pc, #584]	@ (800c680 <_dtoa_r+0x5c0>)
 800c436:	f004 020f 	and.w	r2, r4, #15
 800c43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44e:	1124      	asrs	r4, r4, #4
 800c450:	2300      	movs	r3, #0
 800c452:	2602      	movs	r6, #2
 800c454:	2c00      	cmp	r4, #0
 800c456:	f040 80b2 	bne.w	800c5be <_dtoa_r+0x4fe>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1d3      	bne.n	800c406 <_dtoa_r+0x346>
 800c45e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c460:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 80b7 	beq.w	800c5d8 <_dtoa_r+0x518>
 800c46a:	4b86      	ldr	r3, [pc, #536]	@ (800c684 <_dtoa_r+0x5c4>)
 800c46c:	2200      	movs	r2, #0
 800c46e:	4620      	mov	r0, r4
 800c470:	4629      	mov	r1, r5
 800c472:	f7f4 fb33 	bl	8000adc <__aeabi_dcmplt>
 800c476:	2800      	cmp	r0, #0
 800c478:	f000 80ae 	beq.w	800c5d8 <_dtoa_r+0x518>
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 80aa 	beq.w	800c5d8 <_dtoa_r+0x518>
 800c484:	9b00      	ldr	r3, [sp, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	dd37      	ble.n	800c4fa <_dtoa_r+0x43a>
 800c48a:	1e7b      	subs	r3, r7, #1
 800c48c:	9304      	str	r3, [sp, #16]
 800c48e:	4620      	mov	r0, r4
 800c490:	4b7d      	ldr	r3, [pc, #500]	@ (800c688 <_dtoa_r+0x5c8>)
 800c492:	2200      	movs	r2, #0
 800c494:	4629      	mov	r1, r5
 800c496:	f7f4 f8af 	bl	80005f8 <__aeabi_dmul>
 800c49a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c49e:	9c00      	ldr	r4, [sp, #0]
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f7f4 f83e 	bl	8000524 <__aeabi_i2d>
 800c4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4ac:	f7f4 f8a4 	bl	80005f8 <__aeabi_dmul>
 800c4b0:	4b76      	ldr	r3, [pc, #472]	@ (800c68c <_dtoa_r+0x5cc>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f7f3 feea 	bl	800028c <__adddf3>
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c4be:	2c00      	cmp	r4, #0
 800c4c0:	f040 808d 	bne.w	800c5de <_dtoa_r+0x51e>
 800c4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c8:	4b71      	ldr	r3, [pc, #452]	@ (800c690 <_dtoa_r+0x5d0>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f7f3 fedc 	bl	8000288 <__aeabi_dsub>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4d8:	462a      	mov	r2, r5
 800c4da:	4633      	mov	r3, r6
 800c4dc:	f7f4 fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	f040 828b 	bne.w	800c9fc <_dtoa_r+0x93c>
 800c4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ea:	462a      	mov	r2, r5
 800c4ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4f0:	f7f4 faf4 	bl	8000adc <__aeabi_dcmplt>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	f040 8128 	bne.w	800c74a <_dtoa_r+0x68a>
 800c4fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c502:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c504:	2b00      	cmp	r3, #0
 800c506:	f2c0 815a 	blt.w	800c7be <_dtoa_r+0x6fe>
 800c50a:	2f0e      	cmp	r7, #14
 800c50c:	f300 8157 	bgt.w	800c7be <_dtoa_r+0x6fe>
 800c510:	4b5a      	ldr	r3, [pc, #360]	@ (800c67c <_dtoa_r+0x5bc>)
 800c512:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c516:	ed93 7b00 	vldr	d7, [r3]
 800c51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	ed8d 7b00 	vstr	d7, [sp]
 800c522:	da03      	bge.n	800c52c <_dtoa_r+0x46c>
 800c524:	9b07      	ldr	r3, [sp, #28]
 800c526:	2b00      	cmp	r3, #0
 800c528:	f340 8101 	ble.w	800c72e <_dtoa_r+0x66e>
 800c52c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c530:	4656      	mov	r6, sl
 800c532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f4 f987 	bl	800084c <__aeabi_ddiv>
 800c53e:	f7f4 fb0b 	bl	8000b58 <__aeabi_d2iz>
 800c542:	4680      	mov	r8, r0
 800c544:	f7f3 ffee 	bl	8000524 <__aeabi_i2d>
 800c548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c54c:	f7f4 f854 	bl	80005f8 <__aeabi_dmul>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	4620      	mov	r0, r4
 800c556:	4629      	mov	r1, r5
 800c558:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c55c:	f7f3 fe94 	bl	8000288 <__aeabi_dsub>
 800c560:	f806 4b01 	strb.w	r4, [r6], #1
 800c564:	9d07      	ldr	r5, [sp, #28]
 800c566:	eba6 040a 	sub.w	r4, r6, sl
 800c56a:	42a5      	cmp	r5, r4
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	f040 8117 	bne.w	800c7a2 <_dtoa_r+0x6e2>
 800c574:	f7f3 fe8a 	bl	800028c <__adddf3>
 800c578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c57c:	4604      	mov	r4, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	f7f4 faca 	bl	8000b18 <__aeabi_dcmpgt>
 800c584:	2800      	cmp	r0, #0
 800c586:	f040 80f9 	bne.w	800c77c <_dtoa_r+0x6bc>
 800c58a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c58e:	4620      	mov	r0, r4
 800c590:	4629      	mov	r1, r5
 800c592:	f7f4 fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 800c596:	b118      	cbz	r0, 800c5a0 <_dtoa_r+0x4e0>
 800c598:	f018 0f01 	tst.w	r8, #1
 800c59c:	f040 80ee 	bne.w	800c77c <_dtoa_r+0x6bc>
 800c5a0:	4649      	mov	r1, r9
 800c5a2:	4658      	mov	r0, fp
 800c5a4:	f000 fc90 	bl	800cec8 <_Bfree>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	7033      	strb	r3, [r6, #0]
 800c5ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c5ae:	3701      	adds	r7, #1
 800c5b0:	601f      	str	r7, [r3, #0]
 800c5b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 831d 	beq.w	800cbf4 <_dtoa_r+0xb34>
 800c5ba:	601e      	str	r6, [r3, #0]
 800c5bc:	e31a      	b.n	800cbf4 <_dtoa_r+0xb34>
 800c5be:	07e2      	lsls	r2, r4, #31
 800c5c0:	d505      	bpl.n	800c5ce <_dtoa_r+0x50e>
 800c5c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5c6:	f7f4 f817 	bl	80005f8 <__aeabi_dmul>
 800c5ca:	3601      	adds	r6, #1
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	1064      	asrs	r4, r4, #1
 800c5d0:	3508      	adds	r5, #8
 800c5d2:	e73f      	b.n	800c454 <_dtoa_r+0x394>
 800c5d4:	2602      	movs	r6, #2
 800c5d6:	e742      	b.n	800c45e <_dtoa_r+0x39e>
 800c5d8:	9c07      	ldr	r4, [sp, #28]
 800c5da:	9704      	str	r7, [sp, #16]
 800c5dc:	e761      	b.n	800c4a2 <_dtoa_r+0x3e2>
 800c5de:	4b27      	ldr	r3, [pc, #156]	@ (800c67c <_dtoa_r+0x5bc>)
 800c5e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5ea:	4454      	add	r4, sl
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	d053      	beq.n	800c698 <_dtoa_r+0x5d8>
 800c5f0:	4928      	ldr	r1, [pc, #160]	@ (800c694 <_dtoa_r+0x5d4>)
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	f7f4 f92a 	bl	800084c <__aeabi_ddiv>
 800c5f8:	4633      	mov	r3, r6
 800c5fa:	462a      	mov	r2, r5
 800c5fc:	f7f3 fe44 	bl	8000288 <__aeabi_dsub>
 800c600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c604:	4656      	mov	r6, sl
 800c606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c60a:	f7f4 faa5 	bl	8000b58 <__aeabi_d2iz>
 800c60e:	4605      	mov	r5, r0
 800c610:	f7f3 ff88 	bl	8000524 <__aeabi_i2d>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c61c:	f7f3 fe34 	bl	8000288 <__aeabi_dsub>
 800c620:	3530      	adds	r5, #48	@ 0x30
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c62a:	f806 5b01 	strb.w	r5, [r6], #1
 800c62e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c632:	f7f4 fa53 	bl	8000adc <__aeabi_dcmplt>
 800c636:	2800      	cmp	r0, #0
 800c638:	d171      	bne.n	800c71e <_dtoa_r+0x65e>
 800c63a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c63e:	4911      	ldr	r1, [pc, #68]	@ (800c684 <_dtoa_r+0x5c4>)
 800c640:	2000      	movs	r0, #0
 800c642:	f7f3 fe21 	bl	8000288 <__aeabi_dsub>
 800c646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c64a:	f7f4 fa47 	bl	8000adc <__aeabi_dcmplt>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f040 8095 	bne.w	800c77e <_dtoa_r+0x6be>
 800c654:	42a6      	cmp	r6, r4
 800c656:	f43f af50 	beq.w	800c4fa <_dtoa_r+0x43a>
 800c65a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c65e:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <_dtoa_r+0x5c8>)
 800c660:	2200      	movs	r2, #0
 800c662:	f7f3 ffc9 	bl	80005f8 <__aeabi_dmul>
 800c666:	4b08      	ldr	r3, [pc, #32]	@ (800c688 <_dtoa_r+0x5c8>)
 800c668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c66c:	2200      	movs	r2, #0
 800c66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c672:	f7f3 ffc1 	bl	80005f8 <__aeabi_dmul>
 800c676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c67a:	e7c4      	b.n	800c606 <_dtoa_r+0x546>
 800c67c:	0800e468 	.word	0x0800e468
 800c680:	0800e440 	.word	0x0800e440
 800c684:	3ff00000 	.word	0x3ff00000
 800c688:	40240000 	.word	0x40240000
 800c68c:	401c0000 	.word	0x401c0000
 800c690:	40140000 	.word	0x40140000
 800c694:	3fe00000 	.word	0x3fe00000
 800c698:	4631      	mov	r1, r6
 800c69a:	4628      	mov	r0, r5
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6a4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c6a6:	4656      	mov	r6, sl
 800c6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ac:	f7f4 fa54 	bl	8000b58 <__aeabi_d2iz>
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	f7f3 ff37 	bl	8000524 <__aeabi_i2d>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6be:	f7f3 fde3 	bl	8000288 <__aeabi_dsub>
 800c6c2:	3530      	adds	r5, #48	@ 0x30
 800c6c4:	f806 5b01 	strb.w	r5, [r6], #1
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	42a6      	cmp	r6, r4
 800c6ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	d124      	bne.n	800c722 <_dtoa_r+0x662>
 800c6d8:	4bac      	ldr	r3, [pc, #688]	@ (800c98c <_dtoa_r+0x8cc>)
 800c6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6de:	f7f3 fdd5 	bl	800028c <__adddf3>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ea:	f7f4 fa15 	bl	8000b18 <__aeabi_dcmpgt>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d145      	bne.n	800c77e <_dtoa_r+0x6be>
 800c6f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6f6:	49a5      	ldr	r1, [pc, #660]	@ (800c98c <_dtoa_r+0x8cc>)
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	f7f3 fdc5 	bl	8000288 <__aeabi_dsub>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c706:	f7f4 f9e9 	bl	8000adc <__aeabi_dcmplt>
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f43f aef5 	beq.w	800c4fa <_dtoa_r+0x43a>
 800c710:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c712:	1e73      	subs	r3, r6, #1
 800c714:	9315      	str	r3, [sp, #84]	@ 0x54
 800c716:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c71a:	2b30      	cmp	r3, #48	@ 0x30
 800c71c:	d0f8      	beq.n	800c710 <_dtoa_r+0x650>
 800c71e:	9f04      	ldr	r7, [sp, #16]
 800c720:	e73e      	b.n	800c5a0 <_dtoa_r+0x4e0>
 800c722:	4b9b      	ldr	r3, [pc, #620]	@ (800c990 <_dtoa_r+0x8d0>)
 800c724:	f7f3 ff68 	bl	80005f8 <__aeabi_dmul>
 800c728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c72c:	e7bc      	b.n	800c6a8 <_dtoa_r+0x5e8>
 800c72e:	d10c      	bne.n	800c74a <_dtoa_r+0x68a>
 800c730:	4b98      	ldr	r3, [pc, #608]	@ (800c994 <_dtoa_r+0x8d4>)
 800c732:	2200      	movs	r2, #0
 800c734:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c738:	f7f3 ff5e 	bl	80005f8 <__aeabi_dmul>
 800c73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c740:	f7f4 f9e0 	bl	8000b04 <__aeabi_dcmpge>
 800c744:	2800      	cmp	r0, #0
 800c746:	f000 8157 	beq.w	800c9f8 <_dtoa_r+0x938>
 800c74a:	2400      	movs	r4, #0
 800c74c:	4625      	mov	r5, r4
 800c74e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c750:	43db      	mvns	r3, r3
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	4656      	mov	r6, sl
 800c756:	2700      	movs	r7, #0
 800c758:	4621      	mov	r1, r4
 800c75a:	4658      	mov	r0, fp
 800c75c:	f000 fbb4 	bl	800cec8 <_Bfree>
 800c760:	2d00      	cmp	r5, #0
 800c762:	d0dc      	beq.n	800c71e <_dtoa_r+0x65e>
 800c764:	b12f      	cbz	r7, 800c772 <_dtoa_r+0x6b2>
 800c766:	42af      	cmp	r7, r5
 800c768:	d003      	beq.n	800c772 <_dtoa_r+0x6b2>
 800c76a:	4639      	mov	r1, r7
 800c76c:	4658      	mov	r0, fp
 800c76e:	f000 fbab 	bl	800cec8 <_Bfree>
 800c772:	4629      	mov	r1, r5
 800c774:	4658      	mov	r0, fp
 800c776:	f000 fba7 	bl	800cec8 <_Bfree>
 800c77a:	e7d0      	b.n	800c71e <_dtoa_r+0x65e>
 800c77c:	9704      	str	r7, [sp, #16]
 800c77e:	4633      	mov	r3, r6
 800c780:	461e      	mov	r6, r3
 800c782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c786:	2a39      	cmp	r2, #57	@ 0x39
 800c788:	d107      	bne.n	800c79a <_dtoa_r+0x6da>
 800c78a:	459a      	cmp	sl, r3
 800c78c:	d1f8      	bne.n	800c780 <_dtoa_r+0x6c0>
 800c78e:	9a04      	ldr	r2, [sp, #16]
 800c790:	3201      	adds	r2, #1
 800c792:	9204      	str	r2, [sp, #16]
 800c794:	2230      	movs	r2, #48	@ 0x30
 800c796:	f88a 2000 	strb.w	r2, [sl]
 800c79a:	781a      	ldrb	r2, [r3, #0]
 800c79c:	3201      	adds	r2, #1
 800c79e:	701a      	strb	r2, [r3, #0]
 800c7a0:	e7bd      	b.n	800c71e <_dtoa_r+0x65e>
 800c7a2:	4b7b      	ldr	r3, [pc, #492]	@ (800c990 <_dtoa_r+0x8d0>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f7f3 ff27 	bl	80005f8 <__aeabi_dmul>
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	f7f4 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f43f aebb 	beq.w	800c532 <_dtoa_r+0x472>
 800c7bc:	e6f0      	b.n	800c5a0 <_dtoa_r+0x4e0>
 800c7be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	f000 80db 	beq.w	800c97c <_dtoa_r+0x8bc>
 800c7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7c8:	2a01      	cmp	r2, #1
 800c7ca:	f300 80bf 	bgt.w	800c94c <_dtoa_r+0x88c>
 800c7ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c7d0:	2a00      	cmp	r2, #0
 800c7d2:	f000 80b7 	beq.w	800c944 <_dtoa_r+0x884>
 800c7d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c7da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c7dc:	4646      	mov	r6, r8
 800c7de:	9a08      	ldr	r2, [sp, #32]
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	441a      	add	r2, r3
 800c7e4:	4658      	mov	r0, fp
 800c7e6:	4498      	add	r8, r3
 800c7e8:	9208      	str	r2, [sp, #32]
 800c7ea:	f000 fc21 	bl	800d030 <__i2b>
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	b15e      	cbz	r6, 800c80a <_dtoa_r+0x74a>
 800c7f2:	9b08      	ldr	r3, [sp, #32]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dd08      	ble.n	800c80a <_dtoa_r+0x74a>
 800c7f8:	42b3      	cmp	r3, r6
 800c7fa:	9a08      	ldr	r2, [sp, #32]
 800c7fc:	bfa8      	it	ge
 800c7fe:	4633      	movge	r3, r6
 800c800:	eba8 0803 	sub.w	r8, r8, r3
 800c804:	1af6      	subs	r6, r6, r3
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	9308      	str	r3, [sp, #32]
 800c80a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c80c:	b1f3      	cbz	r3, 800c84c <_dtoa_r+0x78c>
 800c80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 80b7 	beq.w	800c984 <_dtoa_r+0x8c4>
 800c816:	b18c      	cbz	r4, 800c83c <_dtoa_r+0x77c>
 800c818:	4629      	mov	r1, r5
 800c81a:	4622      	mov	r2, r4
 800c81c:	4658      	mov	r0, fp
 800c81e:	f000 fcc7 	bl	800d1b0 <__pow5mult>
 800c822:	464a      	mov	r2, r9
 800c824:	4601      	mov	r1, r0
 800c826:	4605      	mov	r5, r0
 800c828:	4658      	mov	r0, fp
 800c82a:	f000 fc17 	bl	800d05c <__multiply>
 800c82e:	4649      	mov	r1, r9
 800c830:	9004      	str	r0, [sp, #16]
 800c832:	4658      	mov	r0, fp
 800c834:	f000 fb48 	bl	800cec8 <_Bfree>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	4699      	mov	r9, r3
 800c83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c83e:	1b1a      	subs	r2, r3, r4
 800c840:	d004      	beq.n	800c84c <_dtoa_r+0x78c>
 800c842:	4649      	mov	r1, r9
 800c844:	4658      	mov	r0, fp
 800c846:	f000 fcb3 	bl	800d1b0 <__pow5mult>
 800c84a:	4681      	mov	r9, r0
 800c84c:	2101      	movs	r1, #1
 800c84e:	4658      	mov	r0, fp
 800c850:	f000 fbee 	bl	800d030 <__i2b>
 800c854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c856:	4604      	mov	r4, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 81cf 	beq.w	800cbfc <_dtoa_r+0xb3c>
 800c85e:	461a      	mov	r2, r3
 800c860:	4601      	mov	r1, r0
 800c862:	4658      	mov	r0, fp
 800c864:	f000 fca4 	bl	800d1b0 <__pow5mult>
 800c868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	4604      	mov	r4, r0
 800c86e:	f300 8095 	bgt.w	800c99c <_dtoa_r+0x8dc>
 800c872:	9b02      	ldr	r3, [sp, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 8087 	bne.w	800c988 <_dtoa_r+0x8c8>
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c880:	2b00      	cmp	r3, #0
 800c882:	f040 8089 	bne.w	800c998 <_dtoa_r+0x8d8>
 800c886:	9b03      	ldr	r3, [sp, #12]
 800c888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c88c:	0d1b      	lsrs	r3, r3, #20
 800c88e:	051b      	lsls	r3, r3, #20
 800c890:	b12b      	cbz	r3, 800c89e <_dtoa_r+0x7de>
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	3301      	adds	r3, #1
 800c896:	9308      	str	r3, [sp, #32]
 800c898:	f108 0801 	add.w	r8, r8, #1
 800c89c:	2301      	movs	r3, #1
 800c89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 81b0 	beq.w	800cc08 <_dtoa_r+0xb48>
 800c8a8:	6923      	ldr	r3, [r4, #16]
 800c8aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8ae:	6918      	ldr	r0, [r3, #16]
 800c8b0:	f000 fb72 	bl	800cf98 <__hi0bits>
 800c8b4:	f1c0 0020 	rsb	r0, r0, #32
 800c8b8:	9b08      	ldr	r3, [sp, #32]
 800c8ba:	4418      	add	r0, r3
 800c8bc:	f010 001f 	ands.w	r0, r0, #31
 800c8c0:	d077      	beq.n	800c9b2 <_dtoa_r+0x8f2>
 800c8c2:	f1c0 0320 	rsb	r3, r0, #32
 800c8c6:	2b04      	cmp	r3, #4
 800c8c8:	dd6b      	ble.n	800c9a2 <_dtoa_r+0x8e2>
 800c8ca:	9b08      	ldr	r3, [sp, #32]
 800c8cc:	f1c0 001c 	rsb	r0, r0, #28
 800c8d0:	4403      	add	r3, r0
 800c8d2:	4480      	add	r8, r0
 800c8d4:	4406      	add	r6, r0
 800c8d6:	9308      	str	r3, [sp, #32]
 800c8d8:	f1b8 0f00 	cmp.w	r8, #0
 800c8dc:	dd05      	ble.n	800c8ea <_dtoa_r+0x82a>
 800c8de:	4649      	mov	r1, r9
 800c8e0:	4642      	mov	r2, r8
 800c8e2:	4658      	mov	r0, fp
 800c8e4:	f000 fcbe 	bl	800d264 <__lshift>
 800c8e8:	4681      	mov	r9, r0
 800c8ea:	9b08      	ldr	r3, [sp, #32]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dd05      	ble.n	800c8fc <_dtoa_r+0x83c>
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	4658      	mov	r0, fp
 800c8f6:	f000 fcb5 	bl	800d264 <__lshift>
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d059      	beq.n	800c9b6 <_dtoa_r+0x8f6>
 800c902:	4621      	mov	r1, r4
 800c904:	4648      	mov	r0, r9
 800c906:	f000 fd19 	bl	800d33c <__mcmp>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	da53      	bge.n	800c9b6 <_dtoa_r+0x8f6>
 800c90e:	1e7b      	subs	r3, r7, #1
 800c910:	9304      	str	r3, [sp, #16]
 800c912:	4649      	mov	r1, r9
 800c914:	2300      	movs	r3, #0
 800c916:	220a      	movs	r2, #10
 800c918:	4658      	mov	r0, fp
 800c91a:	f000 faf7 	bl	800cf0c <__multadd>
 800c91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c920:	4681      	mov	r9, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	f000 8172 	beq.w	800cc0c <_dtoa_r+0xb4c>
 800c928:	2300      	movs	r3, #0
 800c92a:	4629      	mov	r1, r5
 800c92c:	220a      	movs	r2, #10
 800c92e:	4658      	mov	r0, fp
 800c930:	f000 faec 	bl	800cf0c <__multadd>
 800c934:	9b00      	ldr	r3, [sp, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	4605      	mov	r5, r0
 800c93a:	dc67      	bgt.n	800ca0c <_dtoa_r+0x94c>
 800c93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93e:	2b02      	cmp	r3, #2
 800c940:	dc41      	bgt.n	800c9c6 <_dtoa_r+0x906>
 800c942:	e063      	b.n	800ca0c <_dtoa_r+0x94c>
 800c944:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c946:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c94a:	e746      	b.n	800c7da <_dtoa_r+0x71a>
 800c94c:	9b07      	ldr	r3, [sp, #28]
 800c94e:	1e5c      	subs	r4, r3, #1
 800c950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c952:	42a3      	cmp	r3, r4
 800c954:	bfbf      	itttt	lt
 800c956:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c958:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c95a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c95c:	1ae3      	sublt	r3, r4, r3
 800c95e:	bfb4      	ite	lt
 800c960:	18d2      	addlt	r2, r2, r3
 800c962:	1b1c      	subge	r4, r3, r4
 800c964:	9b07      	ldr	r3, [sp, #28]
 800c966:	bfbc      	itt	lt
 800c968:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c96a:	2400      	movlt	r4, #0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfb5      	itete	lt
 800c970:	eba8 0603 	sublt.w	r6, r8, r3
 800c974:	9b07      	ldrge	r3, [sp, #28]
 800c976:	2300      	movlt	r3, #0
 800c978:	4646      	movge	r6, r8
 800c97a:	e730      	b.n	800c7de <_dtoa_r+0x71e>
 800c97c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c97e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c980:	4646      	mov	r6, r8
 800c982:	e735      	b.n	800c7f0 <_dtoa_r+0x730>
 800c984:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c986:	e75c      	b.n	800c842 <_dtoa_r+0x782>
 800c988:	2300      	movs	r3, #0
 800c98a:	e788      	b.n	800c89e <_dtoa_r+0x7de>
 800c98c:	3fe00000 	.word	0x3fe00000
 800c990:	40240000 	.word	0x40240000
 800c994:	40140000 	.word	0x40140000
 800c998:	9b02      	ldr	r3, [sp, #8]
 800c99a:	e780      	b.n	800c89e <_dtoa_r+0x7de>
 800c99c:	2300      	movs	r3, #0
 800c99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9a0:	e782      	b.n	800c8a8 <_dtoa_r+0x7e8>
 800c9a2:	d099      	beq.n	800c8d8 <_dtoa_r+0x818>
 800c9a4:	9a08      	ldr	r2, [sp, #32]
 800c9a6:	331c      	adds	r3, #28
 800c9a8:	441a      	add	r2, r3
 800c9aa:	4498      	add	r8, r3
 800c9ac:	441e      	add	r6, r3
 800c9ae:	9208      	str	r2, [sp, #32]
 800c9b0:	e792      	b.n	800c8d8 <_dtoa_r+0x818>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	e7f6      	b.n	800c9a4 <_dtoa_r+0x8e4>
 800c9b6:	9b07      	ldr	r3, [sp, #28]
 800c9b8:	9704      	str	r7, [sp, #16]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	dc20      	bgt.n	800ca00 <_dtoa_r+0x940>
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	dd1e      	ble.n	800ca04 <_dtoa_r+0x944>
 800c9c6:	9b00      	ldr	r3, [sp, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f47f aec0 	bne.w	800c74e <_dtoa_r+0x68e>
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	2205      	movs	r2, #5
 800c9d2:	4658      	mov	r0, fp
 800c9d4:	f000 fa9a 	bl	800cf0c <__multadd>
 800c9d8:	4601      	mov	r1, r0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4648      	mov	r0, r9
 800c9de:	f000 fcad 	bl	800d33c <__mcmp>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	f77f aeb3 	ble.w	800c74e <_dtoa_r+0x68e>
 800c9e8:	4656      	mov	r6, sl
 800c9ea:	2331      	movs	r3, #49	@ 0x31
 800c9ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c9f0:	9b04      	ldr	r3, [sp, #16]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	e6ae      	b.n	800c756 <_dtoa_r+0x696>
 800c9f8:	9c07      	ldr	r4, [sp, #28]
 800c9fa:	9704      	str	r7, [sp, #16]
 800c9fc:	4625      	mov	r5, r4
 800c9fe:	e7f3      	b.n	800c9e8 <_dtoa_r+0x928>
 800ca00:	9b07      	ldr	r3, [sp, #28]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 8104 	beq.w	800cc14 <_dtoa_r+0xb54>
 800ca0c:	2e00      	cmp	r6, #0
 800ca0e:	dd05      	ble.n	800ca1c <_dtoa_r+0x95c>
 800ca10:	4629      	mov	r1, r5
 800ca12:	4632      	mov	r2, r6
 800ca14:	4658      	mov	r0, fp
 800ca16:	f000 fc25 	bl	800d264 <__lshift>
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d05a      	beq.n	800cad8 <_dtoa_r+0xa18>
 800ca22:	6869      	ldr	r1, [r5, #4]
 800ca24:	4658      	mov	r0, fp
 800ca26:	f000 fa0f 	bl	800ce48 <_Balloc>
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	b928      	cbnz	r0, 800ca3a <_dtoa_r+0x97a>
 800ca2e:	4b84      	ldr	r3, [pc, #528]	@ (800cc40 <_dtoa_r+0xb80>)
 800ca30:	4602      	mov	r2, r0
 800ca32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca36:	f7ff bb5a 	b.w	800c0ee <_dtoa_r+0x2e>
 800ca3a:	692a      	ldr	r2, [r5, #16]
 800ca3c:	3202      	adds	r2, #2
 800ca3e:	0092      	lsls	r2, r2, #2
 800ca40:	f105 010c 	add.w	r1, r5, #12
 800ca44:	300c      	adds	r0, #12
 800ca46:	f7ff fa86 	bl	800bf56 <memcpy>
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4658      	mov	r0, fp
 800ca50:	f000 fc08 	bl	800d264 <__lshift>
 800ca54:	f10a 0301 	add.w	r3, sl, #1
 800ca58:	9307      	str	r3, [sp, #28]
 800ca5a:	9b00      	ldr	r3, [sp, #0]
 800ca5c:	4453      	add	r3, sl
 800ca5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	462f      	mov	r7, r5
 800ca68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	9b07      	ldr	r3, [sp, #28]
 800ca6e:	4621      	mov	r1, r4
 800ca70:	3b01      	subs	r3, #1
 800ca72:	4648      	mov	r0, r9
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	f7ff fa9b 	bl	800bfb0 <quorem>
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	9002      	str	r0, [sp, #8]
 800ca7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca82:	4648      	mov	r0, r9
 800ca84:	f000 fc5a 	bl	800d33c <__mcmp>
 800ca88:	462a      	mov	r2, r5
 800ca8a:	9008      	str	r0, [sp, #32]
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4658      	mov	r0, fp
 800ca90:	f000 fc70 	bl	800d374 <__mdiff>
 800ca94:	68c2      	ldr	r2, [r0, #12]
 800ca96:	4606      	mov	r6, r0
 800ca98:	bb02      	cbnz	r2, 800cadc <_dtoa_r+0xa1c>
 800ca9a:	4601      	mov	r1, r0
 800ca9c:	4648      	mov	r0, r9
 800ca9e:	f000 fc4d 	bl	800d33c <__mcmp>
 800caa2:	4602      	mov	r2, r0
 800caa4:	4631      	mov	r1, r6
 800caa6:	4658      	mov	r0, fp
 800caa8:	920e      	str	r2, [sp, #56]	@ 0x38
 800caaa:	f000 fa0d 	bl	800cec8 <_Bfree>
 800caae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cab2:	9e07      	ldr	r6, [sp, #28]
 800cab4:	ea43 0102 	orr.w	r1, r3, r2
 800cab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caba:	4319      	orrs	r1, r3
 800cabc:	d110      	bne.n	800cae0 <_dtoa_r+0xa20>
 800cabe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cac2:	d029      	beq.n	800cb18 <_dtoa_r+0xa58>
 800cac4:	9b08      	ldr	r3, [sp, #32]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	dd02      	ble.n	800cad0 <_dtoa_r+0xa10>
 800caca:	9b02      	ldr	r3, [sp, #8]
 800cacc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cad0:	9b00      	ldr	r3, [sp, #0]
 800cad2:	f883 8000 	strb.w	r8, [r3]
 800cad6:	e63f      	b.n	800c758 <_dtoa_r+0x698>
 800cad8:	4628      	mov	r0, r5
 800cada:	e7bb      	b.n	800ca54 <_dtoa_r+0x994>
 800cadc:	2201      	movs	r2, #1
 800cade:	e7e1      	b.n	800caa4 <_dtoa_r+0x9e4>
 800cae0:	9b08      	ldr	r3, [sp, #32]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	db04      	blt.n	800caf0 <_dtoa_r+0xa30>
 800cae6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cae8:	430b      	orrs	r3, r1
 800caea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800caec:	430b      	orrs	r3, r1
 800caee:	d120      	bne.n	800cb32 <_dtoa_r+0xa72>
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	dded      	ble.n	800cad0 <_dtoa_r+0xa10>
 800caf4:	4649      	mov	r1, r9
 800caf6:	2201      	movs	r2, #1
 800caf8:	4658      	mov	r0, fp
 800cafa:	f000 fbb3 	bl	800d264 <__lshift>
 800cafe:	4621      	mov	r1, r4
 800cb00:	4681      	mov	r9, r0
 800cb02:	f000 fc1b 	bl	800d33c <__mcmp>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	dc03      	bgt.n	800cb12 <_dtoa_r+0xa52>
 800cb0a:	d1e1      	bne.n	800cad0 <_dtoa_r+0xa10>
 800cb0c:	f018 0f01 	tst.w	r8, #1
 800cb10:	d0de      	beq.n	800cad0 <_dtoa_r+0xa10>
 800cb12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb16:	d1d8      	bne.n	800caca <_dtoa_r+0xa0a>
 800cb18:	9a00      	ldr	r2, [sp, #0]
 800cb1a:	2339      	movs	r3, #57	@ 0x39
 800cb1c:	7013      	strb	r3, [r2, #0]
 800cb1e:	4633      	mov	r3, r6
 800cb20:	461e      	mov	r6, r3
 800cb22:	3b01      	subs	r3, #1
 800cb24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb28:	2a39      	cmp	r2, #57	@ 0x39
 800cb2a:	d052      	beq.n	800cbd2 <_dtoa_r+0xb12>
 800cb2c:	3201      	adds	r2, #1
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	e612      	b.n	800c758 <_dtoa_r+0x698>
 800cb32:	2a00      	cmp	r2, #0
 800cb34:	dd07      	ble.n	800cb46 <_dtoa_r+0xa86>
 800cb36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb3a:	d0ed      	beq.n	800cb18 <_dtoa_r+0xa58>
 800cb3c:	9a00      	ldr	r2, [sp, #0]
 800cb3e:	f108 0301 	add.w	r3, r8, #1
 800cb42:	7013      	strb	r3, [r2, #0]
 800cb44:	e608      	b.n	800c758 <_dtoa_r+0x698>
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	9a07      	ldr	r2, [sp, #28]
 800cb4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d028      	beq.n	800cba6 <_dtoa_r+0xae6>
 800cb54:	4649      	mov	r1, r9
 800cb56:	2300      	movs	r3, #0
 800cb58:	220a      	movs	r2, #10
 800cb5a:	4658      	mov	r0, fp
 800cb5c:	f000 f9d6 	bl	800cf0c <__multadd>
 800cb60:	42af      	cmp	r7, r5
 800cb62:	4681      	mov	r9, r0
 800cb64:	f04f 0300 	mov.w	r3, #0
 800cb68:	f04f 020a 	mov.w	r2, #10
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4658      	mov	r0, fp
 800cb70:	d107      	bne.n	800cb82 <_dtoa_r+0xac2>
 800cb72:	f000 f9cb 	bl	800cf0c <__multadd>
 800cb76:	4607      	mov	r7, r0
 800cb78:	4605      	mov	r5, r0
 800cb7a:	9b07      	ldr	r3, [sp, #28]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	9307      	str	r3, [sp, #28]
 800cb80:	e774      	b.n	800ca6c <_dtoa_r+0x9ac>
 800cb82:	f000 f9c3 	bl	800cf0c <__multadd>
 800cb86:	4629      	mov	r1, r5
 800cb88:	4607      	mov	r7, r0
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	220a      	movs	r2, #10
 800cb8e:	4658      	mov	r0, fp
 800cb90:	f000 f9bc 	bl	800cf0c <__multadd>
 800cb94:	4605      	mov	r5, r0
 800cb96:	e7f0      	b.n	800cb7a <_dtoa_r+0xaba>
 800cb98:	9b00      	ldr	r3, [sp, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	bfcc      	ite	gt
 800cb9e:	461e      	movgt	r6, r3
 800cba0:	2601      	movle	r6, #1
 800cba2:	4456      	add	r6, sl
 800cba4:	2700      	movs	r7, #0
 800cba6:	4649      	mov	r1, r9
 800cba8:	2201      	movs	r2, #1
 800cbaa:	4658      	mov	r0, fp
 800cbac:	f000 fb5a 	bl	800d264 <__lshift>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	4681      	mov	r9, r0
 800cbb4:	f000 fbc2 	bl	800d33c <__mcmp>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	dcb0      	bgt.n	800cb1e <_dtoa_r+0xa5e>
 800cbbc:	d102      	bne.n	800cbc4 <_dtoa_r+0xb04>
 800cbbe:	f018 0f01 	tst.w	r8, #1
 800cbc2:	d1ac      	bne.n	800cb1e <_dtoa_r+0xa5e>
 800cbc4:	4633      	mov	r3, r6
 800cbc6:	461e      	mov	r6, r3
 800cbc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbcc:	2a30      	cmp	r2, #48	@ 0x30
 800cbce:	d0fa      	beq.n	800cbc6 <_dtoa_r+0xb06>
 800cbd0:	e5c2      	b.n	800c758 <_dtoa_r+0x698>
 800cbd2:	459a      	cmp	sl, r3
 800cbd4:	d1a4      	bne.n	800cb20 <_dtoa_r+0xa60>
 800cbd6:	9b04      	ldr	r3, [sp, #16]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	2331      	movs	r3, #49	@ 0x31
 800cbde:	f88a 3000 	strb.w	r3, [sl]
 800cbe2:	e5b9      	b.n	800c758 <_dtoa_r+0x698>
 800cbe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc44 <_dtoa_r+0xb84>
 800cbea:	b11b      	cbz	r3, 800cbf4 <_dtoa_r+0xb34>
 800cbec:	f10a 0308 	add.w	r3, sl, #8
 800cbf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbf2:	6013      	str	r3, [r2, #0]
 800cbf4:	4650      	mov	r0, sl
 800cbf6:	b019      	add	sp, #100	@ 0x64
 800cbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	f77f ae37 	ble.w	800c872 <_dtoa_r+0x7b2>
 800cc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc06:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc08:	2001      	movs	r0, #1
 800cc0a:	e655      	b.n	800c8b8 <_dtoa_r+0x7f8>
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f77f aed6 	ble.w	800c9c0 <_dtoa_r+0x900>
 800cc14:	4656      	mov	r6, sl
 800cc16:	4621      	mov	r1, r4
 800cc18:	4648      	mov	r0, r9
 800cc1a:	f7ff f9c9 	bl	800bfb0 <quorem>
 800cc1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc22:	f806 8b01 	strb.w	r8, [r6], #1
 800cc26:	9b00      	ldr	r3, [sp, #0]
 800cc28:	eba6 020a 	sub.w	r2, r6, sl
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	ddb3      	ble.n	800cb98 <_dtoa_r+0xad8>
 800cc30:	4649      	mov	r1, r9
 800cc32:	2300      	movs	r3, #0
 800cc34:	220a      	movs	r2, #10
 800cc36:	4658      	mov	r0, fp
 800cc38:	f000 f968 	bl	800cf0c <__multadd>
 800cc3c:	4681      	mov	r9, r0
 800cc3e:	e7ea      	b.n	800cc16 <_dtoa_r+0xb56>
 800cc40:	0800e3c8 	.word	0x0800e3c8
 800cc44:	0800e363 	.word	0x0800e363

0800cc48 <_free_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	2900      	cmp	r1, #0
 800cc4e:	d041      	beq.n	800ccd4 <_free_r+0x8c>
 800cc50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc54:	1f0c      	subs	r4, r1, #4
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	bfb8      	it	lt
 800cc5a:	18e4      	addlt	r4, r4, r3
 800cc5c:	f000 f8e8 	bl	800ce30 <__malloc_lock>
 800cc60:	4a1d      	ldr	r2, [pc, #116]	@ (800ccd8 <_free_r+0x90>)
 800cc62:	6813      	ldr	r3, [r2, #0]
 800cc64:	b933      	cbnz	r3, 800cc74 <_free_r+0x2c>
 800cc66:	6063      	str	r3, [r4, #4]
 800cc68:	6014      	str	r4, [r2, #0]
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc70:	f000 b8e4 	b.w	800ce3c <__malloc_unlock>
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	d908      	bls.n	800cc8a <_free_r+0x42>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	1821      	adds	r1, r4, r0
 800cc7c:	428b      	cmp	r3, r1
 800cc7e:	bf01      	itttt	eq
 800cc80:	6819      	ldreq	r1, [r3, #0]
 800cc82:	685b      	ldreq	r3, [r3, #4]
 800cc84:	1809      	addeq	r1, r1, r0
 800cc86:	6021      	streq	r1, [r4, #0]
 800cc88:	e7ed      	b.n	800cc66 <_free_r+0x1e>
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	b10b      	cbz	r3, 800cc94 <_free_r+0x4c>
 800cc90:	42a3      	cmp	r3, r4
 800cc92:	d9fa      	bls.n	800cc8a <_free_r+0x42>
 800cc94:	6811      	ldr	r1, [r2, #0]
 800cc96:	1850      	adds	r0, r2, r1
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d10b      	bne.n	800ccb4 <_free_r+0x6c>
 800cc9c:	6820      	ldr	r0, [r4, #0]
 800cc9e:	4401      	add	r1, r0
 800cca0:	1850      	adds	r0, r2, r1
 800cca2:	4283      	cmp	r3, r0
 800cca4:	6011      	str	r1, [r2, #0]
 800cca6:	d1e0      	bne.n	800cc6a <_free_r+0x22>
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	6053      	str	r3, [r2, #4]
 800ccae:	4408      	add	r0, r1
 800ccb0:	6010      	str	r0, [r2, #0]
 800ccb2:	e7da      	b.n	800cc6a <_free_r+0x22>
 800ccb4:	d902      	bls.n	800ccbc <_free_r+0x74>
 800ccb6:	230c      	movs	r3, #12
 800ccb8:	602b      	str	r3, [r5, #0]
 800ccba:	e7d6      	b.n	800cc6a <_free_r+0x22>
 800ccbc:	6820      	ldr	r0, [r4, #0]
 800ccbe:	1821      	adds	r1, r4, r0
 800ccc0:	428b      	cmp	r3, r1
 800ccc2:	bf04      	itt	eq
 800ccc4:	6819      	ldreq	r1, [r3, #0]
 800ccc6:	685b      	ldreq	r3, [r3, #4]
 800ccc8:	6063      	str	r3, [r4, #4]
 800ccca:	bf04      	itt	eq
 800cccc:	1809      	addeq	r1, r1, r0
 800ccce:	6021      	streq	r1, [r4, #0]
 800ccd0:	6054      	str	r4, [r2, #4]
 800ccd2:	e7ca      	b.n	800cc6a <_free_r+0x22>
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000bbc 	.word	0x20000bbc

0800ccdc <malloc>:
 800ccdc:	4b02      	ldr	r3, [pc, #8]	@ (800cce8 <malloc+0xc>)
 800ccde:	4601      	mov	r1, r0
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	f000 b825 	b.w	800cd30 <_malloc_r>
 800cce6:	bf00      	nop
 800cce8:	20000030 	.word	0x20000030

0800ccec <sbrk_aligned>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	4e0f      	ldr	r6, [pc, #60]	@ (800cd2c <sbrk_aligned+0x40>)
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	6831      	ldr	r1, [r6, #0]
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	b911      	cbnz	r1, 800ccfe <sbrk_aligned+0x12>
 800ccf8:	f000 fe58 	bl	800d9ac <_sbrk_r>
 800ccfc:	6030      	str	r0, [r6, #0]
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 fe53 	bl	800d9ac <_sbrk_r>
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	d103      	bne.n	800cd12 <sbrk_aligned+0x26>
 800cd0a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd0e:	4620      	mov	r0, r4
 800cd10:	bd70      	pop	{r4, r5, r6, pc}
 800cd12:	1cc4      	adds	r4, r0, #3
 800cd14:	f024 0403 	bic.w	r4, r4, #3
 800cd18:	42a0      	cmp	r0, r4
 800cd1a:	d0f8      	beq.n	800cd0e <sbrk_aligned+0x22>
 800cd1c:	1a21      	subs	r1, r4, r0
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 fe44 	bl	800d9ac <_sbrk_r>
 800cd24:	3001      	adds	r0, #1
 800cd26:	d1f2      	bne.n	800cd0e <sbrk_aligned+0x22>
 800cd28:	e7ef      	b.n	800cd0a <sbrk_aligned+0x1e>
 800cd2a:	bf00      	nop
 800cd2c:	20000bb8 	.word	0x20000bb8

0800cd30 <_malloc_r>:
 800cd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd34:	1ccd      	adds	r5, r1, #3
 800cd36:	f025 0503 	bic.w	r5, r5, #3
 800cd3a:	3508      	adds	r5, #8
 800cd3c:	2d0c      	cmp	r5, #12
 800cd3e:	bf38      	it	cc
 800cd40:	250c      	movcc	r5, #12
 800cd42:	2d00      	cmp	r5, #0
 800cd44:	4606      	mov	r6, r0
 800cd46:	db01      	blt.n	800cd4c <_malloc_r+0x1c>
 800cd48:	42a9      	cmp	r1, r5
 800cd4a:	d904      	bls.n	800cd56 <_malloc_r+0x26>
 800cd4c:	230c      	movs	r3, #12
 800cd4e:	6033      	str	r3, [r6, #0]
 800cd50:	2000      	movs	r0, #0
 800cd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce2c <_malloc_r+0xfc>
 800cd5a:	f000 f869 	bl	800ce30 <__malloc_lock>
 800cd5e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd62:	461c      	mov	r4, r3
 800cd64:	bb44      	cbnz	r4, 800cdb8 <_malloc_r+0x88>
 800cd66:	4629      	mov	r1, r5
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7ff ffbf 	bl	800ccec <sbrk_aligned>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	4604      	mov	r4, r0
 800cd72:	d158      	bne.n	800ce26 <_malloc_r+0xf6>
 800cd74:	f8d8 4000 	ldr.w	r4, [r8]
 800cd78:	4627      	mov	r7, r4
 800cd7a:	2f00      	cmp	r7, #0
 800cd7c:	d143      	bne.n	800ce06 <_malloc_r+0xd6>
 800cd7e:	2c00      	cmp	r4, #0
 800cd80:	d04b      	beq.n	800ce1a <_malloc_r+0xea>
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	4639      	mov	r1, r7
 800cd86:	4630      	mov	r0, r6
 800cd88:	eb04 0903 	add.w	r9, r4, r3
 800cd8c:	f000 fe0e 	bl	800d9ac <_sbrk_r>
 800cd90:	4581      	cmp	r9, r0
 800cd92:	d142      	bne.n	800ce1a <_malloc_r+0xea>
 800cd94:	6821      	ldr	r1, [r4, #0]
 800cd96:	1a6d      	subs	r5, r5, r1
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ffa6 	bl	800ccec <sbrk_aligned>
 800cda0:	3001      	adds	r0, #1
 800cda2:	d03a      	beq.n	800ce1a <_malloc_r+0xea>
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	442b      	add	r3, r5
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	f8d8 3000 	ldr.w	r3, [r8]
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	bb62      	cbnz	r2, 800ce0c <_malloc_r+0xdc>
 800cdb2:	f8c8 7000 	str.w	r7, [r8]
 800cdb6:	e00f      	b.n	800cdd8 <_malloc_r+0xa8>
 800cdb8:	6822      	ldr	r2, [r4, #0]
 800cdba:	1b52      	subs	r2, r2, r5
 800cdbc:	d420      	bmi.n	800ce00 <_malloc_r+0xd0>
 800cdbe:	2a0b      	cmp	r2, #11
 800cdc0:	d917      	bls.n	800cdf2 <_malloc_r+0xc2>
 800cdc2:	1961      	adds	r1, r4, r5
 800cdc4:	42a3      	cmp	r3, r4
 800cdc6:	6025      	str	r5, [r4, #0]
 800cdc8:	bf18      	it	ne
 800cdca:	6059      	strne	r1, [r3, #4]
 800cdcc:	6863      	ldr	r3, [r4, #4]
 800cdce:	bf08      	it	eq
 800cdd0:	f8c8 1000 	streq.w	r1, [r8]
 800cdd4:	5162      	str	r2, [r4, r5]
 800cdd6:	604b      	str	r3, [r1, #4]
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f000 f82f 	bl	800ce3c <__malloc_unlock>
 800cdde:	f104 000b 	add.w	r0, r4, #11
 800cde2:	1d23      	adds	r3, r4, #4
 800cde4:	f020 0007 	bic.w	r0, r0, #7
 800cde8:	1ac2      	subs	r2, r0, r3
 800cdea:	bf1c      	itt	ne
 800cdec:	1a1b      	subne	r3, r3, r0
 800cdee:	50a3      	strne	r3, [r4, r2]
 800cdf0:	e7af      	b.n	800cd52 <_malloc_r+0x22>
 800cdf2:	6862      	ldr	r2, [r4, #4]
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	bf0c      	ite	eq
 800cdf8:	f8c8 2000 	streq.w	r2, [r8]
 800cdfc:	605a      	strne	r2, [r3, #4]
 800cdfe:	e7eb      	b.n	800cdd8 <_malloc_r+0xa8>
 800ce00:	4623      	mov	r3, r4
 800ce02:	6864      	ldr	r4, [r4, #4]
 800ce04:	e7ae      	b.n	800cd64 <_malloc_r+0x34>
 800ce06:	463c      	mov	r4, r7
 800ce08:	687f      	ldr	r7, [r7, #4]
 800ce0a:	e7b6      	b.n	800cd7a <_malloc_r+0x4a>
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	42a3      	cmp	r3, r4
 800ce12:	d1fb      	bne.n	800ce0c <_malloc_r+0xdc>
 800ce14:	2300      	movs	r3, #0
 800ce16:	6053      	str	r3, [r2, #4]
 800ce18:	e7de      	b.n	800cdd8 <_malloc_r+0xa8>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	6033      	str	r3, [r6, #0]
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f000 f80c 	bl	800ce3c <__malloc_unlock>
 800ce24:	e794      	b.n	800cd50 <_malloc_r+0x20>
 800ce26:	6005      	str	r5, [r0, #0]
 800ce28:	e7d6      	b.n	800cdd8 <_malloc_r+0xa8>
 800ce2a:	bf00      	nop
 800ce2c:	20000bbc 	.word	0x20000bbc

0800ce30 <__malloc_lock>:
 800ce30:	4801      	ldr	r0, [pc, #4]	@ (800ce38 <__malloc_lock+0x8>)
 800ce32:	f7ff b88e 	b.w	800bf52 <__retarget_lock_acquire_recursive>
 800ce36:	bf00      	nop
 800ce38:	20000bb4 	.word	0x20000bb4

0800ce3c <__malloc_unlock>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	@ (800ce44 <__malloc_unlock+0x8>)
 800ce3e:	f7ff b889 	b.w	800bf54 <__retarget_lock_release_recursive>
 800ce42:	bf00      	nop
 800ce44:	20000bb4 	.word	0x20000bb4

0800ce48 <_Balloc>:
 800ce48:	b570      	push	{r4, r5, r6, lr}
 800ce4a:	69c6      	ldr	r6, [r0, #28]
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	460d      	mov	r5, r1
 800ce50:	b976      	cbnz	r6, 800ce70 <_Balloc+0x28>
 800ce52:	2010      	movs	r0, #16
 800ce54:	f7ff ff42 	bl	800ccdc <malloc>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	61e0      	str	r0, [r4, #28]
 800ce5c:	b920      	cbnz	r0, 800ce68 <_Balloc+0x20>
 800ce5e:	4b18      	ldr	r3, [pc, #96]	@ (800cec0 <_Balloc+0x78>)
 800ce60:	4818      	ldr	r0, [pc, #96]	@ (800cec4 <_Balloc+0x7c>)
 800ce62:	216b      	movs	r1, #107	@ 0x6b
 800ce64:	f7ff f886 	bl	800bf74 <__assert_func>
 800ce68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce6c:	6006      	str	r6, [r0, #0]
 800ce6e:	60c6      	str	r6, [r0, #12]
 800ce70:	69e6      	ldr	r6, [r4, #28]
 800ce72:	68f3      	ldr	r3, [r6, #12]
 800ce74:	b183      	cbz	r3, 800ce98 <_Balloc+0x50>
 800ce76:	69e3      	ldr	r3, [r4, #28]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce7e:	b9b8      	cbnz	r0, 800ceb0 <_Balloc+0x68>
 800ce80:	2101      	movs	r1, #1
 800ce82:	fa01 f605 	lsl.w	r6, r1, r5
 800ce86:	1d72      	adds	r2, r6, #5
 800ce88:	0092      	lsls	r2, r2, #2
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fda5 	bl	800d9da <_calloc_r>
 800ce90:	b160      	cbz	r0, 800ceac <_Balloc+0x64>
 800ce92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce96:	e00e      	b.n	800ceb6 <_Balloc+0x6e>
 800ce98:	2221      	movs	r2, #33	@ 0x21
 800ce9a:	2104      	movs	r1, #4
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f000 fd9c 	bl	800d9da <_calloc_r>
 800cea2:	69e3      	ldr	r3, [r4, #28]
 800cea4:	60f0      	str	r0, [r6, #12]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1e4      	bne.n	800ce76 <_Balloc+0x2e>
 800ceac:	2000      	movs	r0, #0
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	6802      	ldr	r2, [r0, #0]
 800ceb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cebc:	e7f7      	b.n	800ceae <_Balloc+0x66>
 800cebe:	bf00      	nop
 800cec0:	0800e284 	.word	0x0800e284
 800cec4:	0800e3d9 	.word	0x0800e3d9

0800cec8 <_Bfree>:
 800cec8:	b570      	push	{r4, r5, r6, lr}
 800ceca:	69c6      	ldr	r6, [r0, #28]
 800cecc:	4605      	mov	r5, r0
 800cece:	460c      	mov	r4, r1
 800ced0:	b976      	cbnz	r6, 800cef0 <_Bfree+0x28>
 800ced2:	2010      	movs	r0, #16
 800ced4:	f7ff ff02 	bl	800ccdc <malloc>
 800ced8:	4602      	mov	r2, r0
 800ceda:	61e8      	str	r0, [r5, #28]
 800cedc:	b920      	cbnz	r0, 800cee8 <_Bfree+0x20>
 800cede:	4b09      	ldr	r3, [pc, #36]	@ (800cf04 <_Bfree+0x3c>)
 800cee0:	4809      	ldr	r0, [pc, #36]	@ (800cf08 <_Bfree+0x40>)
 800cee2:	218f      	movs	r1, #143	@ 0x8f
 800cee4:	f7ff f846 	bl	800bf74 <__assert_func>
 800cee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ceec:	6006      	str	r6, [r0, #0]
 800ceee:	60c6      	str	r6, [r0, #12]
 800cef0:	b13c      	cbz	r4, 800cf02 <_Bfree+0x3a>
 800cef2:	69eb      	ldr	r3, [r5, #28]
 800cef4:	6862      	ldr	r2, [r4, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cefc:	6021      	str	r1, [r4, #0]
 800cefe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	0800e284 	.word	0x0800e284
 800cf08:	0800e3d9 	.word	0x0800e3d9

0800cf0c <__multadd>:
 800cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf10:	690d      	ldr	r5, [r1, #16]
 800cf12:	4607      	mov	r7, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	461e      	mov	r6, r3
 800cf18:	f101 0c14 	add.w	ip, r1, #20
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf22:	b299      	uxth	r1, r3
 800cf24:	fb02 6101 	mla	r1, r2, r1, r6
 800cf28:	0c1e      	lsrs	r6, r3, #16
 800cf2a:	0c0b      	lsrs	r3, r1, #16
 800cf2c:	fb02 3306 	mla	r3, r2, r6, r3
 800cf30:	b289      	uxth	r1, r1
 800cf32:	3001      	adds	r0, #1
 800cf34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf38:	4285      	cmp	r5, r0
 800cf3a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf42:	dcec      	bgt.n	800cf1e <__multadd+0x12>
 800cf44:	b30e      	cbz	r6, 800cf8a <__multadd+0x7e>
 800cf46:	68a3      	ldr	r3, [r4, #8]
 800cf48:	42ab      	cmp	r3, r5
 800cf4a:	dc19      	bgt.n	800cf80 <__multadd+0x74>
 800cf4c:	6861      	ldr	r1, [r4, #4]
 800cf4e:	4638      	mov	r0, r7
 800cf50:	3101      	adds	r1, #1
 800cf52:	f7ff ff79 	bl	800ce48 <_Balloc>
 800cf56:	4680      	mov	r8, r0
 800cf58:	b928      	cbnz	r0, 800cf66 <__multadd+0x5a>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf90 <__multadd+0x84>)
 800cf5e:	480d      	ldr	r0, [pc, #52]	@ (800cf94 <__multadd+0x88>)
 800cf60:	21ba      	movs	r1, #186	@ 0xba
 800cf62:	f7ff f807 	bl	800bf74 <__assert_func>
 800cf66:	6922      	ldr	r2, [r4, #16]
 800cf68:	3202      	adds	r2, #2
 800cf6a:	f104 010c 	add.w	r1, r4, #12
 800cf6e:	0092      	lsls	r2, r2, #2
 800cf70:	300c      	adds	r0, #12
 800cf72:	f7fe fff0 	bl	800bf56 <memcpy>
 800cf76:	4621      	mov	r1, r4
 800cf78:	4638      	mov	r0, r7
 800cf7a:	f7ff ffa5 	bl	800cec8 <_Bfree>
 800cf7e:	4644      	mov	r4, r8
 800cf80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf84:	3501      	adds	r5, #1
 800cf86:	615e      	str	r6, [r3, #20]
 800cf88:	6125      	str	r5, [r4, #16]
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf90:	0800e3c8 	.word	0x0800e3c8
 800cf94:	0800e3d9 	.word	0x0800e3d9

0800cf98 <__hi0bits>:
 800cf98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	bf36      	itet	cc
 800cfa0:	0403      	lslcc	r3, r0, #16
 800cfa2:	2000      	movcs	r0, #0
 800cfa4:	2010      	movcc	r0, #16
 800cfa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cfaa:	bf3c      	itt	cc
 800cfac:	021b      	lslcc	r3, r3, #8
 800cfae:	3008      	addcc	r0, #8
 800cfb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfb4:	bf3c      	itt	cc
 800cfb6:	011b      	lslcc	r3, r3, #4
 800cfb8:	3004      	addcc	r0, #4
 800cfba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfbe:	bf3c      	itt	cc
 800cfc0:	009b      	lslcc	r3, r3, #2
 800cfc2:	3002      	addcc	r0, #2
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	db05      	blt.n	800cfd4 <__hi0bits+0x3c>
 800cfc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cfcc:	f100 0001 	add.w	r0, r0, #1
 800cfd0:	bf08      	it	eq
 800cfd2:	2020      	moveq	r0, #32
 800cfd4:	4770      	bx	lr

0800cfd6 <__lo0bits>:
 800cfd6:	6803      	ldr	r3, [r0, #0]
 800cfd8:	4602      	mov	r2, r0
 800cfda:	f013 0007 	ands.w	r0, r3, #7
 800cfde:	d00b      	beq.n	800cff8 <__lo0bits+0x22>
 800cfe0:	07d9      	lsls	r1, r3, #31
 800cfe2:	d421      	bmi.n	800d028 <__lo0bits+0x52>
 800cfe4:	0798      	lsls	r0, r3, #30
 800cfe6:	bf49      	itett	mi
 800cfe8:	085b      	lsrmi	r3, r3, #1
 800cfea:	089b      	lsrpl	r3, r3, #2
 800cfec:	2001      	movmi	r0, #1
 800cfee:	6013      	strmi	r3, [r2, #0]
 800cff0:	bf5c      	itt	pl
 800cff2:	6013      	strpl	r3, [r2, #0]
 800cff4:	2002      	movpl	r0, #2
 800cff6:	4770      	bx	lr
 800cff8:	b299      	uxth	r1, r3
 800cffa:	b909      	cbnz	r1, 800d000 <__lo0bits+0x2a>
 800cffc:	0c1b      	lsrs	r3, r3, #16
 800cffe:	2010      	movs	r0, #16
 800d000:	b2d9      	uxtb	r1, r3
 800d002:	b909      	cbnz	r1, 800d008 <__lo0bits+0x32>
 800d004:	3008      	adds	r0, #8
 800d006:	0a1b      	lsrs	r3, r3, #8
 800d008:	0719      	lsls	r1, r3, #28
 800d00a:	bf04      	itt	eq
 800d00c:	091b      	lsreq	r3, r3, #4
 800d00e:	3004      	addeq	r0, #4
 800d010:	0799      	lsls	r1, r3, #30
 800d012:	bf04      	itt	eq
 800d014:	089b      	lsreq	r3, r3, #2
 800d016:	3002      	addeq	r0, #2
 800d018:	07d9      	lsls	r1, r3, #31
 800d01a:	d403      	bmi.n	800d024 <__lo0bits+0x4e>
 800d01c:	085b      	lsrs	r3, r3, #1
 800d01e:	f100 0001 	add.w	r0, r0, #1
 800d022:	d003      	beq.n	800d02c <__lo0bits+0x56>
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	4770      	bx	lr
 800d028:	2000      	movs	r0, #0
 800d02a:	4770      	bx	lr
 800d02c:	2020      	movs	r0, #32
 800d02e:	4770      	bx	lr

0800d030 <__i2b>:
 800d030:	b510      	push	{r4, lr}
 800d032:	460c      	mov	r4, r1
 800d034:	2101      	movs	r1, #1
 800d036:	f7ff ff07 	bl	800ce48 <_Balloc>
 800d03a:	4602      	mov	r2, r0
 800d03c:	b928      	cbnz	r0, 800d04a <__i2b+0x1a>
 800d03e:	4b05      	ldr	r3, [pc, #20]	@ (800d054 <__i2b+0x24>)
 800d040:	4805      	ldr	r0, [pc, #20]	@ (800d058 <__i2b+0x28>)
 800d042:	f240 1145 	movw	r1, #325	@ 0x145
 800d046:	f7fe ff95 	bl	800bf74 <__assert_func>
 800d04a:	2301      	movs	r3, #1
 800d04c:	6144      	str	r4, [r0, #20]
 800d04e:	6103      	str	r3, [r0, #16]
 800d050:	bd10      	pop	{r4, pc}
 800d052:	bf00      	nop
 800d054:	0800e3c8 	.word	0x0800e3c8
 800d058:	0800e3d9 	.word	0x0800e3d9

0800d05c <__multiply>:
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	4614      	mov	r4, r2
 800d062:	690a      	ldr	r2, [r1, #16]
 800d064:	6923      	ldr	r3, [r4, #16]
 800d066:	429a      	cmp	r2, r3
 800d068:	bfa8      	it	ge
 800d06a:	4623      	movge	r3, r4
 800d06c:	460f      	mov	r7, r1
 800d06e:	bfa4      	itt	ge
 800d070:	460c      	movge	r4, r1
 800d072:	461f      	movge	r7, r3
 800d074:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d078:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d07c:	68a3      	ldr	r3, [r4, #8]
 800d07e:	6861      	ldr	r1, [r4, #4]
 800d080:	eb0a 0609 	add.w	r6, sl, r9
 800d084:	42b3      	cmp	r3, r6
 800d086:	b085      	sub	sp, #20
 800d088:	bfb8      	it	lt
 800d08a:	3101      	addlt	r1, #1
 800d08c:	f7ff fedc 	bl	800ce48 <_Balloc>
 800d090:	b930      	cbnz	r0, 800d0a0 <__multiply+0x44>
 800d092:	4602      	mov	r2, r0
 800d094:	4b44      	ldr	r3, [pc, #272]	@ (800d1a8 <__multiply+0x14c>)
 800d096:	4845      	ldr	r0, [pc, #276]	@ (800d1ac <__multiply+0x150>)
 800d098:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d09c:	f7fe ff6a 	bl	800bf74 <__assert_func>
 800d0a0:	f100 0514 	add.w	r5, r0, #20
 800d0a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0a8:	462b      	mov	r3, r5
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4543      	cmp	r3, r8
 800d0ae:	d321      	bcc.n	800d0f4 <__multiply+0x98>
 800d0b0:	f107 0114 	add.w	r1, r7, #20
 800d0b4:	f104 0214 	add.w	r2, r4, #20
 800d0b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d0bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d0c0:	9302      	str	r3, [sp, #8]
 800d0c2:	1b13      	subs	r3, r2, r4
 800d0c4:	3b15      	subs	r3, #21
 800d0c6:	f023 0303 	bic.w	r3, r3, #3
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	f104 0715 	add.w	r7, r4, #21
 800d0d0:	42ba      	cmp	r2, r7
 800d0d2:	bf38      	it	cc
 800d0d4:	2304      	movcc	r3, #4
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	9b02      	ldr	r3, [sp, #8]
 800d0da:	9103      	str	r1, [sp, #12]
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	d80c      	bhi.n	800d0fa <__multiply+0x9e>
 800d0e0:	2e00      	cmp	r6, #0
 800d0e2:	dd03      	ble.n	800d0ec <__multiply+0x90>
 800d0e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d05b      	beq.n	800d1a4 <__multiply+0x148>
 800d0ec:	6106      	str	r6, [r0, #16]
 800d0ee:	b005      	add	sp, #20
 800d0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f4:	f843 2b04 	str.w	r2, [r3], #4
 800d0f8:	e7d8      	b.n	800d0ac <__multiply+0x50>
 800d0fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800d0fe:	f1ba 0f00 	cmp.w	sl, #0
 800d102:	d024      	beq.n	800d14e <__multiply+0xf2>
 800d104:	f104 0e14 	add.w	lr, r4, #20
 800d108:	46a9      	mov	r9, r5
 800d10a:	f04f 0c00 	mov.w	ip, #0
 800d10e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d112:	f8d9 3000 	ldr.w	r3, [r9]
 800d116:	fa1f fb87 	uxth.w	fp, r7
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d120:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d124:	f8d9 7000 	ldr.w	r7, [r9]
 800d128:	4463      	add	r3, ip
 800d12a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d12e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d132:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d136:	b29b      	uxth	r3, r3
 800d138:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d13c:	4572      	cmp	r2, lr
 800d13e:	f849 3b04 	str.w	r3, [r9], #4
 800d142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d146:	d8e2      	bhi.n	800d10e <__multiply+0xb2>
 800d148:	9b01      	ldr	r3, [sp, #4]
 800d14a:	f845 c003 	str.w	ip, [r5, r3]
 800d14e:	9b03      	ldr	r3, [sp, #12]
 800d150:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d154:	3104      	adds	r1, #4
 800d156:	f1b9 0f00 	cmp.w	r9, #0
 800d15a:	d021      	beq.n	800d1a0 <__multiply+0x144>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	f104 0c14 	add.w	ip, r4, #20
 800d162:	46ae      	mov	lr, r5
 800d164:	f04f 0a00 	mov.w	sl, #0
 800d168:	f8bc b000 	ldrh.w	fp, [ip]
 800d16c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d170:	fb09 770b 	mla	r7, r9, fp, r7
 800d174:	4457      	add	r7, sl
 800d176:	b29b      	uxth	r3, r3
 800d178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d17c:	f84e 3b04 	str.w	r3, [lr], #4
 800d180:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d188:	f8be 3000 	ldrh.w	r3, [lr]
 800d18c:	fb09 330a 	mla	r3, r9, sl, r3
 800d190:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d194:	4562      	cmp	r2, ip
 800d196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d19a:	d8e5      	bhi.n	800d168 <__multiply+0x10c>
 800d19c:	9f01      	ldr	r7, [sp, #4]
 800d19e:	51eb      	str	r3, [r5, r7]
 800d1a0:	3504      	adds	r5, #4
 800d1a2:	e799      	b.n	800d0d8 <__multiply+0x7c>
 800d1a4:	3e01      	subs	r6, #1
 800d1a6:	e79b      	b.n	800d0e0 <__multiply+0x84>
 800d1a8:	0800e3c8 	.word	0x0800e3c8
 800d1ac:	0800e3d9 	.word	0x0800e3d9

0800d1b0 <__pow5mult>:
 800d1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b4:	4615      	mov	r5, r2
 800d1b6:	f012 0203 	ands.w	r2, r2, #3
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	460e      	mov	r6, r1
 800d1be:	d007      	beq.n	800d1d0 <__pow5mult+0x20>
 800d1c0:	4c25      	ldr	r4, [pc, #148]	@ (800d258 <__pow5mult+0xa8>)
 800d1c2:	3a01      	subs	r2, #1
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1ca:	f7ff fe9f 	bl	800cf0c <__multadd>
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	10ad      	asrs	r5, r5, #2
 800d1d2:	d03d      	beq.n	800d250 <__pow5mult+0xa0>
 800d1d4:	69fc      	ldr	r4, [r7, #28]
 800d1d6:	b97c      	cbnz	r4, 800d1f8 <__pow5mult+0x48>
 800d1d8:	2010      	movs	r0, #16
 800d1da:	f7ff fd7f 	bl	800ccdc <malloc>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	61f8      	str	r0, [r7, #28]
 800d1e2:	b928      	cbnz	r0, 800d1f0 <__pow5mult+0x40>
 800d1e4:	4b1d      	ldr	r3, [pc, #116]	@ (800d25c <__pow5mult+0xac>)
 800d1e6:	481e      	ldr	r0, [pc, #120]	@ (800d260 <__pow5mult+0xb0>)
 800d1e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d1ec:	f7fe fec2 	bl	800bf74 <__assert_func>
 800d1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1f4:	6004      	str	r4, [r0, #0]
 800d1f6:	60c4      	str	r4, [r0, #12]
 800d1f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d1fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d200:	b94c      	cbnz	r4, 800d216 <__pow5mult+0x66>
 800d202:	f240 2171 	movw	r1, #625	@ 0x271
 800d206:	4638      	mov	r0, r7
 800d208:	f7ff ff12 	bl	800d030 <__i2b>
 800d20c:	2300      	movs	r3, #0
 800d20e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d212:	4604      	mov	r4, r0
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	f04f 0900 	mov.w	r9, #0
 800d21a:	07eb      	lsls	r3, r5, #31
 800d21c:	d50a      	bpl.n	800d234 <__pow5mult+0x84>
 800d21e:	4631      	mov	r1, r6
 800d220:	4622      	mov	r2, r4
 800d222:	4638      	mov	r0, r7
 800d224:	f7ff ff1a 	bl	800d05c <__multiply>
 800d228:	4631      	mov	r1, r6
 800d22a:	4680      	mov	r8, r0
 800d22c:	4638      	mov	r0, r7
 800d22e:	f7ff fe4b 	bl	800cec8 <_Bfree>
 800d232:	4646      	mov	r6, r8
 800d234:	106d      	asrs	r5, r5, #1
 800d236:	d00b      	beq.n	800d250 <__pow5mult+0xa0>
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	b938      	cbnz	r0, 800d24c <__pow5mult+0x9c>
 800d23c:	4622      	mov	r2, r4
 800d23e:	4621      	mov	r1, r4
 800d240:	4638      	mov	r0, r7
 800d242:	f7ff ff0b 	bl	800d05c <__multiply>
 800d246:	6020      	str	r0, [r4, #0]
 800d248:	f8c0 9000 	str.w	r9, [r0]
 800d24c:	4604      	mov	r4, r0
 800d24e:	e7e4      	b.n	800d21a <__pow5mult+0x6a>
 800d250:	4630      	mov	r0, r6
 800d252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d256:	bf00      	nop
 800d258:	0800e434 	.word	0x0800e434
 800d25c:	0800e284 	.word	0x0800e284
 800d260:	0800e3d9 	.word	0x0800e3d9

0800d264 <__lshift>:
 800d264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d268:	460c      	mov	r4, r1
 800d26a:	6849      	ldr	r1, [r1, #4]
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d272:	68a3      	ldr	r3, [r4, #8]
 800d274:	4607      	mov	r7, r0
 800d276:	4691      	mov	r9, r2
 800d278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d27c:	f108 0601 	add.w	r6, r8, #1
 800d280:	42b3      	cmp	r3, r6
 800d282:	db0b      	blt.n	800d29c <__lshift+0x38>
 800d284:	4638      	mov	r0, r7
 800d286:	f7ff fddf 	bl	800ce48 <_Balloc>
 800d28a:	4605      	mov	r5, r0
 800d28c:	b948      	cbnz	r0, 800d2a2 <__lshift+0x3e>
 800d28e:	4602      	mov	r2, r0
 800d290:	4b28      	ldr	r3, [pc, #160]	@ (800d334 <__lshift+0xd0>)
 800d292:	4829      	ldr	r0, [pc, #164]	@ (800d338 <__lshift+0xd4>)
 800d294:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d298:	f7fe fe6c 	bl	800bf74 <__assert_func>
 800d29c:	3101      	adds	r1, #1
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	e7ee      	b.n	800d280 <__lshift+0x1c>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f100 0114 	add.w	r1, r0, #20
 800d2a8:	f100 0210 	add.w	r2, r0, #16
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	4553      	cmp	r3, sl
 800d2b0:	db33      	blt.n	800d31a <__lshift+0xb6>
 800d2b2:	6920      	ldr	r0, [r4, #16]
 800d2b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2b8:	f104 0314 	add.w	r3, r4, #20
 800d2bc:	f019 091f 	ands.w	r9, r9, #31
 800d2c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2c8:	d02b      	beq.n	800d322 <__lshift+0xbe>
 800d2ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d2ce:	468a      	mov	sl, r1
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	6818      	ldr	r0, [r3, #0]
 800d2d4:	fa00 f009 	lsl.w	r0, r0, r9
 800d2d8:	4310      	orrs	r0, r2
 800d2da:	f84a 0b04 	str.w	r0, [sl], #4
 800d2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e2:	459c      	cmp	ip, r3
 800d2e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2e8:	d8f3      	bhi.n	800d2d2 <__lshift+0x6e>
 800d2ea:	ebac 0304 	sub.w	r3, ip, r4
 800d2ee:	3b15      	subs	r3, #21
 800d2f0:	f023 0303 	bic.w	r3, r3, #3
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	f104 0015 	add.w	r0, r4, #21
 800d2fa:	4584      	cmp	ip, r0
 800d2fc:	bf38      	it	cc
 800d2fe:	2304      	movcc	r3, #4
 800d300:	50ca      	str	r2, [r1, r3]
 800d302:	b10a      	cbz	r2, 800d308 <__lshift+0xa4>
 800d304:	f108 0602 	add.w	r6, r8, #2
 800d308:	3e01      	subs	r6, #1
 800d30a:	4638      	mov	r0, r7
 800d30c:	612e      	str	r6, [r5, #16]
 800d30e:	4621      	mov	r1, r4
 800d310:	f7ff fdda 	bl	800cec8 <_Bfree>
 800d314:	4628      	mov	r0, r5
 800d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d31e:	3301      	adds	r3, #1
 800d320:	e7c5      	b.n	800d2ae <__lshift+0x4a>
 800d322:	3904      	subs	r1, #4
 800d324:	f853 2b04 	ldr.w	r2, [r3], #4
 800d328:	f841 2f04 	str.w	r2, [r1, #4]!
 800d32c:	459c      	cmp	ip, r3
 800d32e:	d8f9      	bhi.n	800d324 <__lshift+0xc0>
 800d330:	e7ea      	b.n	800d308 <__lshift+0xa4>
 800d332:	bf00      	nop
 800d334:	0800e3c8 	.word	0x0800e3c8
 800d338:	0800e3d9 	.word	0x0800e3d9

0800d33c <__mcmp>:
 800d33c:	690a      	ldr	r2, [r1, #16]
 800d33e:	4603      	mov	r3, r0
 800d340:	6900      	ldr	r0, [r0, #16]
 800d342:	1a80      	subs	r0, r0, r2
 800d344:	b530      	push	{r4, r5, lr}
 800d346:	d10e      	bne.n	800d366 <__mcmp+0x2a>
 800d348:	3314      	adds	r3, #20
 800d34a:	3114      	adds	r1, #20
 800d34c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d350:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d354:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d358:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d35c:	4295      	cmp	r5, r2
 800d35e:	d003      	beq.n	800d368 <__mcmp+0x2c>
 800d360:	d205      	bcs.n	800d36e <__mcmp+0x32>
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
 800d366:	bd30      	pop	{r4, r5, pc}
 800d368:	42a3      	cmp	r3, r4
 800d36a:	d3f3      	bcc.n	800d354 <__mcmp+0x18>
 800d36c:	e7fb      	b.n	800d366 <__mcmp+0x2a>
 800d36e:	2001      	movs	r0, #1
 800d370:	e7f9      	b.n	800d366 <__mcmp+0x2a>
	...

0800d374 <__mdiff>:
 800d374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	4689      	mov	r9, r1
 800d37a:	4606      	mov	r6, r0
 800d37c:	4611      	mov	r1, r2
 800d37e:	4648      	mov	r0, r9
 800d380:	4614      	mov	r4, r2
 800d382:	f7ff ffdb 	bl	800d33c <__mcmp>
 800d386:	1e05      	subs	r5, r0, #0
 800d388:	d112      	bne.n	800d3b0 <__mdiff+0x3c>
 800d38a:	4629      	mov	r1, r5
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff fd5b 	bl	800ce48 <_Balloc>
 800d392:	4602      	mov	r2, r0
 800d394:	b928      	cbnz	r0, 800d3a2 <__mdiff+0x2e>
 800d396:	4b3f      	ldr	r3, [pc, #252]	@ (800d494 <__mdiff+0x120>)
 800d398:	f240 2137 	movw	r1, #567	@ 0x237
 800d39c:	483e      	ldr	r0, [pc, #248]	@ (800d498 <__mdiff+0x124>)
 800d39e:	f7fe fde9 	bl	800bf74 <__assert_func>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	b003      	add	sp, #12
 800d3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b0:	bfbc      	itt	lt
 800d3b2:	464b      	movlt	r3, r9
 800d3b4:	46a1      	movlt	r9, r4
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d3bc:	bfba      	itte	lt
 800d3be:	461c      	movlt	r4, r3
 800d3c0:	2501      	movlt	r5, #1
 800d3c2:	2500      	movge	r5, #0
 800d3c4:	f7ff fd40 	bl	800ce48 <_Balloc>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	b918      	cbnz	r0, 800d3d4 <__mdiff+0x60>
 800d3cc:	4b31      	ldr	r3, [pc, #196]	@ (800d494 <__mdiff+0x120>)
 800d3ce:	f240 2145 	movw	r1, #581	@ 0x245
 800d3d2:	e7e3      	b.n	800d39c <__mdiff+0x28>
 800d3d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d3d8:	6926      	ldr	r6, [r4, #16]
 800d3da:	60c5      	str	r5, [r0, #12]
 800d3dc:	f109 0310 	add.w	r3, r9, #16
 800d3e0:	f109 0514 	add.w	r5, r9, #20
 800d3e4:	f104 0e14 	add.w	lr, r4, #20
 800d3e8:	f100 0b14 	add.w	fp, r0, #20
 800d3ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d3f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	46d9      	mov	r9, fp
 800d3f8:	f04f 0c00 	mov.w	ip, #0
 800d3fc:	9b01      	ldr	r3, [sp, #4]
 800d3fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d402:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	fa1f f38a 	uxth.w	r3, sl
 800d40c:	4619      	mov	r1, r3
 800d40e:	b283      	uxth	r3, r0
 800d410:	1acb      	subs	r3, r1, r3
 800d412:	0c00      	lsrs	r0, r0, #16
 800d414:	4463      	add	r3, ip
 800d416:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d41a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d41e:	b29b      	uxth	r3, r3
 800d420:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d424:	4576      	cmp	r6, lr
 800d426:	f849 3b04 	str.w	r3, [r9], #4
 800d42a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d42e:	d8e5      	bhi.n	800d3fc <__mdiff+0x88>
 800d430:	1b33      	subs	r3, r6, r4
 800d432:	3b15      	subs	r3, #21
 800d434:	f023 0303 	bic.w	r3, r3, #3
 800d438:	3415      	adds	r4, #21
 800d43a:	3304      	adds	r3, #4
 800d43c:	42a6      	cmp	r6, r4
 800d43e:	bf38      	it	cc
 800d440:	2304      	movcc	r3, #4
 800d442:	441d      	add	r5, r3
 800d444:	445b      	add	r3, fp
 800d446:	461e      	mov	r6, r3
 800d448:	462c      	mov	r4, r5
 800d44a:	4544      	cmp	r4, r8
 800d44c:	d30e      	bcc.n	800d46c <__mdiff+0xf8>
 800d44e:	f108 0103 	add.w	r1, r8, #3
 800d452:	1b49      	subs	r1, r1, r5
 800d454:	f021 0103 	bic.w	r1, r1, #3
 800d458:	3d03      	subs	r5, #3
 800d45a:	45a8      	cmp	r8, r5
 800d45c:	bf38      	it	cc
 800d45e:	2100      	movcc	r1, #0
 800d460:	440b      	add	r3, r1
 800d462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d466:	b191      	cbz	r1, 800d48e <__mdiff+0x11a>
 800d468:	6117      	str	r7, [r2, #16]
 800d46a:	e79d      	b.n	800d3a8 <__mdiff+0x34>
 800d46c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d470:	46e6      	mov	lr, ip
 800d472:	0c08      	lsrs	r0, r1, #16
 800d474:	fa1c fc81 	uxtah	ip, ip, r1
 800d478:	4471      	add	r1, lr
 800d47a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d47e:	b289      	uxth	r1, r1
 800d480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d484:	f846 1b04 	str.w	r1, [r6], #4
 800d488:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d48c:	e7dd      	b.n	800d44a <__mdiff+0xd6>
 800d48e:	3f01      	subs	r7, #1
 800d490:	e7e7      	b.n	800d462 <__mdiff+0xee>
 800d492:	bf00      	nop
 800d494:	0800e3c8 	.word	0x0800e3c8
 800d498:	0800e3d9 	.word	0x0800e3d9

0800d49c <__d2b>:
 800d49c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	460f      	mov	r7, r1
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	ec59 8b10 	vmov	r8, r9, d0
 800d4a8:	4616      	mov	r6, r2
 800d4aa:	f7ff fccd 	bl	800ce48 <_Balloc>
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	b930      	cbnz	r0, 800d4c0 <__d2b+0x24>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4b23      	ldr	r3, [pc, #140]	@ (800d544 <__d2b+0xa8>)
 800d4b6:	4824      	ldr	r0, [pc, #144]	@ (800d548 <__d2b+0xac>)
 800d4b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d4bc:	f7fe fd5a 	bl	800bf74 <__assert_func>
 800d4c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d4c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4c8:	b10d      	cbz	r5, 800d4ce <__d2b+0x32>
 800d4ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4ce:	9301      	str	r3, [sp, #4]
 800d4d0:	f1b8 0300 	subs.w	r3, r8, #0
 800d4d4:	d023      	beq.n	800d51e <__d2b+0x82>
 800d4d6:	4668      	mov	r0, sp
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	f7ff fd7c 	bl	800cfd6 <__lo0bits>
 800d4de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4e2:	b1d0      	cbz	r0, 800d51a <__d2b+0x7e>
 800d4e4:	f1c0 0320 	rsb	r3, r0, #32
 800d4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ec:	430b      	orrs	r3, r1
 800d4ee:	40c2      	lsrs	r2, r0
 800d4f0:	6163      	str	r3, [r4, #20]
 800d4f2:	9201      	str	r2, [sp, #4]
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	61a3      	str	r3, [r4, #24]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	bf0c      	ite	eq
 800d4fc:	2201      	moveq	r2, #1
 800d4fe:	2202      	movne	r2, #2
 800d500:	6122      	str	r2, [r4, #16]
 800d502:	b1a5      	cbz	r5, 800d52e <__d2b+0x92>
 800d504:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d508:	4405      	add	r5, r0
 800d50a:	603d      	str	r5, [r7, #0]
 800d50c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d510:	6030      	str	r0, [r6, #0]
 800d512:	4620      	mov	r0, r4
 800d514:	b003      	add	sp, #12
 800d516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d51a:	6161      	str	r1, [r4, #20]
 800d51c:	e7ea      	b.n	800d4f4 <__d2b+0x58>
 800d51e:	a801      	add	r0, sp, #4
 800d520:	f7ff fd59 	bl	800cfd6 <__lo0bits>
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	6163      	str	r3, [r4, #20]
 800d528:	3020      	adds	r0, #32
 800d52a:	2201      	movs	r2, #1
 800d52c:	e7e8      	b.n	800d500 <__d2b+0x64>
 800d52e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d532:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d536:	6038      	str	r0, [r7, #0]
 800d538:	6918      	ldr	r0, [r3, #16]
 800d53a:	f7ff fd2d 	bl	800cf98 <__hi0bits>
 800d53e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d542:	e7e5      	b.n	800d510 <__d2b+0x74>
 800d544:	0800e3c8 	.word	0x0800e3c8
 800d548:	0800e3d9 	.word	0x0800e3d9

0800d54c <__ssputs_r>:
 800d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d550:	688e      	ldr	r6, [r1, #8]
 800d552:	461f      	mov	r7, r3
 800d554:	42be      	cmp	r6, r7
 800d556:	680b      	ldr	r3, [r1, #0]
 800d558:	4682      	mov	sl, r0
 800d55a:	460c      	mov	r4, r1
 800d55c:	4690      	mov	r8, r2
 800d55e:	d82d      	bhi.n	800d5bc <__ssputs_r+0x70>
 800d560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d568:	d026      	beq.n	800d5b8 <__ssputs_r+0x6c>
 800d56a:	6965      	ldr	r5, [r4, #20]
 800d56c:	6909      	ldr	r1, [r1, #16]
 800d56e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d572:	eba3 0901 	sub.w	r9, r3, r1
 800d576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d57a:	1c7b      	adds	r3, r7, #1
 800d57c:	444b      	add	r3, r9
 800d57e:	106d      	asrs	r5, r5, #1
 800d580:	429d      	cmp	r5, r3
 800d582:	bf38      	it	cc
 800d584:	461d      	movcc	r5, r3
 800d586:	0553      	lsls	r3, r2, #21
 800d588:	d527      	bpl.n	800d5da <__ssputs_r+0x8e>
 800d58a:	4629      	mov	r1, r5
 800d58c:	f7ff fbd0 	bl	800cd30 <_malloc_r>
 800d590:	4606      	mov	r6, r0
 800d592:	b360      	cbz	r0, 800d5ee <__ssputs_r+0xa2>
 800d594:	6921      	ldr	r1, [r4, #16]
 800d596:	464a      	mov	r2, r9
 800d598:	f7fe fcdd 	bl	800bf56 <memcpy>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5a6:	81a3      	strh	r3, [r4, #12]
 800d5a8:	6126      	str	r6, [r4, #16]
 800d5aa:	6165      	str	r5, [r4, #20]
 800d5ac:	444e      	add	r6, r9
 800d5ae:	eba5 0509 	sub.w	r5, r5, r9
 800d5b2:	6026      	str	r6, [r4, #0]
 800d5b4:	60a5      	str	r5, [r4, #8]
 800d5b6:	463e      	mov	r6, r7
 800d5b8:	42be      	cmp	r6, r7
 800d5ba:	d900      	bls.n	800d5be <__ssputs_r+0x72>
 800d5bc:	463e      	mov	r6, r7
 800d5be:	6820      	ldr	r0, [r4, #0]
 800d5c0:	4632      	mov	r2, r6
 800d5c2:	4641      	mov	r1, r8
 800d5c4:	f000 f9d8 	bl	800d978 <memmove>
 800d5c8:	68a3      	ldr	r3, [r4, #8]
 800d5ca:	1b9b      	subs	r3, r3, r6
 800d5cc:	60a3      	str	r3, [r4, #8]
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	4433      	add	r3, r6
 800d5d2:	6023      	str	r3, [r4, #0]
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5da:	462a      	mov	r2, r5
 800d5dc:	f000 fa23 	bl	800da26 <_realloc_r>
 800d5e0:	4606      	mov	r6, r0
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d1e0      	bne.n	800d5a8 <__ssputs_r+0x5c>
 800d5e6:	6921      	ldr	r1, [r4, #16]
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	f7ff fb2d 	bl	800cc48 <_free_r>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	f8ca 3000 	str.w	r3, [sl]
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d600:	e7e9      	b.n	800d5d6 <__ssputs_r+0x8a>
	...

0800d604 <_svfiprintf_r>:
 800d604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d608:	4698      	mov	r8, r3
 800d60a:	898b      	ldrh	r3, [r1, #12]
 800d60c:	061b      	lsls	r3, r3, #24
 800d60e:	b09d      	sub	sp, #116	@ 0x74
 800d610:	4607      	mov	r7, r0
 800d612:	460d      	mov	r5, r1
 800d614:	4614      	mov	r4, r2
 800d616:	d510      	bpl.n	800d63a <_svfiprintf_r+0x36>
 800d618:	690b      	ldr	r3, [r1, #16]
 800d61a:	b973      	cbnz	r3, 800d63a <_svfiprintf_r+0x36>
 800d61c:	2140      	movs	r1, #64	@ 0x40
 800d61e:	f7ff fb87 	bl	800cd30 <_malloc_r>
 800d622:	6028      	str	r0, [r5, #0]
 800d624:	6128      	str	r0, [r5, #16]
 800d626:	b930      	cbnz	r0, 800d636 <_svfiprintf_r+0x32>
 800d628:	230c      	movs	r3, #12
 800d62a:	603b      	str	r3, [r7, #0]
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295
 800d630:	b01d      	add	sp, #116	@ 0x74
 800d632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d636:	2340      	movs	r3, #64	@ 0x40
 800d638:	616b      	str	r3, [r5, #20]
 800d63a:	2300      	movs	r3, #0
 800d63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d63e:	2320      	movs	r3, #32
 800d640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d644:	f8cd 800c 	str.w	r8, [sp, #12]
 800d648:	2330      	movs	r3, #48	@ 0x30
 800d64a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7e8 <_svfiprintf_r+0x1e4>
 800d64e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d652:	f04f 0901 	mov.w	r9, #1
 800d656:	4623      	mov	r3, r4
 800d658:	469a      	mov	sl, r3
 800d65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d65e:	b10a      	cbz	r2, 800d664 <_svfiprintf_r+0x60>
 800d660:	2a25      	cmp	r2, #37	@ 0x25
 800d662:	d1f9      	bne.n	800d658 <_svfiprintf_r+0x54>
 800d664:	ebba 0b04 	subs.w	fp, sl, r4
 800d668:	d00b      	beq.n	800d682 <_svfiprintf_r+0x7e>
 800d66a:	465b      	mov	r3, fp
 800d66c:	4622      	mov	r2, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	4638      	mov	r0, r7
 800d672:	f7ff ff6b 	bl	800d54c <__ssputs_r>
 800d676:	3001      	adds	r0, #1
 800d678:	f000 80a7 	beq.w	800d7ca <_svfiprintf_r+0x1c6>
 800d67c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d67e:	445a      	add	r2, fp
 800d680:	9209      	str	r2, [sp, #36]	@ 0x24
 800d682:	f89a 3000 	ldrb.w	r3, [sl]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 809f 	beq.w	800d7ca <_svfiprintf_r+0x1c6>
 800d68c:	2300      	movs	r3, #0
 800d68e:	f04f 32ff 	mov.w	r2, #4294967295
 800d692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d696:	f10a 0a01 	add.w	sl, sl, #1
 800d69a:	9304      	str	r3, [sp, #16]
 800d69c:	9307      	str	r3, [sp, #28]
 800d69e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6a4:	4654      	mov	r4, sl
 800d6a6:	2205      	movs	r2, #5
 800d6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ac:	484e      	ldr	r0, [pc, #312]	@ (800d7e8 <_svfiprintf_r+0x1e4>)
 800d6ae:	f7f2 fd8f 	bl	80001d0 <memchr>
 800d6b2:	9a04      	ldr	r2, [sp, #16]
 800d6b4:	b9d8      	cbnz	r0, 800d6ee <_svfiprintf_r+0xea>
 800d6b6:	06d0      	lsls	r0, r2, #27
 800d6b8:	bf44      	itt	mi
 800d6ba:	2320      	movmi	r3, #32
 800d6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6c0:	0711      	lsls	r1, r2, #28
 800d6c2:	bf44      	itt	mi
 800d6c4:	232b      	movmi	r3, #43	@ 0x2b
 800d6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6d0:	d015      	beq.n	800d6fe <_svfiprintf_r+0xfa>
 800d6d2:	9a07      	ldr	r2, [sp, #28]
 800d6d4:	4654      	mov	r4, sl
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	f04f 0c0a 	mov.w	ip, #10
 800d6dc:	4621      	mov	r1, r4
 800d6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6e2:	3b30      	subs	r3, #48	@ 0x30
 800d6e4:	2b09      	cmp	r3, #9
 800d6e6:	d94b      	bls.n	800d780 <_svfiprintf_r+0x17c>
 800d6e8:	b1b0      	cbz	r0, 800d718 <_svfiprintf_r+0x114>
 800d6ea:	9207      	str	r2, [sp, #28]
 800d6ec:	e014      	b.n	800d718 <_svfiprintf_r+0x114>
 800d6ee:	eba0 0308 	sub.w	r3, r0, r8
 800d6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	9304      	str	r3, [sp, #16]
 800d6fa:	46a2      	mov	sl, r4
 800d6fc:	e7d2      	b.n	800d6a4 <_svfiprintf_r+0xa0>
 800d6fe:	9b03      	ldr	r3, [sp, #12]
 800d700:	1d19      	adds	r1, r3, #4
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	9103      	str	r1, [sp, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	bfbb      	ittet	lt
 800d70a:	425b      	neglt	r3, r3
 800d70c:	f042 0202 	orrlt.w	r2, r2, #2
 800d710:	9307      	strge	r3, [sp, #28]
 800d712:	9307      	strlt	r3, [sp, #28]
 800d714:	bfb8      	it	lt
 800d716:	9204      	strlt	r2, [sp, #16]
 800d718:	7823      	ldrb	r3, [r4, #0]
 800d71a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d71c:	d10a      	bne.n	800d734 <_svfiprintf_r+0x130>
 800d71e:	7863      	ldrb	r3, [r4, #1]
 800d720:	2b2a      	cmp	r3, #42	@ 0x2a
 800d722:	d132      	bne.n	800d78a <_svfiprintf_r+0x186>
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	1d1a      	adds	r2, r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	9203      	str	r2, [sp, #12]
 800d72c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d730:	3402      	adds	r4, #2
 800d732:	9305      	str	r3, [sp, #20]
 800d734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7f8 <_svfiprintf_r+0x1f4>
 800d738:	7821      	ldrb	r1, [r4, #0]
 800d73a:	2203      	movs	r2, #3
 800d73c:	4650      	mov	r0, sl
 800d73e:	f7f2 fd47 	bl	80001d0 <memchr>
 800d742:	b138      	cbz	r0, 800d754 <_svfiprintf_r+0x150>
 800d744:	9b04      	ldr	r3, [sp, #16]
 800d746:	eba0 000a 	sub.w	r0, r0, sl
 800d74a:	2240      	movs	r2, #64	@ 0x40
 800d74c:	4082      	lsls	r2, r0
 800d74e:	4313      	orrs	r3, r2
 800d750:	3401      	adds	r4, #1
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d758:	4824      	ldr	r0, [pc, #144]	@ (800d7ec <_svfiprintf_r+0x1e8>)
 800d75a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d75e:	2206      	movs	r2, #6
 800d760:	f7f2 fd36 	bl	80001d0 <memchr>
 800d764:	2800      	cmp	r0, #0
 800d766:	d036      	beq.n	800d7d6 <_svfiprintf_r+0x1d2>
 800d768:	4b21      	ldr	r3, [pc, #132]	@ (800d7f0 <_svfiprintf_r+0x1ec>)
 800d76a:	bb1b      	cbnz	r3, 800d7b4 <_svfiprintf_r+0x1b0>
 800d76c:	9b03      	ldr	r3, [sp, #12]
 800d76e:	3307      	adds	r3, #7
 800d770:	f023 0307 	bic.w	r3, r3, #7
 800d774:	3308      	adds	r3, #8
 800d776:	9303      	str	r3, [sp, #12]
 800d778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77a:	4433      	add	r3, r6
 800d77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d77e:	e76a      	b.n	800d656 <_svfiprintf_r+0x52>
 800d780:	fb0c 3202 	mla	r2, ip, r2, r3
 800d784:	460c      	mov	r4, r1
 800d786:	2001      	movs	r0, #1
 800d788:	e7a8      	b.n	800d6dc <_svfiprintf_r+0xd8>
 800d78a:	2300      	movs	r3, #0
 800d78c:	3401      	adds	r4, #1
 800d78e:	9305      	str	r3, [sp, #20]
 800d790:	4619      	mov	r1, r3
 800d792:	f04f 0c0a 	mov.w	ip, #10
 800d796:	4620      	mov	r0, r4
 800d798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d79c:	3a30      	subs	r2, #48	@ 0x30
 800d79e:	2a09      	cmp	r2, #9
 800d7a0:	d903      	bls.n	800d7aa <_svfiprintf_r+0x1a6>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0c6      	beq.n	800d734 <_svfiprintf_r+0x130>
 800d7a6:	9105      	str	r1, [sp, #20]
 800d7a8:	e7c4      	b.n	800d734 <_svfiprintf_r+0x130>
 800d7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e7f0      	b.n	800d796 <_svfiprintf_r+0x192>
 800d7b4:	ab03      	add	r3, sp, #12
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f4 <_svfiprintf_r+0x1f0>)
 800d7bc:	a904      	add	r1, sp, #16
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f7fd fe6c 	bl	800b49c <_printf_float>
 800d7c4:	1c42      	adds	r2, r0, #1
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	d1d6      	bne.n	800d778 <_svfiprintf_r+0x174>
 800d7ca:	89ab      	ldrh	r3, [r5, #12]
 800d7cc:	065b      	lsls	r3, r3, #25
 800d7ce:	f53f af2d 	bmi.w	800d62c <_svfiprintf_r+0x28>
 800d7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7d4:	e72c      	b.n	800d630 <_svfiprintf_r+0x2c>
 800d7d6:	ab03      	add	r3, sp, #12
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	462a      	mov	r2, r5
 800d7dc:	4b05      	ldr	r3, [pc, #20]	@ (800d7f4 <_svfiprintf_r+0x1f0>)
 800d7de:	a904      	add	r1, sp, #16
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	f7fe f8f3 	bl	800b9cc <_printf_i>
 800d7e6:	e7ed      	b.n	800d7c4 <_svfiprintf_r+0x1c0>
 800d7e8:	0800e530 	.word	0x0800e530
 800d7ec:	0800e53a 	.word	0x0800e53a
 800d7f0:	0800b49d 	.word	0x0800b49d
 800d7f4:	0800d54d 	.word	0x0800d54d
 800d7f8:	0800e536 	.word	0x0800e536

0800d7fc <__sflush_r>:
 800d7fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d804:	0716      	lsls	r6, r2, #28
 800d806:	4605      	mov	r5, r0
 800d808:	460c      	mov	r4, r1
 800d80a:	d454      	bmi.n	800d8b6 <__sflush_r+0xba>
 800d80c:	684b      	ldr	r3, [r1, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	dc02      	bgt.n	800d818 <__sflush_r+0x1c>
 800d812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d814:	2b00      	cmp	r3, #0
 800d816:	dd48      	ble.n	800d8aa <__sflush_r+0xae>
 800d818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d045      	beq.n	800d8aa <__sflush_r+0xae>
 800d81e:	2300      	movs	r3, #0
 800d820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d824:	682f      	ldr	r7, [r5, #0]
 800d826:	6a21      	ldr	r1, [r4, #32]
 800d828:	602b      	str	r3, [r5, #0]
 800d82a:	d030      	beq.n	800d88e <__sflush_r+0x92>
 800d82c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	0759      	lsls	r1, r3, #29
 800d832:	d505      	bpl.n	800d840 <__sflush_r+0x44>
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	1ad2      	subs	r2, r2, r3
 800d838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d83a:	b10b      	cbz	r3, 800d840 <__sflush_r+0x44>
 800d83c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d83e:	1ad2      	subs	r2, r2, r3
 800d840:	2300      	movs	r3, #0
 800d842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d844:	6a21      	ldr	r1, [r4, #32]
 800d846:	4628      	mov	r0, r5
 800d848:	47b0      	blx	r6
 800d84a:	1c43      	adds	r3, r0, #1
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	d106      	bne.n	800d85e <__sflush_r+0x62>
 800d850:	6829      	ldr	r1, [r5, #0]
 800d852:	291d      	cmp	r1, #29
 800d854:	d82b      	bhi.n	800d8ae <__sflush_r+0xb2>
 800d856:	4a2a      	ldr	r2, [pc, #168]	@ (800d900 <__sflush_r+0x104>)
 800d858:	410a      	asrs	r2, r1
 800d85a:	07d6      	lsls	r6, r2, #31
 800d85c:	d427      	bmi.n	800d8ae <__sflush_r+0xb2>
 800d85e:	2200      	movs	r2, #0
 800d860:	6062      	str	r2, [r4, #4]
 800d862:	04d9      	lsls	r1, r3, #19
 800d864:	6922      	ldr	r2, [r4, #16]
 800d866:	6022      	str	r2, [r4, #0]
 800d868:	d504      	bpl.n	800d874 <__sflush_r+0x78>
 800d86a:	1c42      	adds	r2, r0, #1
 800d86c:	d101      	bne.n	800d872 <__sflush_r+0x76>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	b903      	cbnz	r3, 800d874 <__sflush_r+0x78>
 800d872:	6560      	str	r0, [r4, #84]	@ 0x54
 800d874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d876:	602f      	str	r7, [r5, #0]
 800d878:	b1b9      	cbz	r1, 800d8aa <__sflush_r+0xae>
 800d87a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d87e:	4299      	cmp	r1, r3
 800d880:	d002      	beq.n	800d888 <__sflush_r+0x8c>
 800d882:	4628      	mov	r0, r5
 800d884:	f7ff f9e0 	bl	800cc48 <_free_r>
 800d888:	2300      	movs	r3, #0
 800d88a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d88c:	e00d      	b.n	800d8aa <__sflush_r+0xae>
 800d88e:	2301      	movs	r3, #1
 800d890:	4628      	mov	r0, r5
 800d892:	47b0      	blx	r6
 800d894:	4602      	mov	r2, r0
 800d896:	1c50      	adds	r0, r2, #1
 800d898:	d1c9      	bne.n	800d82e <__sflush_r+0x32>
 800d89a:	682b      	ldr	r3, [r5, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d0c6      	beq.n	800d82e <__sflush_r+0x32>
 800d8a0:	2b1d      	cmp	r3, #29
 800d8a2:	d001      	beq.n	800d8a8 <__sflush_r+0xac>
 800d8a4:	2b16      	cmp	r3, #22
 800d8a6:	d11e      	bne.n	800d8e6 <__sflush_r+0xea>
 800d8a8:	602f      	str	r7, [r5, #0]
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	e022      	b.n	800d8f4 <__sflush_r+0xf8>
 800d8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b2:	b21b      	sxth	r3, r3
 800d8b4:	e01b      	b.n	800d8ee <__sflush_r+0xf2>
 800d8b6:	690f      	ldr	r7, [r1, #16]
 800d8b8:	2f00      	cmp	r7, #0
 800d8ba:	d0f6      	beq.n	800d8aa <__sflush_r+0xae>
 800d8bc:	0793      	lsls	r3, r2, #30
 800d8be:	680e      	ldr	r6, [r1, #0]
 800d8c0:	bf08      	it	eq
 800d8c2:	694b      	ldreq	r3, [r1, #20]
 800d8c4:	600f      	str	r7, [r1, #0]
 800d8c6:	bf18      	it	ne
 800d8c8:	2300      	movne	r3, #0
 800d8ca:	eba6 0807 	sub.w	r8, r6, r7
 800d8ce:	608b      	str	r3, [r1, #8]
 800d8d0:	f1b8 0f00 	cmp.w	r8, #0
 800d8d4:	dde9      	ble.n	800d8aa <__sflush_r+0xae>
 800d8d6:	6a21      	ldr	r1, [r4, #32]
 800d8d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8da:	4643      	mov	r3, r8
 800d8dc:	463a      	mov	r2, r7
 800d8de:	4628      	mov	r0, r5
 800d8e0:	47b0      	blx	r6
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	dc08      	bgt.n	800d8f8 <__sflush_r+0xfc>
 800d8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f8:	4407      	add	r7, r0
 800d8fa:	eba8 0800 	sub.w	r8, r8, r0
 800d8fe:	e7e7      	b.n	800d8d0 <__sflush_r+0xd4>
 800d900:	dfbffffe 	.word	0xdfbffffe

0800d904 <_fflush_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	690b      	ldr	r3, [r1, #16]
 800d908:	4605      	mov	r5, r0
 800d90a:	460c      	mov	r4, r1
 800d90c:	b913      	cbnz	r3, 800d914 <_fflush_r+0x10>
 800d90e:	2500      	movs	r5, #0
 800d910:	4628      	mov	r0, r5
 800d912:	bd38      	pop	{r3, r4, r5, pc}
 800d914:	b118      	cbz	r0, 800d91e <_fflush_r+0x1a>
 800d916:	6a03      	ldr	r3, [r0, #32]
 800d918:	b90b      	cbnz	r3, 800d91e <_fflush_r+0x1a>
 800d91a:	f7fe fa03 	bl	800bd24 <__sinit>
 800d91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d0f3      	beq.n	800d90e <_fflush_r+0xa>
 800d926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d928:	07d0      	lsls	r0, r2, #31
 800d92a:	d404      	bmi.n	800d936 <_fflush_r+0x32>
 800d92c:	0599      	lsls	r1, r3, #22
 800d92e:	d402      	bmi.n	800d936 <_fflush_r+0x32>
 800d930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d932:	f7fe fb0e 	bl	800bf52 <__retarget_lock_acquire_recursive>
 800d936:	4628      	mov	r0, r5
 800d938:	4621      	mov	r1, r4
 800d93a:	f7ff ff5f 	bl	800d7fc <__sflush_r>
 800d93e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d940:	07da      	lsls	r2, r3, #31
 800d942:	4605      	mov	r5, r0
 800d944:	d4e4      	bmi.n	800d910 <_fflush_r+0xc>
 800d946:	89a3      	ldrh	r3, [r4, #12]
 800d948:	059b      	lsls	r3, r3, #22
 800d94a:	d4e1      	bmi.n	800d910 <_fflush_r+0xc>
 800d94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d94e:	f7fe fb01 	bl	800bf54 <__retarget_lock_release_recursive>
 800d952:	e7dd      	b.n	800d910 <_fflush_r+0xc>

0800d954 <fiprintf>:
 800d954:	b40e      	push	{r1, r2, r3}
 800d956:	b503      	push	{r0, r1, lr}
 800d958:	4601      	mov	r1, r0
 800d95a:	ab03      	add	r3, sp, #12
 800d95c:	4805      	ldr	r0, [pc, #20]	@ (800d974 <fiprintf+0x20>)
 800d95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d962:	6800      	ldr	r0, [r0, #0]
 800d964:	9301      	str	r3, [sp, #4]
 800d966:	f000 f8c3 	bl	800daf0 <_vfiprintf_r>
 800d96a:	b002      	add	sp, #8
 800d96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d970:	b003      	add	sp, #12
 800d972:	4770      	bx	lr
 800d974:	20000030 	.word	0x20000030

0800d978 <memmove>:
 800d978:	4288      	cmp	r0, r1
 800d97a:	b510      	push	{r4, lr}
 800d97c:	eb01 0402 	add.w	r4, r1, r2
 800d980:	d902      	bls.n	800d988 <memmove+0x10>
 800d982:	4284      	cmp	r4, r0
 800d984:	4623      	mov	r3, r4
 800d986:	d807      	bhi.n	800d998 <memmove+0x20>
 800d988:	1e43      	subs	r3, r0, #1
 800d98a:	42a1      	cmp	r1, r4
 800d98c:	d008      	beq.n	800d9a0 <memmove+0x28>
 800d98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d996:	e7f8      	b.n	800d98a <memmove+0x12>
 800d998:	4402      	add	r2, r0
 800d99a:	4601      	mov	r1, r0
 800d99c:	428a      	cmp	r2, r1
 800d99e:	d100      	bne.n	800d9a2 <memmove+0x2a>
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9aa:	e7f7      	b.n	800d99c <memmove+0x24>

0800d9ac <_sbrk_r>:
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	4d06      	ldr	r5, [pc, #24]	@ (800d9c8 <_sbrk_r+0x1c>)
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	602b      	str	r3, [r5, #0]
 800d9b8:	f7f6 f918 	bl	8003bec <_sbrk>
 800d9bc:	1c43      	adds	r3, r0, #1
 800d9be:	d102      	bne.n	800d9c6 <_sbrk_r+0x1a>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	b103      	cbz	r3, 800d9c6 <_sbrk_r+0x1a>
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	20000bb0 	.word	0x20000bb0

0800d9cc <abort>:
 800d9cc:	b508      	push	{r3, lr}
 800d9ce:	2006      	movs	r0, #6
 800d9d0:	f000 fa62 	bl	800de98 <raise>
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	f7f6 f891 	bl	8003afc <_exit>

0800d9da <_calloc_r>:
 800d9da:	b570      	push	{r4, r5, r6, lr}
 800d9dc:	fba1 5402 	umull	r5, r4, r1, r2
 800d9e0:	b93c      	cbnz	r4, 800d9f2 <_calloc_r+0x18>
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	f7ff f9a4 	bl	800cd30 <_malloc_r>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	b928      	cbnz	r0, 800d9f8 <_calloc_r+0x1e>
 800d9ec:	2600      	movs	r6, #0
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	bd70      	pop	{r4, r5, r6, pc}
 800d9f2:	220c      	movs	r2, #12
 800d9f4:	6002      	str	r2, [r0, #0]
 800d9f6:	e7f9      	b.n	800d9ec <_calloc_r+0x12>
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	f7fe fa2b 	bl	800be56 <memset>
 800da00:	e7f5      	b.n	800d9ee <_calloc_r+0x14>

0800da02 <__ascii_mbtowc>:
 800da02:	b082      	sub	sp, #8
 800da04:	b901      	cbnz	r1, 800da08 <__ascii_mbtowc+0x6>
 800da06:	a901      	add	r1, sp, #4
 800da08:	b142      	cbz	r2, 800da1c <__ascii_mbtowc+0x1a>
 800da0a:	b14b      	cbz	r3, 800da20 <__ascii_mbtowc+0x1e>
 800da0c:	7813      	ldrb	r3, [r2, #0]
 800da0e:	600b      	str	r3, [r1, #0]
 800da10:	7812      	ldrb	r2, [r2, #0]
 800da12:	1e10      	subs	r0, r2, #0
 800da14:	bf18      	it	ne
 800da16:	2001      	movne	r0, #1
 800da18:	b002      	add	sp, #8
 800da1a:	4770      	bx	lr
 800da1c:	4610      	mov	r0, r2
 800da1e:	e7fb      	b.n	800da18 <__ascii_mbtowc+0x16>
 800da20:	f06f 0001 	mvn.w	r0, #1
 800da24:	e7f8      	b.n	800da18 <__ascii_mbtowc+0x16>

0800da26 <_realloc_r>:
 800da26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2a:	4680      	mov	r8, r0
 800da2c:	4615      	mov	r5, r2
 800da2e:	460c      	mov	r4, r1
 800da30:	b921      	cbnz	r1, 800da3c <_realloc_r+0x16>
 800da32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da36:	4611      	mov	r1, r2
 800da38:	f7ff b97a 	b.w	800cd30 <_malloc_r>
 800da3c:	b92a      	cbnz	r2, 800da4a <_realloc_r+0x24>
 800da3e:	f7ff f903 	bl	800cc48 <_free_r>
 800da42:	2400      	movs	r4, #0
 800da44:	4620      	mov	r0, r4
 800da46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da4a:	f000 fa41 	bl	800ded0 <_malloc_usable_size_r>
 800da4e:	4285      	cmp	r5, r0
 800da50:	4606      	mov	r6, r0
 800da52:	d802      	bhi.n	800da5a <_realloc_r+0x34>
 800da54:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da58:	d8f4      	bhi.n	800da44 <_realloc_r+0x1e>
 800da5a:	4629      	mov	r1, r5
 800da5c:	4640      	mov	r0, r8
 800da5e:	f7ff f967 	bl	800cd30 <_malloc_r>
 800da62:	4607      	mov	r7, r0
 800da64:	2800      	cmp	r0, #0
 800da66:	d0ec      	beq.n	800da42 <_realloc_r+0x1c>
 800da68:	42b5      	cmp	r5, r6
 800da6a:	462a      	mov	r2, r5
 800da6c:	4621      	mov	r1, r4
 800da6e:	bf28      	it	cs
 800da70:	4632      	movcs	r2, r6
 800da72:	f7fe fa70 	bl	800bf56 <memcpy>
 800da76:	4621      	mov	r1, r4
 800da78:	4640      	mov	r0, r8
 800da7a:	f7ff f8e5 	bl	800cc48 <_free_r>
 800da7e:	463c      	mov	r4, r7
 800da80:	e7e0      	b.n	800da44 <_realloc_r+0x1e>

0800da82 <__ascii_wctomb>:
 800da82:	4603      	mov	r3, r0
 800da84:	4608      	mov	r0, r1
 800da86:	b141      	cbz	r1, 800da9a <__ascii_wctomb+0x18>
 800da88:	2aff      	cmp	r2, #255	@ 0xff
 800da8a:	d904      	bls.n	800da96 <__ascii_wctomb+0x14>
 800da8c:	228a      	movs	r2, #138	@ 0x8a
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	4770      	bx	lr
 800da96:	700a      	strb	r2, [r1, #0]
 800da98:	2001      	movs	r0, #1
 800da9a:	4770      	bx	lr

0800da9c <__sfputc_r>:
 800da9c:	6893      	ldr	r3, [r2, #8]
 800da9e:	3b01      	subs	r3, #1
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	b410      	push	{r4}
 800daa4:	6093      	str	r3, [r2, #8]
 800daa6:	da08      	bge.n	800daba <__sfputc_r+0x1e>
 800daa8:	6994      	ldr	r4, [r2, #24]
 800daaa:	42a3      	cmp	r3, r4
 800daac:	db01      	blt.n	800dab2 <__sfputc_r+0x16>
 800daae:	290a      	cmp	r1, #10
 800dab0:	d103      	bne.n	800daba <__sfputc_r+0x1e>
 800dab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab6:	f000 b933 	b.w	800dd20 <__swbuf_r>
 800daba:	6813      	ldr	r3, [r2, #0]
 800dabc:	1c58      	adds	r0, r3, #1
 800dabe:	6010      	str	r0, [r2, #0]
 800dac0:	7019      	strb	r1, [r3, #0]
 800dac2:	4608      	mov	r0, r1
 800dac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <__sfputs_r>:
 800daca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dacc:	4606      	mov	r6, r0
 800dace:	460f      	mov	r7, r1
 800dad0:	4614      	mov	r4, r2
 800dad2:	18d5      	adds	r5, r2, r3
 800dad4:	42ac      	cmp	r4, r5
 800dad6:	d101      	bne.n	800dadc <__sfputs_r+0x12>
 800dad8:	2000      	movs	r0, #0
 800dada:	e007      	b.n	800daec <__sfputs_r+0x22>
 800dadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae0:	463a      	mov	r2, r7
 800dae2:	4630      	mov	r0, r6
 800dae4:	f7ff ffda 	bl	800da9c <__sfputc_r>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d1f3      	bne.n	800dad4 <__sfputs_r+0xa>
 800daec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800daf0 <_vfiprintf_r>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	460d      	mov	r5, r1
 800daf6:	b09d      	sub	sp, #116	@ 0x74
 800daf8:	4614      	mov	r4, r2
 800dafa:	4698      	mov	r8, r3
 800dafc:	4606      	mov	r6, r0
 800dafe:	b118      	cbz	r0, 800db08 <_vfiprintf_r+0x18>
 800db00:	6a03      	ldr	r3, [r0, #32]
 800db02:	b90b      	cbnz	r3, 800db08 <_vfiprintf_r+0x18>
 800db04:	f7fe f90e 	bl	800bd24 <__sinit>
 800db08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db0a:	07d9      	lsls	r1, r3, #31
 800db0c:	d405      	bmi.n	800db1a <_vfiprintf_r+0x2a>
 800db0e:	89ab      	ldrh	r3, [r5, #12]
 800db10:	059a      	lsls	r2, r3, #22
 800db12:	d402      	bmi.n	800db1a <_vfiprintf_r+0x2a>
 800db14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db16:	f7fe fa1c 	bl	800bf52 <__retarget_lock_acquire_recursive>
 800db1a:	89ab      	ldrh	r3, [r5, #12]
 800db1c:	071b      	lsls	r3, r3, #28
 800db1e:	d501      	bpl.n	800db24 <_vfiprintf_r+0x34>
 800db20:	692b      	ldr	r3, [r5, #16]
 800db22:	b99b      	cbnz	r3, 800db4c <_vfiprintf_r+0x5c>
 800db24:	4629      	mov	r1, r5
 800db26:	4630      	mov	r0, r6
 800db28:	f000 f938 	bl	800dd9c <__swsetup_r>
 800db2c:	b170      	cbz	r0, 800db4c <_vfiprintf_r+0x5c>
 800db2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db30:	07dc      	lsls	r4, r3, #31
 800db32:	d504      	bpl.n	800db3e <_vfiprintf_r+0x4e>
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	b01d      	add	sp, #116	@ 0x74
 800db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3e:	89ab      	ldrh	r3, [r5, #12]
 800db40:	0598      	lsls	r0, r3, #22
 800db42:	d4f7      	bmi.n	800db34 <_vfiprintf_r+0x44>
 800db44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db46:	f7fe fa05 	bl	800bf54 <__retarget_lock_release_recursive>
 800db4a:	e7f3      	b.n	800db34 <_vfiprintf_r+0x44>
 800db4c:	2300      	movs	r3, #0
 800db4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800db50:	2320      	movs	r3, #32
 800db52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db56:	f8cd 800c 	str.w	r8, [sp, #12]
 800db5a:	2330      	movs	r3, #48	@ 0x30
 800db5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd0c <_vfiprintf_r+0x21c>
 800db60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db64:	f04f 0901 	mov.w	r9, #1
 800db68:	4623      	mov	r3, r4
 800db6a:	469a      	mov	sl, r3
 800db6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db70:	b10a      	cbz	r2, 800db76 <_vfiprintf_r+0x86>
 800db72:	2a25      	cmp	r2, #37	@ 0x25
 800db74:	d1f9      	bne.n	800db6a <_vfiprintf_r+0x7a>
 800db76:	ebba 0b04 	subs.w	fp, sl, r4
 800db7a:	d00b      	beq.n	800db94 <_vfiprintf_r+0xa4>
 800db7c:	465b      	mov	r3, fp
 800db7e:	4622      	mov	r2, r4
 800db80:	4629      	mov	r1, r5
 800db82:	4630      	mov	r0, r6
 800db84:	f7ff ffa1 	bl	800daca <__sfputs_r>
 800db88:	3001      	adds	r0, #1
 800db8a:	f000 80a7 	beq.w	800dcdc <_vfiprintf_r+0x1ec>
 800db8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db90:	445a      	add	r2, fp
 800db92:	9209      	str	r2, [sp, #36]	@ 0x24
 800db94:	f89a 3000 	ldrb.w	r3, [sl]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 809f 	beq.w	800dcdc <_vfiprintf_r+0x1ec>
 800db9e:	2300      	movs	r3, #0
 800dba0:	f04f 32ff 	mov.w	r2, #4294967295
 800dba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dba8:	f10a 0a01 	add.w	sl, sl, #1
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	9307      	str	r3, [sp, #28]
 800dbb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbb6:	4654      	mov	r4, sl
 800dbb8:	2205      	movs	r2, #5
 800dbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbbe:	4853      	ldr	r0, [pc, #332]	@ (800dd0c <_vfiprintf_r+0x21c>)
 800dbc0:	f7f2 fb06 	bl	80001d0 <memchr>
 800dbc4:	9a04      	ldr	r2, [sp, #16]
 800dbc6:	b9d8      	cbnz	r0, 800dc00 <_vfiprintf_r+0x110>
 800dbc8:	06d1      	lsls	r1, r2, #27
 800dbca:	bf44      	itt	mi
 800dbcc:	2320      	movmi	r3, #32
 800dbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbd2:	0713      	lsls	r3, r2, #28
 800dbd4:	bf44      	itt	mi
 800dbd6:	232b      	movmi	r3, #43	@ 0x2b
 800dbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbe2:	d015      	beq.n	800dc10 <_vfiprintf_r+0x120>
 800dbe4:	9a07      	ldr	r2, [sp, #28]
 800dbe6:	4654      	mov	r4, sl
 800dbe8:	2000      	movs	r0, #0
 800dbea:	f04f 0c0a 	mov.w	ip, #10
 800dbee:	4621      	mov	r1, r4
 800dbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbf4:	3b30      	subs	r3, #48	@ 0x30
 800dbf6:	2b09      	cmp	r3, #9
 800dbf8:	d94b      	bls.n	800dc92 <_vfiprintf_r+0x1a2>
 800dbfa:	b1b0      	cbz	r0, 800dc2a <_vfiprintf_r+0x13a>
 800dbfc:	9207      	str	r2, [sp, #28]
 800dbfe:	e014      	b.n	800dc2a <_vfiprintf_r+0x13a>
 800dc00:	eba0 0308 	sub.w	r3, r0, r8
 800dc04:	fa09 f303 	lsl.w	r3, r9, r3
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	46a2      	mov	sl, r4
 800dc0e:	e7d2      	b.n	800dbb6 <_vfiprintf_r+0xc6>
 800dc10:	9b03      	ldr	r3, [sp, #12]
 800dc12:	1d19      	adds	r1, r3, #4
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	9103      	str	r1, [sp, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	bfbb      	ittet	lt
 800dc1c:	425b      	neglt	r3, r3
 800dc1e:	f042 0202 	orrlt.w	r2, r2, #2
 800dc22:	9307      	strge	r3, [sp, #28]
 800dc24:	9307      	strlt	r3, [sp, #28]
 800dc26:	bfb8      	it	lt
 800dc28:	9204      	strlt	r2, [sp, #16]
 800dc2a:	7823      	ldrb	r3, [r4, #0]
 800dc2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc2e:	d10a      	bne.n	800dc46 <_vfiprintf_r+0x156>
 800dc30:	7863      	ldrb	r3, [r4, #1]
 800dc32:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc34:	d132      	bne.n	800dc9c <_vfiprintf_r+0x1ac>
 800dc36:	9b03      	ldr	r3, [sp, #12]
 800dc38:	1d1a      	adds	r2, r3, #4
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	9203      	str	r2, [sp, #12]
 800dc3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc42:	3402      	adds	r4, #2
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd1c <_vfiprintf_r+0x22c>
 800dc4a:	7821      	ldrb	r1, [r4, #0]
 800dc4c:	2203      	movs	r2, #3
 800dc4e:	4650      	mov	r0, sl
 800dc50:	f7f2 fabe 	bl	80001d0 <memchr>
 800dc54:	b138      	cbz	r0, 800dc66 <_vfiprintf_r+0x176>
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	eba0 000a 	sub.w	r0, r0, sl
 800dc5c:	2240      	movs	r2, #64	@ 0x40
 800dc5e:	4082      	lsls	r2, r0
 800dc60:	4313      	orrs	r3, r2
 800dc62:	3401      	adds	r4, #1
 800dc64:	9304      	str	r3, [sp, #16]
 800dc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc6a:	4829      	ldr	r0, [pc, #164]	@ (800dd10 <_vfiprintf_r+0x220>)
 800dc6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc70:	2206      	movs	r2, #6
 800dc72:	f7f2 faad 	bl	80001d0 <memchr>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d03f      	beq.n	800dcfa <_vfiprintf_r+0x20a>
 800dc7a:	4b26      	ldr	r3, [pc, #152]	@ (800dd14 <_vfiprintf_r+0x224>)
 800dc7c:	bb1b      	cbnz	r3, 800dcc6 <_vfiprintf_r+0x1d6>
 800dc7e:	9b03      	ldr	r3, [sp, #12]
 800dc80:	3307      	adds	r3, #7
 800dc82:	f023 0307 	bic.w	r3, r3, #7
 800dc86:	3308      	adds	r3, #8
 800dc88:	9303      	str	r3, [sp, #12]
 800dc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc8c:	443b      	add	r3, r7
 800dc8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc90:	e76a      	b.n	800db68 <_vfiprintf_r+0x78>
 800dc92:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc96:	460c      	mov	r4, r1
 800dc98:	2001      	movs	r0, #1
 800dc9a:	e7a8      	b.n	800dbee <_vfiprintf_r+0xfe>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	3401      	adds	r4, #1
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	4619      	mov	r1, r3
 800dca4:	f04f 0c0a 	mov.w	ip, #10
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcae:	3a30      	subs	r2, #48	@ 0x30
 800dcb0:	2a09      	cmp	r2, #9
 800dcb2:	d903      	bls.n	800dcbc <_vfiprintf_r+0x1cc>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d0c6      	beq.n	800dc46 <_vfiprintf_r+0x156>
 800dcb8:	9105      	str	r1, [sp, #20]
 800dcba:	e7c4      	b.n	800dc46 <_vfiprintf_r+0x156>
 800dcbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e7f0      	b.n	800dca8 <_vfiprintf_r+0x1b8>
 800dcc6:	ab03      	add	r3, sp, #12
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	462a      	mov	r2, r5
 800dccc:	4b12      	ldr	r3, [pc, #72]	@ (800dd18 <_vfiprintf_r+0x228>)
 800dcce:	a904      	add	r1, sp, #16
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f7fd fbe3 	bl	800b49c <_printf_float>
 800dcd6:	4607      	mov	r7, r0
 800dcd8:	1c78      	adds	r0, r7, #1
 800dcda:	d1d6      	bne.n	800dc8a <_vfiprintf_r+0x19a>
 800dcdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcde:	07d9      	lsls	r1, r3, #31
 800dce0:	d405      	bmi.n	800dcee <_vfiprintf_r+0x1fe>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	059a      	lsls	r2, r3, #22
 800dce6:	d402      	bmi.n	800dcee <_vfiprintf_r+0x1fe>
 800dce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcea:	f7fe f933 	bl	800bf54 <__retarget_lock_release_recursive>
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	065b      	lsls	r3, r3, #25
 800dcf2:	f53f af1f 	bmi.w	800db34 <_vfiprintf_r+0x44>
 800dcf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcf8:	e71e      	b.n	800db38 <_vfiprintf_r+0x48>
 800dcfa:	ab03      	add	r3, sp, #12
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	462a      	mov	r2, r5
 800dd00:	4b05      	ldr	r3, [pc, #20]	@ (800dd18 <_vfiprintf_r+0x228>)
 800dd02:	a904      	add	r1, sp, #16
 800dd04:	4630      	mov	r0, r6
 800dd06:	f7fd fe61 	bl	800b9cc <_printf_i>
 800dd0a:	e7e4      	b.n	800dcd6 <_vfiprintf_r+0x1e6>
 800dd0c:	0800e530 	.word	0x0800e530
 800dd10:	0800e53a 	.word	0x0800e53a
 800dd14:	0800b49d 	.word	0x0800b49d
 800dd18:	0800dacb 	.word	0x0800dacb
 800dd1c:	0800e536 	.word	0x0800e536

0800dd20 <__swbuf_r>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	460e      	mov	r6, r1
 800dd24:	4614      	mov	r4, r2
 800dd26:	4605      	mov	r5, r0
 800dd28:	b118      	cbz	r0, 800dd32 <__swbuf_r+0x12>
 800dd2a:	6a03      	ldr	r3, [r0, #32]
 800dd2c:	b90b      	cbnz	r3, 800dd32 <__swbuf_r+0x12>
 800dd2e:	f7fd fff9 	bl	800bd24 <__sinit>
 800dd32:	69a3      	ldr	r3, [r4, #24]
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	071a      	lsls	r2, r3, #28
 800dd3a:	d501      	bpl.n	800dd40 <__swbuf_r+0x20>
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	b943      	cbnz	r3, 800dd52 <__swbuf_r+0x32>
 800dd40:	4621      	mov	r1, r4
 800dd42:	4628      	mov	r0, r5
 800dd44:	f000 f82a 	bl	800dd9c <__swsetup_r>
 800dd48:	b118      	cbz	r0, 800dd52 <__swbuf_r+0x32>
 800dd4a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd4e:	4638      	mov	r0, r7
 800dd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	6922      	ldr	r2, [r4, #16]
 800dd56:	1a98      	subs	r0, r3, r2
 800dd58:	6963      	ldr	r3, [r4, #20]
 800dd5a:	b2f6      	uxtb	r6, r6
 800dd5c:	4283      	cmp	r3, r0
 800dd5e:	4637      	mov	r7, r6
 800dd60:	dc05      	bgt.n	800dd6e <__swbuf_r+0x4e>
 800dd62:	4621      	mov	r1, r4
 800dd64:	4628      	mov	r0, r5
 800dd66:	f7ff fdcd 	bl	800d904 <_fflush_r>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d1ed      	bne.n	800dd4a <__swbuf_r+0x2a>
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	60a3      	str	r3, [r4, #8]
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	1c5a      	adds	r2, r3, #1
 800dd78:	6022      	str	r2, [r4, #0]
 800dd7a:	701e      	strb	r6, [r3, #0]
 800dd7c:	6962      	ldr	r2, [r4, #20]
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d004      	beq.n	800dd8e <__swbuf_r+0x6e>
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	07db      	lsls	r3, r3, #31
 800dd88:	d5e1      	bpl.n	800dd4e <__swbuf_r+0x2e>
 800dd8a:	2e0a      	cmp	r6, #10
 800dd8c:	d1df      	bne.n	800dd4e <__swbuf_r+0x2e>
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4628      	mov	r0, r5
 800dd92:	f7ff fdb7 	bl	800d904 <_fflush_r>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d0d9      	beq.n	800dd4e <__swbuf_r+0x2e>
 800dd9a:	e7d6      	b.n	800dd4a <__swbuf_r+0x2a>

0800dd9c <__swsetup_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4b29      	ldr	r3, [pc, #164]	@ (800de44 <__swsetup_r+0xa8>)
 800dda0:	4605      	mov	r5, r0
 800dda2:	6818      	ldr	r0, [r3, #0]
 800dda4:	460c      	mov	r4, r1
 800dda6:	b118      	cbz	r0, 800ddb0 <__swsetup_r+0x14>
 800dda8:	6a03      	ldr	r3, [r0, #32]
 800ddaa:	b90b      	cbnz	r3, 800ddb0 <__swsetup_r+0x14>
 800ddac:	f7fd ffba 	bl	800bd24 <__sinit>
 800ddb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddb4:	0719      	lsls	r1, r3, #28
 800ddb6:	d422      	bmi.n	800ddfe <__swsetup_r+0x62>
 800ddb8:	06da      	lsls	r2, r3, #27
 800ddba:	d407      	bmi.n	800ddcc <__swsetup_r+0x30>
 800ddbc:	2209      	movs	r2, #9
 800ddbe:	602a      	str	r2, [r5, #0]
 800ddc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddc4:	81a3      	strh	r3, [r4, #12]
 800ddc6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddca:	e033      	b.n	800de34 <__swsetup_r+0x98>
 800ddcc:	0758      	lsls	r0, r3, #29
 800ddce:	d512      	bpl.n	800ddf6 <__swsetup_r+0x5a>
 800ddd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddd2:	b141      	cbz	r1, 800dde6 <__swsetup_r+0x4a>
 800ddd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddd8:	4299      	cmp	r1, r3
 800ddda:	d002      	beq.n	800dde2 <__swsetup_r+0x46>
 800dddc:	4628      	mov	r0, r5
 800ddde:	f7fe ff33 	bl	800cc48 <_free_r>
 800dde2:	2300      	movs	r3, #0
 800dde4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ddec:	81a3      	strh	r3, [r4, #12]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	6063      	str	r3, [r4, #4]
 800ddf2:	6923      	ldr	r3, [r4, #16]
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	f043 0308 	orr.w	r3, r3, #8
 800ddfc:	81a3      	strh	r3, [r4, #12]
 800ddfe:	6923      	ldr	r3, [r4, #16]
 800de00:	b94b      	cbnz	r3, 800de16 <__swsetup_r+0x7a>
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de0c:	d003      	beq.n	800de16 <__swsetup_r+0x7a>
 800de0e:	4621      	mov	r1, r4
 800de10:	4628      	mov	r0, r5
 800de12:	f000 f88b 	bl	800df2c <__smakebuf_r>
 800de16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de1a:	f013 0201 	ands.w	r2, r3, #1
 800de1e:	d00a      	beq.n	800de36 <__swsetup_r+0x9a>
 800de20:	2200      	movs	r2, #0
 800de22:	60a2      	str	r2, [r4, #8]
 800de24:	6962      	ldr	r2, [r4, #20]
 800de26:	4252      	negs	r2, r2
 800de28:	61a2      	str	r2, [r4, #24]
 800de2a:	6922      	ldr	r2, [r4, #16]
 800de2c:	b942      	cbnz	r2, 800de40 <__swsetup_r+0xa4>
 800de2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de32:	d1c5      	bne.n	800ddc0 <__swsetup_r+0x24>
 800de34:	bd38      	pop	{r3, r4, r5, pc}
 800de36:	0799      	lsls	r1, r3, #30
 800de38:	bf58      	it	pl
 800de3a:	6962      	ldrpl	r2, [r4, #20]
 800de3c:	60a2      	str	r2, [r4, #8]
 800de3e:	e7f4      	b.n	800de2a <__swsetup_r+0x8e>
 800de40:	2000      	movs	r0, #0
 800de42:	e7f7      	b.n	800de34 <__swsetup_r+0x98>
 800de44:	20000030 	.word	0x20000030

0800de48 <_raise_r>:
 800de48:	291f      	cmp	r1, #31
 800de4a:	b538      	push	{r3, r4, r5, lr}
 800de4c:	4605      	mov	r5, r0
 800de4e:	460c      	mov	r4, r1
 800de50:	d904      	bls.n	800de5c <_raise_r+0x14>
 800de52:	2316      	movs	r3, #22
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	f04f 30ff 	mov.w	r0, #4294967295
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de5e:	b112      	cbz	r2, 800de66 <_raise_r+0x1e>
 800de60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de64:	b94b      	cbnz	r3, 800de7a <_raise_r+0x32>
 800de66:	4628      	mov	r0, r5
 800de68:	f000 f830 	bl	800decc <_getpid_r>
 800de6c:	4622      	mov	r2, r4
 800de6e:	4601      	mov	r1, r0
 800de70:	4628      	mov	r0, r5
 800de72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de76:	f000 b817 	b.w	800dea8 <_kill_r>
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d00a      	beq.n	800de94 <_raise_r+0x4c>
 800de7e:	1c59      	adds	r1, r3, #1
 800de80:	d103      	bne.n	800de8a <_raise_r+0x42>
 800de82:	2316      	movs	r3, #22
 800de84:	6003      	str	r3, [r0, #0]
 800de86:	2001      	movs	r0, #1
 800de88:	e7e7      	b.n	800de5a <_raise_r+0x12>
 800de8a:	2100      	movs	r1, #0
 800de8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de90:	4620      	mov	r0, r4
 800de92:	4798      	blx	r3
 800de94:	2000      	movs	r0, #0
 800de96:	e7e0      	b.n	800de5a <_raise_r+0x12>

0800de98 <raise>:
 800de98:	4b02      	ldr	r3, [pc, #8]	@ (800dea4 <raise+0xc>)
 800de9a:	4601      	mov	r1, r0
 800de9c:	6818      	ldr	r0, [r3, #0]
 800de9e:	f7ff bfd3 	b.w	800de48 <_raise_r>
 800dea2:	bf00      	nop
 800dea4:	20000030 	.word	0x20000030

0800dea8 <_kill_r>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	4d07      	ldr	r5, [pc, #28]	@ (800dec8 <_kill_r+0x20>)
 800deac:	2300      	movs	r3, #0
 800deae:	4604      	mov	r4, r0
 800deb0:	4608      	mov	r0, r1
 800deb2:	4611      	mov	r1, r2
 800deb4:	602b      	str	r3, [r5, #0]
 800deb6:	f7f5 fe11 	bl	8003adc <_kill>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	d102      	bne.n	800dec4 <_kill_r+0x1c>
 800debe:	682b      	ldr	r3, [r5, #0]
 800dec0:	b103      	cbz	r3, 800dec4 <_kill_r+0x1c>
 800dec2:	6023      	str	r3, [r4, #0]
 800dec4:	bd38      	pop	{r3, r4, r5, pc}
 800dec6:	bf00      	nop
 800dec8:	20000bb0 	.word	0x20000bb0

0800decc <_getpid_r>:
 800decc:	f7f5 bdfe 	b.w	8003acc <_getpid>

0800ded0 <_malloc_usable_size_r>:
 800ded0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded4:	1f18      	subs	r0, r3, #4
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfbc      	itt	lt
 800deda:	580b      	ldrlt	r3, [r1, r0]
 800dedc:	18c0      	addlt	r0, r0, r3
 800dede:	4770      	bx	lr

0800dee0 <__swhatbuf_r>:
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	460c      	mov	r4, r1
 800dee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee8:	2900      	cmp	r1, #0
 800deea:	b096      	sub	sp, #88	@ 0x58
 800deec:	4615      	mov	r5, r2
 800deee:	461e      	mov	r6, r3
 800def0:	da0d      	bge.n	800df0e <__swhatbuf_r+0x2e>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800def8:	f04f 0100 	mov.w	r1, #0
 800defc:	bf14      	ite	ne
 800defe:	2340      	movne	r3, #64	@ 0x40
 800df00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df04:	2000      	movs	r0, #0
 800df06:	6031      	str	r1, [r6, #0]
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	b016      	add	sp, #88	@ 0x58
 800df0c:	bd70      	pop	{r4, r5, r6, pc}
 800df0e:	466a      	mov	r2, sp
 800df10:	f000 f848 	bl	800dfa4 <_fstat_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	dbec      	blt.n	800def2 <__swhatbuf_r+0x12>
 800df18:	9901      	ldr	r1, [sp, #4]
 800df1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df22:	4259      	negs	r1, r3
 800df24:	4159      	adcs	r1, r3
 800df26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df2a:	e7eb      	b.n	800df04 <__swhatbuf_r+0x24>

0800df2c <__smakebuf_r>:
 800df2c:	898b      	ldrh	r3, [r1, #12]
 800df2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df30:	079d      	lsls	r5, r3, #30
 800df32:	4606      	mov	r6, r0
 800df34:	460c      	mov	r4, r1
 800df36:	d507      	bpl.n	800df48 <__smakebuf_r+0x1c>
 800df38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	2301      	movs	r3, #1
 800df42:	6163      	str	r3, [r4, #20]
 800df44:	b003      	add	sp, #12
 800df46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df48:	ab01      	add	r3, sp, #4
 800df4a:	466a      	mov	r2, sp
 800df4c:	f7ff ffc8 	bl	800dee0 <__swhatbuf_r>
 800df50:	9f00      	ldr	r7, [sp, #0]
 800df52:	4605      	mov	r5, r0
 800df54:	4639      	mov	r1, r7
 800df56:	4630      	mov	r0, r6
 800df58:	f7fe feea 	bl	800cd30 <_malloc_r>
 800df5c:	b948      	cbnz	r0, 800df72 <__smakebuf_r+0x46>
 800df5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df62:	059a      	lsls	r2, r3, #22
 800df64:	d4ee      	bmi.n	800df44 <__smakebuf_r+0x18>
 800df66:	f023 0303 	bic.w	r3, r3, #3
 800df6a:	f043 0302 	orr.w	r3, r3, #2
 800df6e:	81a3      	strh	r3, [r4, #12]
 800df70:	e7e2      	b.n	800df38 <__smakebuf_r+0xc>
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	6020      	str	r0, [r4, #0]
 800df76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	9b01      	ldr	r3, [sp, #4]
 800df7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df82:	b15b      	cbz	r3, 800df9c <__smakebuf_r+0x70>
 800df84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df88:	4630      	mov	r0, r6
 800df8a:	f000 f81d 	bl	800dfc8 <_isatty_r>
 800df8e:	b128      	cbz	r0, 800df9c <__smakebuf_r+0x70>
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	f023 0303 	bic.w	r3, r3, #3
 800df96:	f043 0301 	orr.w	r3, r3, #1
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	431d      	orrs	r5, r3
 800dfa0:	81a5      	strh	r5, [r4, #12]
 800dfa2:	e7cf      	b.n	800df44 <__smakebuf_r+0x18>

0800dfa4 <_fstat_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4d07      	ldr	r5, [pc, #28]	@ (800dfc4 <_fstat_r+0x20>)
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4604      	mov	r4, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	4611      	mov	r1, r2
 800dfb0:	602b      	str	r3, [r5, #0]
 800dfb2:	f7f5 fdf3 	bl	8003b9c <_fstat>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d102      	bne.n	800dfc0 <_fstat_r+0x1c>
 800dfba:	682b      	ldr	r3, [r5, #0]
 800dfbc:	b103      	cbz	r3, 800dfc0 <_fstat_r+0x1c>
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	bd38      	pop	{r3, r4, r5, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000bb0 	.word	0x20000bb0

0800dfc8 <_isatty_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d06      	ldr	r5, [pc, #24]	@ (800dfe4 <_isatty_r+0x1c>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	f7f5 fdf2 	bl	8003bbc <_isatty>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_isatty_r+0x1a>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_isatty_r+0x1a>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20000bb0 	.word	0x20000bb0

0800dfe8 <_init>:
 800dfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfea:	bf00      	nop
 800dfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfee:	bc08      	pop	{r3}
 800dff0:	469e      	mov	lr, r3
 800dff2:	4770      	bx	lr

0800dff4 <_fini>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	bf00      	nop
 800dff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dffa:	bc08      	pop	{r3}
 800dffc:	469e      	mov	lr, r3
 800dffe:	4770      	bx	lr
